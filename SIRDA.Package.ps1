#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 6eda2d57-056d-43e0-b275-12b9ccfddde6
# Source File: C:\Users\a-jholder\Desktop\IncidentResponse\SIRDA.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
nQIAAB+LCAAAAAAABACdUl1LwzAUfRf2H0oeha4fug2xCyijsgc/WIevkiV3NpomJUnn5q83bbox
mSL4cm9OcnPOvSfJFkDVBvRuRizBg7MgyJ60egNqg2InaamV5J/ApignwgDqNnMuLOgpOh/WJrlu
Y+UT8ynZVqJbrLtoXPQ7JYh6aLcWdUJO6hm04UridJhk0R70Z04F5jM8BkZSNpqE8WjMwssLiMNV
OhmFSbq6onTNGINxFvXF/dV+guWuBhxn0THckyvBnFwQHauZHvQwuG24cJPHCBeWaNvU7TBe67fK
YAFr0CAp5I2k1o0zRUWpPsJ7wmWudPXiXEF4j1qP/iAsSqJb/5e6gR/p53Kj3iG8E2rlnsjxJwj3
oH2Lf/brPKNgDBjf8AGedOyBt+5gtUePmr9ySURb8EAqwMV8MbtxDLWryqKT48FZFn37jl/Htwiu
nQIAAA==#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.159
     Generated on:       3/16/2019 6:30 PM
     Generated by:       a-jholder
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2019
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
ZAMAAB+LCAAAAAAABAC9k99Lw0AMx98F/4djz+Xa0tU6uBZkshdBxYnzNe3ScXg/RnLn6H/vNmWK
PggiJS/5JiQfQhL1gJ1/RRquIYDYO6y9qyeFzCfN+ZkQ6o70RjswC23wFiw2ywAU4lZumVX6I3us
uWJG2xqNfNSfkaGx3Hkyuk3E0wdrKrODJWIeTYiEtcMYCEwi7uO+R3eDw6N/QVe3VQVlV17ks2KK
2eVMpaeu3ynLgQPaMRhypd3a71guPFkehXjY1Dgggp12m7+wsqIv+6rP83WZQQG/s56tGWWmuSf8
f9BJvp+8Sr9+VfMGKxoen2QDAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Show-MainForm_psf) -eq "OK")
	{
		
	}
	
	#$global:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
GBYBAB+LCAAAAAAABABkukePtEwUpbl/pfoPrd4iDd5JPS1B4r13O2wCiffw64evezm1KlVlRUbE
vfec51Tyv5wyH49yubl0S//H+83ajMP/+z/R/wf+n//779//+B//y1yabzOkndB0pZH25f/W02YQ
xqX/f6a1+l/g/+/X/+eP/vv9/y6afoFlCXd/PMd8TO7D/N8vluFWMOieEWo960tUJqVVZwnk+gEM
CsN/5Ikc2p5xGsy2+UlhzOMnmNB3jeuC+vsHLBVTLAW5FsdO7sPUFyvM09D2SdR1UW9KX8y7Oegi
dKtIGw8QNcgcrdADjEtyXRAMBEsJrtNOBAHr75/UJCZSe+BJFHhlgcOAFhUADNZOIpmAiCnIgohF
WMDxgAfyGeeZfuiDcrd7u3VwuTz1XlUyjrJsM5+/fz14V47D9NlueXocNOTY/MCl1h72C5RhL7o+
+LTPSn4++lDjFXCmidKnhUPlFaOWTvAUptbj1XY+MPT3L0jTNPPjXaCSHTp0VsNRoPQKEbxyKjrm
LcTLCQPJS7owgEgOVFcTOtn08alArL0IfkoPYeWr6pB34++f3ebTln249upa1iIHyRcclLwX4Qw9
fCSyFPEz2rnFgK6cc3Wt44Dl2yc8Bx/YCP+demUh1uMY+mPTf/9GOn9akwS7vkVW2QKxAcVY4KjA
88r040lAlKwyjQRTd+AsslhzECxIG6V5+jhcGVl5bEEqCCzRuX9X89G9v4uVR4IR9vkBVmCOXDTY
G4H1k5iJj8Za8RAcEpVo5UII4v3sdqjdM5Wwz5aDWfVAsLTeTvWBi79/xJf4CvYo3hYNpBuYgDPq
92qzIbhbKqfH5F90JGhA3lCK25zA4QkdJm6V+fWznT60SEZHdmBgOpnx+PevqnXUldCv/qWEx3J4
RlCMrKcZg913meG/aQhoso6uAmghGsH0+DnEbnrkNyXp5Ke1V0byMcFa9sR8+01AhZbhuL57X90S
lfgTdTikZa2zuWhlYnjPT+bTx8mpSsiv436oBOkuOjKQuVU3vYPfZE4LyuOTS4///nnOdavCr8Zx
tvxighQFE4wNBPXb9++vqj9fkMKtCoFhS3YZBUZ0wu63p4f26vR9k5vhlWlr+yKSd0T+/sULUcjN
dnGMdv/f03Cit1bMWHbaQvKVEq5UyjGKUTV6qdfrwpNdRJGZhdkpszEXacs8wINNxErr37/ZNZQI
GHPqk7Jf9cDtFKfgdcUJUDd/wgTWiTaIQjb8eI34oQNpwHx7yM73an/WWjuuC/GSqZnib7yPv38Q
lzA9vdKbDYsg2oej7fkYs7ny+ROXFSTOjM48lCoMH2sISNFUxbm3KP182R5iBfSoEsG2r30c/bT+
+1csqPj70reUMUbauky0ejD9TdThRy7i8vUdHAf1HgR9cXpgRh+cEAzUiV9Le6HQce32gNgtXWBB
+8zefpMEOv6uALJdJGdjC6FQxWdvfMjeLfZjfuy87R6A24QSRicp7fl+HjIkHDPEJR6f/+ChYtip
OUgkp/79+25kKKAaBVrG94vROJcCkemopr1YKuaV7TzjVV+A+IwehEs0k/qNKKoU56g1HZ/pVqmM
aWH2GfYram9NywRcVcYCtq8OfGuuBrGnMzbtN5B27tdX50uabOaiXoe6GDaA1HnUF7ARg8GYXGRA
kExSsXRd9lY/f/8maJgU134sX6IjMbA/28wdjcih1py8qgEJ/fgFjZtaNKFKJUaw4BWX1CETqfg3
zWw26lxHBRmtzxr21jQhgaNw4rx0nHvE/TEjAy6Qa2kdEGOyr9898KBAgCN7KxoQQUF8EFRlbU+8
I2NFr02GVuJpBvqMz69aHmBgVRAMq8lsTUg9fBVbHAuV0ExtP0rDW7joVe9lZEIhlHxYxNoRICuZ
dJHqU9U4XXKoMjCrdo7E378tAmPqwIuRYpFdmcp2XfkmmFBOcN9d5prMyXXlUjXe7UKAAnZPJwtp
4mwMA2wQgGAlHU+fx2lZQK++EdqTWKcgSlwQ3x/5iqKgtTUq5yugQH77FPNLxAgc9IOe6bBSGypC
6vteWL5YfJoCta8oJ77qmFsnzt8/0zKr+xvgxOSrDV0pZBK6y1lBMrqCAkqUCcFUIc4zpvX5Kk4B
yHyE2KhCmqSvY3m7fVzemWv+XsDyVctt+wCbHxy2vcPVz22kqQPq7QRgihrEA3RIErWM3KUTpdOd
aC+nL8OVKItVtkfRyO9IcGM22yNVbu91wDpzra+L00k/y/08AzC4ldkGe613AWICANFMVBdz/HRD
p6H1rpky37JtWlTlbHOG9HOZhMxkR2hkfudUedu4B/yfrUKvQIK9MmDVY2qpVRsqzHzw56mfiV6z
1/ARyBD46yEX+4SDfIksR+6rZI6B4XXz2MK8v397BpcxRgkSv9U/yQi4Je2iFzm8Ba2Q+3RV8bfV
j3QF34RPujW5ontfM0QiJNATwZV0fqIHlX1AbrnwkgOSANouW9buW3eJ4L/qF2uYRxvk+g7aRwRk
ZiNv3SR0arOYGdLj8TsV5cdj5+3DK9SZtYC1LeRqB/7rzsf3fMbqmv1l3u2FKDWnSoCeVkMznmjq
oh5AW7G2dGeaaIgfeDEg/71eQZxUEawf4KtkDVtqc915b4f4sTLfsm0oCMcftOO1a8x2Y+k3NW1B
WKLmaeJvsZHcJorHH8g5Xdhu0aeZUJ7HGTS2LueyRNSioIz5+0cuao02YlAoQGvUYJ9WsHOQWL3B
hRLt68S1HR/nLHWUM92uz4LdL9r5ghI8zGdMbDEQoIogER6sjVfJXeriG9EXg8mZ890dPvacInJI
yAZZTgqmIh89/rox5L5FxuWOubTV9D4T4y2IPMsHbfOpUMy2M7rHy0iV6KFfeiaNj3yGJ4YTdQ8V
F9hAAAiRC1VqmG0ZbzeotUJfLF+f1GRwSXo7l9b+Xon7SHgaU7i2GOTrgBvji1tx6eJ3tgtV6yEp
OX1Nsw1dx3+MHDTMtjMTOP7oD6B4vlTzW2Q/Lr98A4VFMOmSj8BXUuwLmm9NV5SWCwG86T5oIQbP
3WyxWJ6licGcMlzKxqtKI0z8vOy7SaR6fZ8crgTy9wVo6Pwxrc0INqSmLbzh4d+/X2rpQy4QNBIC
9Dm++o5KAZ1gsO3YKTbu6eP+8NP1Y3z7mA7phmMQRnFSpBWaiWBjdGl79ohB14mMvFUoG+kSfGmy
flON6GRPKUmhYtSne93NUot82ArkRlCHdyIgQwcIha2Km+JAbNrDI1Cjqk2fAwtO0F6vh5Hwe31J
WErNlB06pJda30D7lNlbBbYQCsw8AkMM63OGOpdQtD2dp99TGmhfF6cSyev1uDKPL+Je+8uWqWv5
Ko7A4noeM1qT6D6eOZ/c0y8krtaECAJu2Gq4gSPTCf2b/9afmrLJLa0V9ZAkeC4axTnlLE3v3sK9
QnWPv5aP/VmbjrW8WLN1W7tPqabgYRPeN1iaDmbKljOFwlLA6f4eoyI4QlrPdlii6LYCZATw3OuA
2S3zjCTsQfVRtVR04XpI2VmwKhhv2XA8yRT2f8bCw9WFHxLqhsxXjjHoyrHvAtQf8GhI89uRQpU8
1d8/53q4Ry5uKfwxal4UBAY/ESCK7hqC0C8nfO/tQeAWGeFzoz2jjHImOoS24/ZCm28TnFHk3rQP
2HT8KtIgG/fjeBji9fh04ZbjUoJMI3nXABa4bXiJnJ7MaBPyUw0tTjEpmjtc3u6u2nUJVj6RzD4W
FiK2FtyvkgvtT3lYUo71D1myWhGQlW5PmvzNWdEt4TrTow+1GEa04jQ4EeWpw8JvRo4kXznOEna7
Od5JtWMAst9+SxlxgGWMrx9K074B+yiqxMFRWSGtuCo8TI4bIfvUwuqAdFOyWXjxtTxQXpGCjLFa
47ud+PWSmAWUv39LopocN40mNFwJyCFptbvi5C2K2MV8OK28tOXZ2X/ZpSRPR2HE+/jGbSbDrlVA
wMhfvG7i8ShTmvG6c3kZvjAzAibril9LngTqzdE1kZxLRDQBqdqUkJFsn8xQbu65+N0Uhz2l+huL
MYlKhzKMvttT1Ziqv4SvXq627Jo44QhyKU7Ck+2dMss1VDSAdmQmzI2R8ZVa2gGd49dS/lZmtY90
I82MOXmOzVz8CL0Nukf2nYXJYe4sawRxglZOZXpetTat0/PyewHNbl0C3OgHrRwS3zI6bllhT9GH
0h4Y+badFgAkQkr8tM/S/K6GbsH3k3Ko4K5FmQAt/tU+CDhIddIY1SctT4OyuK8AnxnD+CGoNNa1
oxN+RESJKFnbE4u+dsJhh6f2ujNiHPG85vtM5ryvYpEq/WJUMcxVU7+oVgy5Bn/EU+5IsO6eJ6iZ
5GrVyt7KxwTuZJtlw+Wc+C765SO+jNTw8QLGSyxYjTVVhM+9yVQh5HJriFPJinT0crTlrtuWDZ6Q
z3qIbe73bT6mNHAqNJkw3BHMq7bb2P/9y8/iZxEyZ76Y/rHvkNFHAxmzUvi28ahJH1kYou+SsV9F
3UT2mleznGM57rWl3qe6+T4jHIkPkGxU+a72ZWM+DWqCYGpXR3W9HWKu8sc4IESGILaS4ew0iogU
/pXOkDJIyOnR9olpDlA/qcoAMBPzM9VvISS+U8+fwWB/4hLqVTB+waV2xnppiO8pNuHXswpz+ZWd
uFtR8DuCl5+WbZXvKRJi7akXxD4NjKtwGjCVwn7vTfOTexS+p9poPk9qpFUfFJlgRMIXYvpkawA/
R/q8Ui9yN5N6tseweu/vOQv6T30sM1qQ0HhTicOw0nvSV3yL6EI/AJJIur5gyvebL2aK1lVsrwdW
Rs9ZvFKSfTTW39S06EqbuS+LBY/QpbM5i/nxRcWtpIb079/7M4E5S3hMva/7uU1YHZ5Pqunf09eT
tP1+mjQaqCeLcevRAY5iK4eEXUHjSpMzGd9G8U/6HeOQ/eXG3z8MgsQ2Dmmd+WL3jTFPq2nkQ2vp
TBUWg2+NvdH0i6hDwNkAnn6BSKyohadh2DCvVRqZBmbZaXT3rLxefquvxYiT9gHT8JRzqrF/jrWe
9zV6IWklvQoEZrF2RsI/HujdRXimpqnmYqZ9Dgv4kqW1Q0SWqB3nLH//ZOyTRg/Ei64kFlmIt5w0
Bl6zc/xrzxK8yVnIEpB4W4HCZLHocvc0kicWkmqkYDXeFGDQA6CBlST/6lvsx2u32PTNw/p29n4m
0q1kA+yvDsg7xibO0tbl58pJKisf0VCeIxvFD6ed7rYh7JdtuJf3QMHCd+Q9qWbfDwoW11RbY1j9
TIb9lRjlUJ5DF6moW2lbx9+BCAM/tXgSRmjphevTmW9CkFLeZUv+JgMb01die/ktI+ZqI1os/lE4
k0Iop+Q/BWUDYOqOkmoRP8XkTxulOSHkZcpwBSvVyjdv5avVMrT+XHPd/77o8hjce28o6+WbtZpD
Rz2f7uJg1x7CZrwaRxfShcnsE3Dc0JWXG5Lwcslv1M/oKtls0SYlliFIFKoSb+H7i/z+/ePql7Zp
FA7kAIkEuKzO5FiQ70M9TOe8veQ4kl2tAg4f8ts9O9lS9zdhUNsrs5iqCZJpcqn6TwrkAv77J0ap
es7fScU+6mjoBOu9eoCBviIybKeMAVpn8u87dgTM2tmYVSnSpinyBADOhoSV3Eu0VbOVX0+lv/mU
BVT6oTvJy1yQ2Nd8lHWwHagyuykk6A/mEGX+/ArRIMtI0adhKlJKpjeckcPiCftt55pdEaxGnqHv
ZJFXbAs/a6c5gmPaKA6HBAP52KimH+oPqL5EcsCI/R25TrvKpHhU0RxfJ7sSn8GnkDrSkZOauZxV
b/K9N4vvCc5wdH75JG6brPLLfEwjQvtZz76oAaatXuubPiz4/3iYykUS4K5CmevLb0sLsV+k249d
CvqPBgfiQp6uUeWWI5gdrewTZd/AE9pIPNs+k7XrRzVZnUFAjHrhK2OewNkVDeuzhOixI4AU3JgE
nDvP5T8OkaLkCz8bTyvD2Ntx5eNk68Fi9q1a6CF340QaZYmy/mxTKy3spoKO+Vc0l61OxrG11e8F
KYFHRowC//5R6SxLzDoGV83hgAa9a2jpwXld7pHhy4Msks99MoJ9VknXCl0a9smLjcug48it8WZH
MbQhgdjTBoz+/lkzeUiNrWWxIPWdFOAnS/b0gZivEi+N6D7cMLpbrCfxVVYGaUEKAwCo0B+EjVDf
q+F+0OFPd42Ky5uzNKwlA8c5D5wkFMmASaFI6mZOmkxgEgsYqCq9rFQStVttKPEXrdGcIdsuFi44
2SkRZYUwgO/ULdWRv346dxXn1Pe3fZXoLGUVdCB4ydFJXlZnicjutZpX1sk14j+Mn7ZgoP6gNTEA
9FLwoaOn74T3c0ckL86/FP1e+5mm606mY8sMFSg8pVTvSwH6wNT4Ztz1JHkYJg32bmYPEro0NOH6
2YKOhncsAWPpwEwjh6TL8t8/AF9wxfIseW7ZN11mwAZ+KSekzqKxqA6QQdvVbD+WNsEjgbbcI+xX
gkJ9/2ypGdOMOSI8FqhbbPnleU+azTr6PeELxoyk6z5MqGay8eAabZT2DDnZvhKOFrXfeeTkjRxm
0aCRfh+bU7mGn2ks7uWSRW5cdon//bu+vJLAkDq4HPIR2BGl4lfIo+pALIIgL5aL/fDDGq1yitJ6
EjbVPG9WEo/+x9HzOY5vkByrWCHbDH69HkjxKqjonm70RwvFFRlRn3I3mMb/Q7OStOmuYFE37TYb
oN+3Sg5Mras5hSEjJ8/bJYMSm3pZMrz01TdYIo3iu8dH9zTm2r2m7xiHm+Fi9rDT/E0Q8f6oVD1C
xdxcwgxyXDcWRb2xcawya9uSOXL6E/xo70ne7GzBT6irDmI5QUAuhlegvUZ+aBVkavY03qS9+JGy
2VnF81l6YaQysUvNadCAC0ZtSG9Gq48rAfyseLtXVxHg2VN5VpyiBOFyqMFOQQ3b4VRERFmFfPPD
R1HKUrDsj9HbJhh+lwf+wjGHXyTRAxqmKjNWpphQ/v3zvQpbM3wb6ByONZVnlQZ2co8LAQ+JYogN
SC6GOuWIg9W6j9Ce++WgkZS+1qReSD6CYzkdtNwWTjl+tdfpk75jhnmOQ/SWzcqHGK1choOT/Nuy
Ms7tTLdJFrINIfLIzZ9MBapvbi3Y1VHAgrMOrikK7niVNn//Eg28wxJcfmHcfxqEYzfeZgfhC0LG
DaAL+dumsXM4TaW3jGmia/z4J+4QpFe7Pq2HXL6+HGNDjsjTb4dYjOl3/rcEzXK0iqPXhSzP6NQI
sP0hAk6BbtODP7rhYS1drSxxs+/mfrg3ABcOegOcUebOafJos9W7t80LugiB8eotdC8ZBXFBdEfw
3Swqc8iU1CmyXCg1dCLBvJKGWnGq0w83jx6icq6f1qQ56bv3Cr18pr9/d53e5dwadd2Aqvg50FQB
Zn6Y1Mcj/TOayV7qD6jbI7K8aDh66NIAlhcZSrjFuTrUPhLhohq+RkQRvsmo+eq8kyNBYr2S6X4L
R7uwyrX6XpvNFZReJkY9Kk1rC8XuoefyqfxgxoSMwrh/bGqAR1Okts4uscR9PYsO3fq/jy72cAwg
agY9MJwrYgXaPN6pF+9NOuLb/VyXc/q076QcMuiGxJGdV/UtEXHojhGMRtrv4De1wc+iHkNUpXz0
pc7v+hNeoF6mirkEEn1gHGXAGAZXgBAOmi3kvJqdndJ+Sz01sWjduh2a9QMNsqj+3n4LMI/Ov9Ud
kbvlN3EJX/vd+dLOgXJohnYbGTCdFRLxQ5N7W73NK5oDs4p36D8hJ9dUEeyjFi214tHFS1wrGKRf
qk2qGBdp7CetJYLClGUEcbvB7TCyaCwwVqR8PmL+4KAvEkf6Mzv5Z+CMWmmVLFNNMgKTn71VkEDl
TVS96haTO3RkxJvQ+6JiMOQOPyDrQ0ZlQVbrHBj1gvXVkYJrE9Xf+QNG5fT6nfrYRrp+9r6+gr9/
6ZAT3V3lpaLAk+HW2cR8wMGAvw/QHjGU+o5ZwfK3bBrEWW4pLFMvBYDMrq59hhLSrGSNgGqVqgIw
+/v3uUYyYA2jgQqw7dCfyNa4wctbJ3fEFkiWbdE4TjPhzcY0pOsERSwWxcE+kCFzfDRZ/rp080AU
qRRv2rU6p59BdO9mG5zvRtw5Lvdti7N+vEDp+BcAU/h+Dws01kYWbp/+NDfy/c+VgZbv6I2Ze7gE
vGmAmoBXyaEn6ilBnCljZ01XQemt+kWmhQRDX7Xl6MlSKDGStUdOSTJlV6OYA1Hs+OG8BuCkHSSP
jv5N81rPn5ffot6xba8HhvZ7vfuwisgGQPT+4qVKc7+UjnDwXFh0/CSDAHyH+UrYNwagDFMil/Y8
RANuREEzbYicf//27nGh65Rg+PVp70ehfgRF1f7muxqaRXxBIrz6TTX3geZsQrHDA6zeVv2wTUpM
gfyuBYKJVWZwfif6719BcL0JH+p4+MBJaocHW9+I9AeTeA4cHSKYsj0PrDTeylMEsQWsRdcUP3rF
rONZTTUld/uFoK5z7N7JAlwtJUEJT6h2C3xULVxmnSISFSS6ooMcvDL1uNKqvmhoZ8DRoJNSArvz
U0xLTl7o6JxLGmnIOf2C/V1NbyfKqlBaBOqrUbAo0vRNz4j+CEjPAkN0V3cYAkcWOQJf/tGAhkLx
uLPByF1qfCfvtmbGL5Q3J7/35hU44B0rOWeB7FAdGzHkZd8U2txmBXSaTV7I6YbgvmJfxhI9jv/Z
HRKR0U+5SFYRiPJmQ62MgwP50H//wJqWuBShKx46YHNom34rLSjpY5eO6FCokMuG8pj0BeGIBoea
pEiwqTpdh2c9+q/LjBzkVCwuHXGP/vf5Ag4aZMi4BwsYoEY/O7fLkU6oDohsvnQ0JWhVdUfKvbyM
BGZeAighJMD0o4w0ZnYAne+XrZgLigf9/RNyOBlii37V6LZbiCN7sCED+vNkzjLOXPatp/mnbtw2
KReV0jELnse4ZnBxJED0nteovqrxc2hwxto3GaEgOiy4B4CDD8zjjAjc2cUJCIrFDcIFaH4d5mDo
Kr6Aw5RQTCAUABDLB6xYaxpISqD6T0vbKZ4b298/mikJ0bKwBSAcO/p2oN9EkzlI2kNDDPMstP3e
n/peJiIHqEt7HAFbGbFanfmVPrst8ZHLGdppWTT4kkPOUruoEYB1p9x8FqZ1MfHSBTReClqqHz2N
0S/0iQjYJCQiwU+FRalRoc9qihMYSh/QiTiPJs+art68AHNASMCGBPrBGyQrtIM1oGXX/cjQ61Q8
BE4wU7+YbNicwyPKBJw89JhAjqe+0v6jdsm1L0srow8Jv9oLwHxsfoQEMI1x1754pbVYIVGXwscw
/TEuasIVQC4k9AEiEV3cBcQ96zg18bShOqcZgilMx1Rqlp2IdzVp+DrsyWtWVtg1LXjpYmAkl6P9
s9chyiw0XLOyA+iftGpjRpLGQghYKsD0/kSB9aOvpxBEsP/zK+NNRh4w8pAMQpkIRHsFfBwA4qPL
9307x1eF3jHOEo8OBM+1jNoWpSSVyEhk80YBBA+xusAKrCrrBn/wuze7xktpIzQFy8wNBuQJD/po
niY+SWoQiSn4B6vGyzOoFHoZTZBFCnYSCDoTA0soCIMFPi0B+pMr3H69XnwwXC0pJBsE5UeptH5Z
Q9saGoURyAosgB9Q7vA2iVWVPl44EHi0lroPILmsAGilYGy1C1VNx4HD1+tZ8GiR0EDdNOiELxZV
FTBS/n6k1aMiV+yZQF31ZG1oKFjqYZdM7+kKUlu6CCwzXwYBSwsaGHB/gvV61sFSNMIINyiPbwKK
5k8OHDtfPPJd7zDOuxeJfhwS7bsxR01cwwa08Ih1RT0UF0boWb4VjjnSswHdf//j2l/lJGcqpuyN
etpSBIjoDYQE1UM3AK2/6Oo3DJu33fdR6eNYYAsC3+ptadACZuAhXkgwmfjJaKRuqL9/hjhVELYM
JJ8ccIfDbxo5aURw+kL4wjhBpYObBTCV7kI5N8lngONAWVAAH46W/hIP1Ay05md4LeLEm7PYBlwQ
yVbxCyOGhbyvYRMAirtVACBgfFA+/DRZFnqzKVkN5oLBdLTOYDEm0YJjD0CJTlBJ4DJsLvK6c34X
yAHKN4K8tPhD2w/utkL2o9sY0pAckcwqXLEFVunkq4bH8NPgnErRr36ZzAuAIQRkGXBUdfny9evO
EBI2yXMAeI48l+w2OYyVSwpQ6JPf95lbzpu04TIKDGi8JFOyStC7lAysh67b+k347BK41bO2fbfh
dRmM3Gj4PmmNEzBF/YhNW4u50m7ZL/PWhbthSXnICVa7tpveJDwNfhLiJoNOIGlHUbjSHgjPD1Ey
qbW+NPiKojVGPOaUn6qE/bQAyTXeA2mQFj3TETacfqM/zWPmHqTj7fQvdvsiTaUPEK6qNSF+p7e/
AnoQ6u0Q64h8ZPj0swfPhPitR+lnmAnl4c97LowEXo4nJKlI2+9kfMyewZ/qMbSbhqJ6x5uDKles
SqhQRHe4e3P99HjVsuSsdZdHkWbQ5D3Lx59kLZfXZlwTQ3EcXrb1eZm/PlLp5G7mwmGLvUCXtC6m
u4EuHlp8lP0l1dWFxybM+F71oxRJcQvfvC/CyN0u9Zo31D+cPYi4ySEHe+AyFDcngI/cjYXKww57
ryLxY8tjN3mG+U5WL7QNxfCZdJjX27npTfZdXVdVa0yLpnHkzmBc0icRhft7pn23hH9Tpyh3x9zc
aoCgeaDqcGltz3uTr8vMDhzxI5ld8c7LwxYM7ceoD2hf6h1aXGXjJp+3+nMiRTPbm2J6p++Ji4eI
vFhj6CGD080mnhQqWv3v3/B6jajWI0kfpkVrsMZrQ45B/DeCi3S8r2JW7VxP1GTGaBK9cpLdxa7t
U6t0L8kNWz1dtnsLr6Se079/y/mZMsTHPpNxPz2wnkQDPYr0WbKts/IOUVu/V2j7E/hLyTnqCu0w
TDb8HdvKLageFBeD+QTPdg7/JaPV7dHfVua19F4ll82VMVWp2sFOjKSuEW3bPHB0ck/QOgRoDcIq
+9GnSYek+QpW3uLLZvGL8K7gcJ7//v2aqF24Cyi9+rcpVw3vqDHWsBA+m95uBjwhYKpGCe/Idu0k
3BqZ8Yp8MJpO5uX8Fq6kAOHk3V5R7upLNWwa5J8kEk7aoNinddkQ16SIosfE4k+4BiyfTYH+2vUj
lDv+XjIgTotTlKvc7D8T/FKtoZgyNvXR2yG84LNQNPg/x240w8VFg8UEgHRjuZu2p/qlYWfjQlok
EduTw4XkqSTQv5PURfLHLc7rwzcW2+5H+HHy37/HqYnjKKP9lywCTotIG3AS2xJncxYVRHSelJAr
YWw5CQf+miC9NAwUjMw323hxZgN4wihHsamepHxftlS0q3n89pG1LgyNs1iySBR87daTAVuClLSd
H4v2+BFKm5VveyoFyLDr7emfgrGbd6vQvcfJgQf8XiU3szYIO+2dYezAQFdmWY9dNTN83Cu9gb6A
Pa/4VoGejNAJ0GvWw4TtcVIXxg6SGemZ2lkdnG30S+5Xe9W06MfX+vTJGunw9upQ+tb0dT+JThrP
rWHlCR3xUtdx9sFcKlPpI0fnNjA7ogcC2Z3lly6swXha4s0LVBR6ySsFE7FePwDMwVB0sli9MKXV
C62AjbGYcvaxMqMJGs8GSjieR2B/WZzes+sRB53EPqFZCEj7zoI883Dkpi0b/QKCT5Q172E3Vmzz
kJ7QiK2VUNjtdxYNJbPPkU1r8luX3vZ9rueIRklsZFqfQ/aMhkbenHUEsq7f/PLdahsZo0zqtsa4
LMcZL28zU6FH2bc/Rp2n+3U9RFx7eJZRW/57BT22Rh+WHM6YpbuQfZXcCrW3VduKX+yKNe9wSIBO
5dC9Jy0J2h1KW6GIcGPw0m/xSilXDpu90KNGS+1zfjyl9SqR1Nxkfe6XyV3muqM3rKF+uD+dSBGo
NwXibyIy89eShZaLqdPGTQXXO2AmdMwllho3Jd8jjynlxLAaMkI2uGvkcPz3r5UpDZQukifbpSy3
EBlk6rqylNBVNPfO10x3+yq2Yha/iFKi+hFp10/8omj+jZpkzDoseLSlwff4fhkJnuYKcZqUiYhb
KBkqsgsKW8nkRDEECWDPNREKLazoRfwcUKGJ8NaPGfHO73pg0Ps1MSEFWtTltYj57yx8lGm/yfb8
EBwYiZd4hA84qdbiedWzXnCneaWcT2jnMMHgnhUNI9AbAsp2LTedlgq441vYgPc839+pNwFbaMWh
jxdNyVhx166sjdNMRzccOpRnu5tFFdCtPKmGMHp4+qZ2pIz3Amavm52ru0M3zHSUvD/Pq5Zyn4tG
5bsXZTebKEhqTyOXFfjcSSVfw0PC3l0fbTZC4UKmcftdRhoh25rT5EFX7REyjyHpKBCskfByiMHp
gA06WpbizhAgRYe7TgvABA5z5ErJqAwqUEmahdreYkwKV2iHl1gqpN1Jm+6SSxb2GQSroG+mL4cc
mut9OH9RCGigpcgdOgVWgku0F/WYvjLIp1e+bM6dWEGGBj8U4WlOhoLiur4VZEmf+6xVMgfkTXLf
Oc24bxd5GlDkRD5hCqDr6zdienO17N/GwZt++8rd3THil82POLL+jhgI0tdULu5hG7st28MQ2pyf
wfPvagbbGcDcqELcI8t3oaaagbt4gKG9ZZOplgjUtT/oe/ro68otuVnMVztqr/Jo9Ccl660moaYZ
V7dv/X/cK5oEGrZsKjomoZWdnS8DLEn99jkUVy8dY+BMqkhVxL8/QTU+M2mrwjBB6ja5KZUv9Mz5
ADWoXmO+nmWJyigLOLYo0JYEq+xy/ymk0CDb0iRLbypF6NKyM7op2cRo/K4e3NCoNMWL/w2/u+zQ
431Jj01hv+78mIC4b54Q+HoJJYUWuKeaDEthVW7h7HKwE2rKhy9I11j79tCS1U5TFszi1sbF9jDJ
0BeZLQoi6G92ZrVQvho21whq0ssjvCYVdXY8YT1FNWeGGXj1KPhk4xqo0OAe6YtKBz8Xn95Gc3xC
8gQSWOZFP3SC5fVTM4c+CseqtZVAzrWE46Y1eJTITPIis5a3Rjr4d7sbuxEivxXf2I6kEk7JpEWx
28ddkzvdhlgGEyn7L2d1W/SxvNkPXPI2ho1qxWbCvxAFK7wc8J/juyRj14gdXyAfT238/TyYw3DH
Ds6Cxcfbl2hW/JcE3n9PTWRu7eSKOHhMXZQmIRO6kl5e5pLsnfRi/WT7190aCqpZY0iPZPdUFNPq
/z5ogmOp8h3XggllTrQFf4mrH3TXJxL6W9h9uV7GUZ3ubknKINnEmQCkMDSsvg3et+uhLgOTdytz
gFHJmizb+mlMq0JG7DBPVY3fKmSlctbkMquCWJqMm9OZEO751zfyglr2tbP9LPPmDlK83M8hwF5q
7JuyCCkpaqppRRLuC4Kp2kC64qshO7UKWVYw3fqjo0FX0/qwj1Yi7T4xpSnWoDCy6r4sL3m6rUec
oNDTT/vbC/6aOy3d2XUqnZL0I8v/VqtPofkJSlgmvxvNJlIwUb33IzZMqFlcnBxW54wP8YiyiUgg
tlFgDwwKbDkWBnsKSEVLOvz6YLiwfl9FaqWCvO6215Z4eNVQ0eLv7F9pdHtEBRsfMfnAzS6PtDjt
uNaV/g/5lC4mwi8a+tl+vvAHVfyJlrngkP89m5cOSOfGmml80sjXc0kOh8hhaX9Zw7XAmMxHvTeZ
c9lko6rrq+IUu3l4sqTIR75rPKcBnCs0sXb8OqCCl3dKeLogNvNidvMj0jI5Tttl24BkC2N8USyp
9jMSVzjAKGJa774A28/dRu2ubI5y4Y1C+YMImC9xKZaf9l6tvq5uK6rPG86b4aE+fFXA8dye+JCJ
hmVNYbJQ7qPa/NZTQWrIYTjB3qCN+e+ZqLjwyW+lvA5oCnzLcYN6iUHhb9tv0GufSBvlLA3BWoHT
+FH5TtVOTNjcUoClSXdlQXwayoEGs08L8QXl1fjA6jf/vR3ie2GbGiZ2//DudzRh3YVOKMJ4sb9j
o+dX5a0P03xUsjJDFZ0t2U6xffwyesAOhmw+EFKzqEm8kHW/3WvPvP+BnyktPO9xw9c410z4VCc/
ySdvt9wTOch4/M43pofJ9sKlnpJ3bEpyxNPmnEqAZKYDzvNTaP39487VMnDO1VFh3J/z8PMhlz+l
dDFjwoFM1EyqIX/NeV9/fbIHIXtllaf+NkOvNcLK3R+GSPPUrmoTvIQPywinIVHhpDgfvonGVd2v
OYS/18pasZTZiqqE+TeFlxcXXL56fmpdfgZ+FMnioFrLDPkkxtVEQFp8uffh8qdaytQvjcLAs3dy
rm0XILYqnesMDjbV8GkEPqfKpSRYTOusqOXAbOLAD5M0jJuiOfJ6IkcU/Jd2LW/dk3fOFj1/9l/f
fTynvAYs+AJzrH3gl++lkEySK0F3EnSjaJpX4uRGrrDv/DtkfNwUW+AdOBnD56tIk+qTQW2jgQaq
Dd2s5PPLliWALigg9BonnBguW38YYb2ZBDkMiycdhZacmzUqxGEMwWzWoqZ6GgL7+3duT9mwTuwX
0D1ADbtPWZgTy/RmANzIcfxLNkMqPzZexsRboWVN8ItA4YCR+NbhKxw2bxyJvqBIgO9qtMCKPMz2
1JvWkAkjeECMNy8teAfq8faw3NE1VE/s8ErP4PtO4XxSHtYALeWcwtrS3+kISe2sF5R8mVxk8skl
ikJLFP+rsw6k+UHe8yYtyQvku11COtIXDThAu0F6KIhzqL1Ath3T3Hs5S5pYvjoVasWsrV8ajN68
HbbFNLeXrGV4znIz1K3f14whJLeHDFGOBXfrWXqTIg6iSgcFSgwryGHyFjaoq5AXIkJnBTw7/z2Z
gKjU4SbXoWWUk6W2PREPZZnrlH6GZqW8cpWwowOqXAppa//O+y5qGnsPtEgmz/Bcl/l2w1zy7E9+
Tzq0JIyWPwcFu1fMWpR82Baf1sJaDyu/aII7SLDKsC/tCh01p/7nQoTq0KQKT2sMcvYD9S5iW0G8
+Q1//wiFRrFzwIn2OHg8rCayLqtq47p6HUDyzioOOsAt0LGx9PHSW9yqOdDW/UkXjR2yoYMHXVbl
hk4NV71Uw0ug02c7kci5iEUI4O8OSII1AAERXhMBwWEB0O2DQ5Z4mm14OEV7iS7QTput+t33M3lj
v6o5SQ28fpq9nMvfE+J8yhO7EBpuK1guSLxvMbOdTLrYPHxFdpkCTOSi+GQsIeRRMA3Wd4et52mx
+s62vyWnlS+H7J7giQeJXEv6puvMUsnsK4TpsgJdzhGmbfVMoW/K8BR4nFGzJo3zJEFpXyE2Ig9G
EUbfAXGqJDU+L3F1/E5ticwL4IDQYxJO4KXMaaVqdYVj8H+vzSy8sDT05yDCUMrh01MiE5L+YJgf
PMknYqib+eaJ7n59gVn1H6EPGg8bdegUsm6fv51NW2g5KTFbx+uXPUnJoI3NjsaESb2jMBXllmXs
7RIQdUIyre34s+AiSl59awKoyGMyzJA7XU8uSXn+qjIEX2t4W2SJXv1YA3+f3UkazeR6l3kxr+8M
XYArEvBhCGNeq5kZ3J1eX3gbohULa/vQAsRJFCnbRCazutlwKbtKcDz+dniGYyjpebhjVMqEizRo
gbQpmnoqsHwFTCGYGEH6Ea+Sj1FYJ/mhFC6hvZwvjk0lFjN8eA9BO0U+kWo3dhjTPy/uWgGvgSZX
E+D2EUUEjRAoNKXdngxK89X27V5hYctrMi1jlyIsHyIYE8FyMxmFBlkMADSlpkjqpKUfBmitSY9U
bdn4R+BfM4c6C1vNnKj7ZLB9/nn+/vHhXsojwpnzN3fwUFHnkjt95/a0QDpU0sdSeANlBtqenIbr
h4BW18TGQMBc8BlJe7yw3xkA22nAo/D3j+rP+nLXaiH6gKzb0k3Yn+pUQ31nEIe2oP61eTtI5fRk
GJua8ZaLPqVpizURNQZc6oEKbSczwoz9Cf7+FbYMRg2+2KSqZau2F3dYNsstfQoLDn+fLShTg89V
7VMw2GYvImj3Op29vp+xlqR98iHeY2dIpaRHX377jPr3rTlL9FxUuxuMKjXjG3YcX2Qs3TlfpzLP
9cvvPZuSKxNiepoSsa1+G5o7WfAu/wIencVfM3KvvqX6aJQBb+i8yMzPwoTp7zUM29o7Wufm6ept
+ZazFDtX+pIEncg1afu0jlxEb6YTJH1wnRT7xAxhY+Xfv3UOR7Ieo2VSIvf8yNQbelRRKMIruHJ6
5cJ7jnlO6ZYE6XKHibc5m/Co65cmNIxoWsP9p8Egw9/zyLwdwhvg76VB0Um/86GXUgxzbSgnxYaL
L04pOhF1yoWUhVLc2YcrnGDwn/h0PPJoe28t4k8DcMZLrVH9+unVZrX3a628Xclopslmzn4U/EQe
HehRc3KsLTy/WcTx0iH4X5UA0QIGE5xcImiFS2iGVYqeMzgRhPnq2wS28BOoUgfyGnCS1HcoAT7/
AF9qqASKAYo9rrieyQzoxV7U1HKY7ikMr8mrRdpeOkQrbkUrK8wMemeh3puoDiUruGVgoKsFyC5S
JUxQwx1aPr7oWAzRcYwGgX6GCqYKcqqJZymI3SbRrQhJ7+3ci6BpWLC2v38VgHDVzJjB4zzTIz0w
TUIaMXzwSj3rNyJb6QwqVP4mbwpP9nX0fdMMM1nGihF7BOVX7Nh0aCgrzNJLNaql46NQeMW0GTbc
X/iM0HHuJWVvLExSmdjV0xxDD1Xg7DTPqaWfPZBkUvkXHLrFy5NU85efAbu2RL95QY9qRR3iyXgk
AJbST7fRhjFnpzgWZOFuL7ogz24E3u7X/W49zH5/NE/dLR8ufk7PGeWaSNCZFw/437NSjOu4QP3i
qd66DofTOdsN6553iofYfbSNvw+qTOG5kUJB/NaWvYCqL49gaXLYnCJdVwd77tIhdZb9ramBmAeZ
tFMg7BmSuOVE/lKtij+Hk6fL5NK62T2xD90uKqSCKzvo8tPvX6W5dGBveuG66KVbRpDf/xE+S2Y1
oITFCnIEg8nKC2BGbs5hQFuyEhNJ9imdI9XRqxGhS4hX2mCRrd7AFoDRgmdnOUI6FcPMvMPeLHM1
pm65aCcW+09saRVfbijMTBvZhbTQDo9UZkTERmrN3Nbv2S2H9hkyshCZ5orAfwhHrcG1DlejdO+c
msOmfS450gYXFLyPFPwGtqNzzErlOsODsl1H3MXcZYQkzeL4Q4sSPxUOgjAsn/H43Zz8hO4JNTt8
4++fhqi67JdvkX9Dd0BkQsZDRRPOQlGRBYaztD72ApoDOrGaaHD1Yj/AMZC+DYEAVvVMksx8Uo1m
JP33lA7Wt8hHeJTcFqGxo/KtfDtjWolcEWBYS1EDuEy3MZSrTwdNkzc0z+fqzgsXw/QND87QST9b
h72Z+jH//i0TOo9mMJmU8NbKk92RoPY3wH7ZSoaAAHJ75QULWKGn80ULutvWbxi8yeI0QClwR5Ry
lherOWP+1S+/9dDucFIsGUnvy8Ueolp7hUlMx58NTkJ6Nq+yyT4OBu8e4oy1qGBN+lTf7+QUvPQx
sGSQjG/GZXM7vWn3swfym0GV7iw45f8j6j2WXFW6aN3+ithPQgPvmgKE98L3sMKD8PD0N+u/58RZ
ERUrVJIQZM45xjcoSC2u1OM9aaVLuE/jHATkldzS6dYF/enxlvpcYzZAWKGjmtoUpyYC3e2zZyhw
4kf5f1cmyK2C4IZT/M5ev9nb8LDL40xHPG+/EYQsy9xtpvW2FFzM/W5w4ONC9jVrXziUK6MSFLSD
jQVBkmhAkZ6dA4qWEi3tujOED4XuxddAri05rCH+1qKkIjgJV0NgUaMqdymeQG3uzat1/J13xwXj
VQfKDesnBwPutQdYaI5y/3pU8iXhiOYI2phgmUcx6WcNZTVY4sh44cEvLu0QclBxWhBNoQsPI/dT
m1AdqgJTtqcAnnXxrX5Fi6V+tmlUO3Zz0xTYgbhj6jxn1pdwWJBAhbcWEr8T5gzvc37Y9PuxFF+4
8HxgUOHzg3rEh36gelH2KSkLI3i3knmKvkMeq0Fw38MPs5Q84Wq87WmXqfIiH/Aaj2no1etm/50/
N92+491aREZeh/QoKRlUbzm/1A3fBP+nz+a7ZD+6KTJBr0F2WKloWYp6Yvn94235p9V+lFer9g6j
w+SoZrdpDkrAMuSNYfgjPeALjtJxCYdjEPJmxhhC8uPz+zCWDRcsuVwqsz98a6ChpUdlMbsrS92f
5/WuZcz7er6UDwqZZzC6ZSsH/BRRAOqLESO2WBpLpQ6D9Fa/E1UIDmrRpy2R5H270STixN6BoJdB
pZEVDt9Yedy8e+kSPdZB4SY5SWD//cN7lXTE7emSImI1eR64z+iRPL5+lHdS2D/qxH4pZfVIDAq7
4jVJ5S9qWTdnYDramw+pXrJAZ4+yLoGS8zCNyhVb7fB73tsrbXpI1geISP1XdFtygaEtU5Vy7xcL
fI3ODlVlnz/yz0qqnoy8PT/ppGHy32FJChi3FzzjZlni8EuggpNkS5gwZK0a7gxGxnOvsvHVnEX/
5VSCxQvou7Att1pWD0oXdS73WUz3/jYPvP+PyZPr+W0m2eygWgfaFtGNuT2BtvqRuBjU8PZkobtP
HC5w298I/hmdq0BFSknS5qN+IsjOpDQvPQWb1P/+uW8SVzU5XIYPUT6eOq+lyju8GFEE74/CBRDT
x1NtVZmD2HndjlJJO3O1/gqg9rD7HkB2K3q7wid3AsSlLx0i+kADBhZ9l0vSXhg54H42OcPHIPU8
LPe+MtFA7X8DQjZV7GT4+OUifvDCayre2L7N78B9MzKY03WK3Z+lNJhLFJ8kX/olDkIOjEYdqh/y
sP0w4h+jerOq3gGIrPW2C8gneI4H13zlQ+xEwrYII8tCD3JW2prjWOI122VByLLuwPZpA7egcTnL
IJkiI6N32ArxIMRMm6iGvbbt33sa1s1re77X3SKUni+8iAcOyHBS8s7RsMWUJpDYQx936got1aFP
dw319cjS5ivknzuny5bzZ2Eo0yzzF1ZuAD2hoGMUzNbLWehKkGWMU8WItOT9M0O2hjSWVbdANlAm
3NwDjGmaZeC5Eo96Iz+h4jbymlZI7Td4GJ1Zf7fxHfFPQyjyXfzdDbH3v7snXaQhw10Wb1T00r4r
jLf88kMrJbB9ygY+R6i6C6yVt6wpn5lrEJEfKu9EJsRPuNAsgtdtM4I5tTwU9w1aHzdr7PdygzcT
YXUcBPGDPeTtWxr6iAdrDEcY+3szPXwyNloyFTORBc22aNvjB2YHIS0vwn//2LUcMTviKPu8MXli
r5bKE28+IZ7hlhfcwFPRoo6N4rl/4XQxH7sdWCjFEqyfMfFMVcF4+PRDXbbAgHFbL4pCqJS76QNf
24EmtmwkWlYmyEJa111xNFgnBuhkYzrTcQHdtm9KXBB+vqUWycYekcMQr0z29QDPOuJRwK9yk6eI
zdArVyO6JvafNxW8wIi9TNbbsq6wNahllIgQvR8z8nETOPulzMZ7dN0jJE6vnUY3oLP4s6IPbOOC
xRBQavietIE2sEUDr4NQG6f9qjpcFoNlPIKrzWMBf+I0UhXHxaIweBr80mUhVsYzpgKprWL/z7tK
GAOvvI62/snHG4txCeE818IUaRkPBJU4/RsaaW2EIfwedpfSKssUUAFgjkWyhXhV0H//lBllLN1G
csHU+IeBJ0EoMZ/Gk3b53IyW3+6nGLWJoscsvIZ3giM8HT/uRrDSFBtH3+iGGJLLNls00Ddv+i4z
UY9+drNari7pdRbvGU83gfQsi9JipHw6J4ws1RNrdeBfpHgUk3Oj1Ci4ovadbiJlfDd9uBW4c5xZ
7i+rfLbQE5L3jCmO1+/34lWc6t9kqhrvaJwGrRsffbvkcjI0+ybjawkoSzCsnHhbWoiGw7ZB/AG4
NwtrYX4PzFZNh/A4v32UVq1Ml7Kmg+utLdfcm2J8NKip88hFSKWYl2YY/D7ohYqfFK0V1oq/2+oP
Eej6WtYRoGTfeLkKm6HYZNCkBF4M+ENYICo0OxbXXEy/QI9pUwPMr9H65kk/erL+qFZWFy120dtP
0kr/79/ZY/ulPIJH5CmSyHG37wup0eJacrsttIvJFLn7sfaiT93Bni1+xpUi5GPoDMUiE4N2tQxk
MCDCakG9kT3vSR/sx5M8QkKRQj1tg61LWTbiTrKdwd/odKd+7VfytdtLRdEClUfw6xktmYzO1oRZ
ddp/ER2x1H//7MywpWqWzR0ur704Rq2CXVuAGSnqITq6nO7SdfqmaHgEKI0C3OW8kXr5dAwsJ6nH
n4or0P2hHC0HpDpVgV+XRztvx61x72E5veYRTS/5oFay2w3bZJWs3OTsby20K+domCPSPoUBsj6+
wu+VPEQiaG5Qv4C4YlhkjMsP8zncutzvjkjgzmSdEVOihkObzdgG8QqYJ0X+3BsM7q7a27CmKxb+
fqfIAc4FfLF0xaJKIANOm1gt9SBhRqTZPoS751iKnp1HRX+jvncjBSxjfpRNv9KIa3Tnig8pfZPJ
Hd5omNZ+9DvDJtxAD4N9W/Zi/OhkHCVcERmpeHaG/PCi90GFVbtD4+TVq+FcoScpXod+nxDw3vQu
BhMI3PvTvl7yM3g/TA87Jv7vn5liaZOrhi9prVKan6xMvHj5y4f120Lu6Ja80VJ4vZN2MIURknbr
HHScOX3YY2UDklyvnkE5OsCXvzNmYeQhkze/52xE1YIdvDedl9gZ/9q2y5yaIPnzY3qfVr1kHnyW
VOh5Hwd9fRjNpS/TpiiWZrs+2tiAkdaXFNpfVIoECsr4128MRUTU0Jz8aLuDEOUSu1iIZg2mMZM+
R5YLN2+8Ct6eh+PYjxje7UAe2TuPpb8rJPe0V9PYP4SmzEds1IoFSUtcPd2w+vUt/GhGw/SJo5V8
mQna77yaSCtOMIEVf+8xZ/SHfTmZZRF2AubUCkzvEUfPGBEKXZF88nDTxeZWhZYPfFQF/FqvTn5Y
xqOqzKZZVG5Z43sxcKhT55V9y4fmhmtkK18+gcuwMnyiopPDRqpsBWxX1+bO0kn8lNdr+6X9GPuL
o7zCEer8XXExwAqb2kdaj20dEYbkYIsmXkRwyBOAVMWutjl39X2XUxj904nZFauvS/QKhTIWteAm
PAmS4oN+6lfrdV4TdvX4UvP0sqCPsvLz+LWQEMsVo/7v32u+UeOE+lNRTaYWBBO0nUQP32NBambm
V60KX+9OmExVjyM+EetsybWMbs7w3mm+kpFO9hPlJ0Ksc//3784TzmOtfoovL5hAzFpf4hxx/IFa
nhUF9PtZflWjjJl1dEIdX88oIQEctlRYyqJz0Rf8q2m4c/IjI/7uxQbJxTbpaJfDkkiquq8Fk7ZL
1WkcNpmSr0rxmsweMX4kSOYgzLH2R0dqz+MJELNuJTuV1Cvm7bww/vvX00bYkVNwssLo9MzdNZ8t
OAiskxIGs53xpb8b8rE/uvQBKBYgdq6173drAOY/ktYMw5x6I1gYPdsXUHR6G+Wh8xyoWpAGg5is
W7Vov9fOZa2U2wT5UvhgE6zIJ5i4Sj/9UCzv3q+zYE7vaoDe6do7qDnGH2r97x8cRuqafTyjzQpO
lt+rqVJ3pfE7jx17CXufS8TSlBa+4tYPbYgNrz7yJCPDUdiKlSqasJiMixwAULaAzuqOeHCZvDHD
z0xFMQnzfbV91VFOE2O8YnpzW4C9fXskMwFSoWI/tLCq9MbdsCAfZVkLJahepvLk8e8KyQPOwZHC
cVpoJu2SNQoSoTwcl7upG4tj21tGYFknrHSbL4wdc7sSMQZiLT8KLE+b90Cqnu7lVijIgBsftlyY
QdLxkKkXkjbvwRcOx5sxg7llPfyVSbDNPOcH7ke8EG0UJCTq4zJQwkeJ+obpRxhbnIes9e9u1sBI
Dl3Me+iyffsH9gCNArgtIezSyZ00aQBHsj1BbhkZSA2k2Bxk+CNAV7X8TqUiGemNVmZLlNgCOGS6
622ShTvzJ/r5pjekxxTFV3iO0V2/E3YXtH3+vr9eujSz3JDqMZNSveNfbSHs8PazmXxx/sjAQ2YB
UvVPQv2dmetAJR4Wku8DxO6eFT6QoqjJ8m4/cMPicT6aym/MqfRFI1n0gqhXYc82g38wtHCurmAD
Cf3vXwNsVC0vu62FIAC85OJILk84iSs/mw0pELOwQkee9v294ZGw03eburTD0GmYAViHbOre2gmZ
O6qyeaAhpcTNJTxQTId+TWgTjomIj0ojvZZ7IVW+MRWahMfPG/3THAwaX6K1LJ5KZEeXW0oRj6YH
C6oTSyrA5I0Etq8TDHW0Cj1jv6JkY/0T7Av0xzHdKhQQyYEIRJDii8V7GGTdAnmjG0TkQPDg47qg
3UDOwkZ3kBcQZhxjDJcJhBwkF4Gmx0R/vQZqhGgWVbQLXjZ7/d0L4+UGy1lZkMKs2gtfLxufPsFb
xbD7gnO+d1kwbq3wyzP7c+IJ5NOlRGENKV83Zi5FKke7gCjjUmNlbva8cWCjiOBr4ZLK/cUVb0Fr
qSWWL8TYOCvLEOhTL8K3m37fa/+ao/S0z4WXkFI9W63GzoSSA4cOdZg+NISmGUJWjO7SzLEyIXkw
uAD+IVhOQAAYqmkCpOq9Zs4aQWLaxGCoUgyW3qHeG/KvJSr3BxekKeD7Bv8672tXbnEj51AH96uf
e0zacuB4F5VF3brTPg7m9Dyf7qSOZTLPJaPx41s2afd+1fuCGNBEFyzUXAMFdWxImPgP51p0EEDI
TaO+ogdQHG64NjUx0rj9kP/9w344vuz+vdkW8tHx22stj+go4ZlgnJIsqAna3T4EALwygm9Oxkut
42UczcN8594aKOq37u6zaHUMUHKoA03rPfMe9eQqO4eLKPDtzzD5E9oJyi2oGqgvTM0IXGnhUzlv
jfr8ZMyLTp+dnFzgv7aMjwE0IDD6dw1tzBbG8p3gsT9/gM1eGCSNHyKqt9Z5YZayZsYUrrJdfu8N
OBMLUcLWnkZ+BWKnj3SGsrrSNZn85QBxlQUFz7tpfseGKciDh1y1BKlxH1wbW359x6LLg85bHdCQ
Tt3ScBL9fJzRs1dWEX2XH/hU/BgUnRwgkLNMUfC4dvq93KtLsoRVbPy4Oeg7QbACUpcp68zUV1wa
wz+nhY+XZn+r2/q1oJJHcSa/gk2VoVzbun7L//17L6yqgUNXr6x8n8vBxwGuwXzpg1dowiVQGGtp
mmCP9cI0k8enBIyWPjMdfO4fzV5/RZ2dG3otL0X7799zhSLMrR5/YHk7fEdhtvuX/cCwBHJ37L2P
1ioYxT/xn3sBb6aP/uEpMkIINzA7Y6e/QAg3GMA+KQJGckzY4y12ru38RbS5qpj0//9YzhfGZAHm
/p/HVlGwLqwq9I1NR862YP8By+22ocWnzjwt8Xc/ILvgL5iImbM5ZyCB/dF7J41JgPkRrYQ5DW9d
EaaU/Dxa24J+aJry/VCt9fEaNMaS4Q3Ly6MWKgx3/P/+ualkVWuezZkYzfRPegz7RRZIO+DFQdhG
lNQkRS1w48nozMBMqVZv9uPZWdGw/RrJ9UpauFv1lUaTIO2eCUudSZkSqgH/LSmDHfCFTfZqk0hH
sOIilBa7tkyANdDrqNZ0pKQoQ9qfvRIWaw6QXWALuq+ZRP7lehyCp6r4wTBcdf3N4EuFY2KN/27F
9iY1GMIKf96MLUxb+Ow3WxkGVX0gPUqUyA3o1f5iOHRbXjHQLfPfv4z5qh5LeufOzERVdIgEfQR5
tvkKfnxGqTJTHjuahTFYWZRS4PyMGdmiqs+konb5zYqIxtER/Rmq999ZAogD2cNY4figGpuIgOzd
v5aCdBxjJhankbX6+6nCTlKPFJWoxHJIYNMEDn4oNmevL5a8yfJg8O1v3Ty9EeJxOrCsIMiyVO5G
4jJHOgINohf8a9/IXYaqvEHJQhBFJDc6AYVoZfv6OZN0+HSf9vGIGC9ooL1q763Nm3jhDkctIWgf
+nnMCLggX9B02j4JmzskU2wVdJbRA5UoRxRzpOmPY5bryG0pSQzsKmOR92P/ztV0pNsuEUX0Roa4
q/2htEqO3wI/EqRJVuGveAUKhwezusyhQdR4ADlcwLzETwb4NYMfFgTdLN91af1buYJQYKcSy2RS
R2GMGwlvngn/CoNSO9bzvk9sVe24UG1hmW+Qw+MjyPx+39gVSz5bqr808fe714f/W3clkEITN7s9
pJ1Fv28U0dsOeLWc3nUT/L7L/XeGEXqEfXJOdZdubl2tOruJW4i84nmnm0QvI3FB3GIDDYlTYvyQ
0CBM1EqZh9eKWPS64Y09Cjwl/MqbZyr0zJR2ITPzpbWDjS8nauqn6fCeGcV2NH8n+RaHNI3++6cF
L0/02BcJR5zpPj4GJlymqhNJoMq4Q+bAtiRcx4C5SdVUJKSXfkIN48yofTPrNWBup/+uRUE408/+
+6e4sE5d/bgwTHlmqaqn4RdkIyEHzkAPVpYvSwsX6IT1ZW8RZPN8RHErBFLnrVUt/Ltb8KtYvswq
WRhQcnjZNelczt9z1oPhIaT+9j9nTdSnaYOPoPINyekB5jG/o3yH3tDqvatLGv/Y7ttqzHC8r4hN
ddeg3//9y90NsWhc7Z/eXvk1ntyqFgyjSC1pfCrqLUOBLnyh/sM+1ZPvPBG1cl3FNOn0HxiJIVAc
ExRuHo/TLag3p7E8JlcPAp2qdQgPBR2v+Yuv5l4N+xblrGWDf7I60stpwQdACjg08Cw/N8jO7C8J
6VA4LtxBvEAS79bpGxDa/TO3wafc1ypDlsT+IHiJDBmSZLtjO+rBRIxgAM/i3MEccntXJ+Q40Mh4
Acxr+/E6DqZ1AHFxaKy7Mt1E+mO4sEiZ4PPNvdSvm8SRD6l9NvChz49CcXcv46/nfKcEapyHA/Fj
5CsEM15OJlK08c5B+ljeV2i0T/WaYFmtrNk6Xs/oS/e7Kxxr0j/v5GPlZFd+C1snfxtrbnCKJZe+
0j3xlPHdETKGHVaQGBAO+K3FR2Ncd+FI8np/ZO5Hdu/igxW5T/bEbj9JUr+jWzrDPK6UeLyH969e
5DbiP5/drysguYYNx4a8vsHWJF34uYLGM7Xkf+lU7U//PODNuKzLUE3VmDUQMwQrKcUxJZo2UfYs
VmY5UVo8Vr5PQgx+3/yMtZm/4Eibztmbw5ma9sX0ufQ111t0Pp3xGUSH75hmlcwrGyp5D5Ahp3fy
sbBy3PYRclrNRV/Q91DcXoG+le6COW2Y22LJzgRFDK/MiqzktiQzqKAa1bcZIbceHbYNMbYNFbYR
TZsoXhs8TRo8fpoxthvqZXCDf2qKyYEj9U42czxz1yHBicGmr5EDgvnoh2EoCmu8mcqw31R13Xfn
FF1z0y7LrcurCIewLHID7FeibkNCFc3fVa+VIUkYr7917TmRxTDF0fDs8hKSDm/6TgGfnXN7dAYq
DRzh0eLgZXkIk58eZ3nXzdXds0k1gybSAhSJF5x3r1DfggPPTNfLQdKv8rGdTus2Rwifd1grRd+m
Css777BVeMHtOG66X18kUZ+ARtWXmxpfxZScFPSp8Foduw8N+yv97QPKkQ4/mXcpTXppTTk3T/wX
pKvnBiGfExl5kL5Kxbf1yr0cjP8qnuB0nDhp3xMBvfCKwaZVs44l6XxzQqy9asN8ORJ4kwD2OwCA
67zN78RL364rgi/HoJzq8ZOEemjF+Q2JkbFyfUvub3UvVh4puclQKCe/zvfA8whkQwPqYyox9fP0
hfP6pa83TVkWJ5tw9aQ8pYwH9pmqS1DVuvmm53R+Hvjjgezcwl7WGyQ1TN43T3nZw53c1u8ct7vr
V1k+foxqMd4uLnSv7YMFFEXXIsD5wvTiQMD2nj2wShf5wvtbc/7SQ8R0WOoXHH2zpMlTocXDxcBw
6VtV+ajBx98pzcuejNJVyElqENG5vEV9OR0y5C33hZEQ/gT9eYLOWozNStf7W3c1LLsbKL1x+UYJ
rGIO8fE/pKgpawtkbE+WOhhvircwUjQnw9M4kjl8/36Y+EW9fbYjDDBu/FaxaxbRxZeOC24pKAc6
U37uHdh+oovwnw32GoCG1ADLJ26SBUothAQPMPRy5+c3SV3oNTjqJAj137/X+cIOyuPLQMieCdJa
rFGgF0zKpPuNJktmGtK0QSUwRzcvvQ23p/nLTMiqWrJC/Q8T1GXJ2kn04DBQcubnJdYTYeQnyGjC
Wj77p6hYT7NinnhulOj7LUcKRg1kuIKWSswv78xcnRoo9ssiEYTVI33lPxILN+CnuIDMWFrwAOmA
2MIJ2hYI3ZtF1TGhCZ/mG+Lxj2EdmHXLKZlBOJUgx7v03p7L4bEx/J6tNyPm5dN/fQqD0UwNmPtC
ppQ6HlCvXf59TcngkPK0gr6rNs93TSLyUFYu/XLng+MsPgozVbrkPM6JeK4NuRwhVKDe5pA+c1l9
tVH0heGDuxMUSVUaYmoGMg0OBibcvJBIOGETKemvXxQa0lLL7ZuODYYugIHX7jRLp78VdP08dR6Z
Y0JEnByk5coI0qvr9aeyC8tFBF+3QBh7bS8IGti6YpG2BD3RRm7Molb51bkMPyx5OyjU5P++iyRp
d4pPD9Z6MaaIet9m5jqvJJwKXd7VMzqR9bmwfZxp/+V09wat3se7cRIRmP5WJqzkeM550xwrZaAX
cNI+kZ2vUyr+MY0O2zjlcD+OIxSR8RVjFL/o5D+rSjbvzevtSqb8VBz91/EVmtJp9qQSif0s30L5
A9X7lROGUgT8ZjWC7CUjPN4v8hWvItWKaQJRsuBX+rxLs9qEno/hXsOylVZBiP224QgP6zM1sjPX
kOZr/289VYZayZE4aLSTz1/ye6GOnrzW/k3kLvd64pf02h2RHgnESAwDZv1IEVUINQoYdleDM1/X
TPal4VZ/2VkDeeFcCMf7fUl9GFsGV2fQid9wo0qNGCArLCNouac7IXlDjJ4IhoYeRJ02OJUPOglU
W9Ml3ZUUAbYGlx+T5FVUPTxEWMvXO2V6UiCT6fjNgkl2a9LNMPTOzN/CAMqqxih63h8SxhYahmBr
82zUva1SeOEMqBDaHr3Y2O8fecg5Rf/2pWV2pX95gl1v8UKanAl1JVE1E1SezI379l0984ofosDG
KGXBQ124GEXB9VyAfYPnocPgHzTs+Fad836Q9ufnIZE+dHCNfG/twMfx5J2IcE/zOC/oYqGXSYcM
1Qm0JM8m7VzPauX2NAI/3d2Ivlrm4QV4cvIefpN0a+OzxKrwqqWeiaBwm6YwE/KOwOjs4EWsh0I8
pBgo7GIkA0PcMFEQEz8gif/fVwjersOwEpeMD2oodIWDob/WFZ0saTt2IvPV6fRflsaQ4/pFvu0x
OM2HMtY+T2bCXAjRrACSkfK9aVT4zCwFPxVR38KKsnpw+Alksy+M4Vgeq+gEu8fQt6roNFnRgWp8
7ltSI4wyRrKysGA832cWZGc/Ys51xovOQg8vVlQsUY8QW3An+8IGrbMzjcylXzXMCDXzwl544chE
RRsDGF9rFT8jD49Hy2w9fNKgel8wEK7CqFTvNbCQf/CljpfHUTpONcm+/fwdUS7LAur5Y3XiyGYn
FquX8Ed7bTTslEj+8w9308EggurtoHX2WAQEWkoa60KC7rK/4x/CLG+c8LtHGvp+/nEuzX7WfWPu
ffkeGKrSi8PlIhV+A9Om7gDe0ugAxEUd4jQADYxk0pQBxWyyJ/3e6ht/0KdIonSeMAW/0jdhsj9l
JH+dCFdZDiVWzlc0fS8ze5cwlkL6/1Y0+rayIZz3cOPVaHzKqeu1yKIftpIhup6DHa0lVavl2Ek/
sIkSqpk1azxjIgsf+RQnQ3xL8ScQnSW7/vuHjK2qQ4pvdjUh8HK9jin7DAr2HJdzxSYOzHoqCUkb
EmwKXGVgM8N5jt9vPkOC3+VgMBODN2AVSJ7137+Uz90OH/wvL7uObMWTVVNIPsxcET2xCPft+3xY
PCf1D2w1pYYqzuBlgRI0t3FfbMB02tsJJzzqhOTvnEN/Ya/UMe3sRlk2V2hgAFDX5E+7quKxBxuu
j2+Pxd/2CGVfatuYVNv919RKhl5m9kBOKyOIxYkfofLfvw2CB2Lrkb3SmIbz7U23QfowlBMLLKTf
ZJs45XX7xMM89nku7zQEKVOyHPDnb9HT7Gij5j3FKFovf2fdnXjov1edm4fhZbh4XavpbmLMPJbe
SjG53fgQ54pBjno5nGGkpes6qvACCQM9QYBvFI0r7j7+MAkLZsGHn3epw6HuneSUQtlGV1w+zlpi
K1JjY7qLz9lry8a6JZnUGgRmuSRYgRHvZkPmwfE6Qzp4h2i/Iv/0rb1+0zbj8A88PAbDZlGStQmT
YQ1IWMopog4XCAD0e+nsx4aVn4wEnrFjrDez8ZXWLWpUw6MAsV2C//6hcbFC+9f3bPiG7kxgym6C
KbGG7yKbY34oJxlejqeDdDfox9Ne4DMcbdzyAhv4wk9ngk5j31APo8WfyxR0cAo34sN0dyBvpxHF
A2MzanZq6NZ2ELiO0hJAs2LiD0eYmLfpaatiEC0HfF4lBJ9QSjppVsm2/b9/1QUJsDRbsAW/lNch
/vIGpQRUFmyUMeee5B4ZbwAGtO8AMvOasGckNi2yTjfclH82MPq2GbHUmR8z+e/foFdbaaPi3kKP
WxEtikXQvr+C3w4R62ho8NgGBXt+bKUi9RyH9442jm6JqrdfjDNM/Pq9rPFA8j9/9wgoPYNlAVOh
c2WSzC7lNsSoEYPLyRRaPSCe5qHSgx4oKjtnWLd+1Hf2sWIaQclh9loVXPZ1r6CZx/zvOw7wctVp
oPVlzDusgB8V0uBLwtNvU5Bxqk9erCtPal0lnnDDXQ73jgxrefHyo6qdeEp2RNS6vFZ9OqC9BMPA
r31hWRvfHK2JqGVJanUzdw7zGSQwKmGdyGfNe9s+arQaufHmmRnmjhb6KMu36GBTFSvYiXHdAZ7l
iLx9KJvEkPAUN1DMLPpxqyKrHh0ll2MjkngDPQQ82GtzAnOBPVig+DAaKZYVg1/qLS3kwpxKSNB/
/7wB8I+Vv5dsV/GjrStOZ8n+GSIMB4N16t/EPkjVLvuZvvb0XSEQB52NwpIDyT7vKnup8McW6h3x
0PK/f5gbl529+1fmLt+1XA6rxJli/tRjdc9Ir9qY0x+B+JFpWS1xtcLvZpbuAOUf9ujNj9kts+u3
ZZZrVgdmYfb8iKA+UGdH74KYfu7as946/YJqhCss83sNHmK93VHzYxNqWvbYY+9OybcJR5E4/C7O
Dyhfooji579/Y0TdlTCHJALX/UaFyP5ZsgjKBp+bqKl0PhebQqOnPErVNhdp32S3DwhFDhVhyWOe
ej094Cdsfcm/rpcXgRGw0d/MvxtpxEmdaXA4vDxjJg2asnyxsk4Q0atsyQ7BRS1LHHaEKpCef/LK
Gsz+lhybdQt4dMCcghlG4nLrSMd2trymSc4paWQtGOuZMaawycjTBtJgo/crICwi62DfRZazzVnJ
vLPpCrNyYnMQ25MGcK9Emuh6dri6H1Ji4+igASnXqqbNB8oIBrhmeuq8RjCZ4BdP5akjC167LoAY
4eDOliJ8EoaU2ua4gYYoulQi94v/nrFDPh9+Mnx4NFzKE3SyrVFcfyLI+6S8urF6vCDUUX08s0VQ
1hLbzwV35B04AszoP3P5u8q6o5xiJBPx8B2vFnItP2SHlp8ZRsmy4KDD6Mnl4GC6dOwKxBOQJgbf
KMiUz0APEfJEfuUDfaiPvHMg7bIfLiCvG5FxmEh6+UMcM7RXaNAWA9WYb0A0GMStTxFaQ9bLU5v8
jYCBJ/s8vDHaQBUsgfb18nF4+ruDLwbPLJJnY2UWsYdl2C3N1AZcJu5WQMUQTeRctniSJuWFk2zI
cV7J8yVM5H0tzxaaTNbnqEZdV0E+vc4U6tkFUtuNs3/pAe92FNrY520sNGKqcxso0OrDPQc67WGs
i+IIRsWZF/tziZ9irenLBCOu8QNf/YDXL/Me9nBgulDo2PgSBhXMVrwvHFRd8lq+rnkQKSRNkBP0
nUh8NESWIOc9Mo1tWa7L88qdymMUDx+gb20IHvgobKf0vDlFiOvNILEV4v0o9TJh3awwN8FamMua
AWceCmIxct6KnrdZFmxxWWAoT+EJzum/v461VqZf6MFEfgeKqumFC4d9pBlxUhJh08IOpv/GQgvF
tOUkFN8LDPn4OFN3A5XcImCM9Jt50adtQqIGaukzn/dGTlO9mYVuqCa5nRPRlz+Lk94gTA97g+b2
Jb1ZdJr6dWBqVn/D6PCxsyJN9cj3Gri9EwpyPHCkPWKST9h9lHCBpM8o2vArxNqeiLamtSJYe0fR
YSkwPWcpjPiPY2OegPNwh+huTr3NhuHSCQtNbb5WsG8s9046oeCpd6zgMbCo2yP2S+RNRJ+S2tzN
XZR4HXXOGHGgkXoj0mo3OuM6LXiPknvODy6rSsdVxQVdTyr54+ytjp0arN8Rkvfa2p8mYTqcW56O
hj74WdnQeoRLarl8Pje+475wSPuOXATCFgadIgPU2qEh4W+t/sVYHTyFDl7cN0SZJlb5Zp3rCiVP
cbEBNx5Ivsh3r8X335j+KcR3b0R+IN5IlbeNCKyxqqW3ifxdNVGz1ltHMDAg9Lv7wGXU4oCLlWii
7uNmOfY9hdTc1WXtoTZ5VtJB87ApnO5IT0c2GMd3hVkNUHPRgHHzGMqDfWyHutiu0l2THhThz+Bg
Td6Uj/kXeUDz/+YaXyb3C7OJ7TkBoqHSwyIEUUAvsNUt2DL4RwNSfdtZC6VyhFcG/fd/F7yqoBaC
qnREAZ2K0Sdfp80ozd6QyAVTh+zdVwI9tfUtqJSs0mPP9FdiweS3/++fyzHID0d3KjTD9CkISl1e
46XGIyGnnhFsTPIiPx7XbyQhSfEJ5SbzGuVtVAkopd9xWznKWM22e2wiGDecWhq3sQtnjbMW1HSX
kSnKIAMuPXzrpxTif2GJwJFwd9mJFHfTVGygu+WOjDeNTC3hQaU7LkDLrv/l0x4VotViF/QhZFAA
1j3q7wgWuGRmHxFntnPbx0xjKzOKE7H8OzLhlUqdB73d6tdNDmyhpmp7HbsAfuslSgsrN8tldyba
2qTHTUJtZPnMu2e+N205L9crB0rb/qcTzyfLB03JfPjzGH54eIDcYuJ/rwW+kBBLmRtw1TVDCkfN
QMnBiB+sNe81Wpgf+cvR8Y07GtZH37IhLTiJLjjZXbdkk72S6Q4t4e/VU7qHA3de/hZVR3zBzeDJ
r6zVfSqIvIycUfeBXDO40kDVwOzTwMEOG5AJw/3/qxqYHq8DZjL7sVPSBHkBt5tKguHnhIeqP9kS
hipQEB+bxNkS3218rIYKJUXDI99MSDteemyjXkvpaARVEY8Oasd43tmHnUfAT7dsHyqwE9CP20yM
nt7EdVrMs15fvCBWvlIdisl9A8/2GrgKgRF5bB6BwLXuQbXb49De55GeCkFwFfTpwmAd3FZ9PRKP
ehwAXoSlnWm4AmJAsc04PxxEH6W3VE5F1qhDCJAtt4pQoJLQIjJbEzCrRkIxIyXIpyYt6/g+tAht
lIcwxPDWekGFb1IVypzLVxCdRPjX42e+Xda9NNO3AGHSqk5UrjLKGEcQa33tDTKm6+8bJMkERYQP
B98ZDEnvpqu+SBdQLLQP0a/6BLMFwXH5g2D7q+1nPhCURsCHiAnPI+spBQM/2wZswU0/ov/7x9Uz
FKgJbDNX2R0MPjE922UMgiyMptA7NSTEw1HzXeYRiiN6hspsyW1H9TLHwQpnAEu3jZy0qM5x+HfH
6Gg+GjTIbjtrr6i+xAqFmwMix6GLcFnIbt1emPPXfDm2lAYJbOZSeIacyaLoUD5vWo7JTR05Idr7
758WbwnuncRewV/7lP0ax51omqiyaPss4OW2zplHxkZOhkAkpYCWCfLPYgGSYHcIUF5tGCpWo8fG
zwaQAwHZL/cXfK3luW6j+VKFDG/NrBeBVY0/8xmuz4xjJRqpbrH7f4sa9i+BY+s1Dv2S9k+cla9O
/ejfBjCS7QZeobMR6Op0BBhzYRxc9a3VshasOMhDIjkVW+thygg7nltWOn31ELuKHrIF4KOk7AJH
6iVVBAfM6azuaDVFSR5ZavnqE/kJXYzhH9onZ++bN5iL+ewnullqqWgnXbf0olA0W74z/BfxEL//
TAzezwX+95c7a6YslXGu5jLzOzmhHVEN+SYVY6M3XegrNgAg+3I7LqeDTC/R5mPmoWMkWkMcNxxo
aVyvNrHpFR7f//07SpvFg6DotLhfUzR6h3MvuYNFM8EiD+w7w5Pk7TYbiFTIyooQebLqMhE5uei1
mq6ABJxf3546nZ/AT0Ni1wWFfkPPKlrNpys/TkryjzAHblC5eEhIHc0FsWX9Bmr19or2qZF1xeaB
g0Bk22b4YvEitkSyQoDwUThMcJ5esVg4bSAR/e9+JNddvcGPY/9wESG09nD+HS2M7LCtDg2m6J+P
lPQXoRvPfLULonPhbewu8Kw1r7dcTeeGSMj4BilTxqCDsaIeejEbQZzvZe1baAidQBo1yeu9lMhO
SBg34wXaIKTj0zMwHyjP5oGt+VsRiAKE751YuY9dZXeP7vRLU/SCWqv3fiy7jjayy7B8HW8FRlm9
wofwrxiruJClJriqYPqy1GB5b+DOh3tmqxz8LnBAXU4p5BetuJdZ8ahLQBnUbkip0yAFJDmxNHQQ
jZ9p6JE3dot9n1kIz4eIjllp7Z1/9yqeWkd/ISGKf+9fZQ98iVHJWO5s/nCBiZ168oMOymYl3qjE
KOI073cttb0XwsIeMIxHMP+UI/sWU+jvWoIVCLS656hXMO+Y/MI4SWjAsrFMZPBKY/DRchRJEKOv
VuKwkus0fsDzMpbSlMPmh6rRHKcB0jK897dv6PIu6Ier5CBmM/9FZEwJ7Id8KdILQRrI9FqYwVux
YiTbpIGgU8OG4KmJfdUvPJX0bmVXmOPIYjLA61GdHlCRiJQIZ6+KjdQKFuV0a7oDZLNysm7retrh
/YPC5PQ5b56YBoACIy+UR9iC+vm2/CTjtmB/c1C9E4/ZDqwgVs1iWM5Xrl94NUxacv6BsPyNh8Hh
xMpMNQVHYkUNAZgpM5Qc348KdwlKEU7ynej0C20F8HqILluCzDemrWgG5F/1XZWmFcPKoOzjRYig
b3DpJ8qJjWA87CTzmTQIqyXTzEb40SLJUZmYDBK7o4JkVHpj5X3g8G3p2iTC4jOtvh+fTz5CY4w8
wwrTyQ175Bl4VEylVcAZIDE0NbbHA/+5w5X29Z/Kz0GAJoBqrJOc5Nu/uTREYr9+se/3MBY10q1Q
gbO4ZUFGm3HYSnimsGf1V21l5yGrC75m9Uf90JROn6SUP8IJ+I2VQgPt101xAb1FZpkya3GRKM54
8Q1VEejAXeq2p9K9H+wIPyUPpnZ93T4zj4Nrjapg5Ga9vxZf+vuO0Xo4GiV80Mgd9/73nsmzoDVd
X5t365ZWEs9FtAaJYJBHgTMMCwVN8VRx1oeWsLK+bwfoOFvO2gLTB/tGBC1+ttGB4P6movcDWRpU
hrb+ErasYdCAmGAVreUnx79hZ3YoclurYJydnomL8Tu0MKBMfPhFmG0cwAFXJQhiKj7dlaba3/Oc
QhQgW9GUAmoFR/xlqz0zlOVSkrX+oZ/p9yl+XqNEdrLcBVEev/pnZB+DFEoRcG/c/Mz18Mtlh44T
zFcPZoz97X+Xi9iehny88mNCdfpiUIUx0Unu3YvRdXTXq6CBSbH/rBDldwee+8DrGwUmgO62J3lp
e9jk/CfboGVZoLEZhB5V0TjrdDvOS1bzJ5bzF91uGg3J5NCYo5htNhQ+jjyaGXr5W52Vv4w3QwEo
piz+O2MSVz/eZWKzki0fIi0KeHB/8cZdgdioqTUR4kUHnZZHUtadH4v0PcMdehUZfsSfvrn0TrNC
gAT91wgxBfLFVkA4gXoriCu6y9IeQvwm87DPutLZE4kQ+udMpKlRPsN+1wJheVHZGPjUgLS77dgM
X2Xy2JFoBq88KXycciTzGyf3XC8o22vs0Csi4RzuqxQ1jCIKO+A8M48T69KSqxtndPSZirdeYGtd
j1zS8MOOSvry84qkiUElBUV5Rsujaybc6S/pjMjS+qgDjow7L2zf2g8/pBKNZIUthWRVxlgxXuLf
tzkgXJfA6b3ocfgO2Vw24wIGzyEqkIIc48vWRdum9/rR3LWPOapOQ7KlmS8i24SpBFxtTC7m/Y1e
X+CneZLczPiDBwL/Uf1d3o+lyjoWlN7jBNPh47RRQ9jrXW5EwVLBOmKGMfTxj9h8C8giYb/MqdYy
gzDV//49dWZAXxS/q/xcieQ0jcvZ5fDvnvTf+pzj+05771Hz9SN1GvWsX17sAx5fukXHNv++v/1o
ZQfqdAYBNEQNy+IpZbzAMKhgFrTLZ8nPhzQwYGrzeSEM3S/DnAmVXy8mfNRA0vqeWDUcCZoOU540
8iFQIaVbOxCgGgxS9bckNDQy0DtzIhuWFW+fIus0giB0lqpt1zVtQL/9Wtt1eKZqwi7ei4AsexNm
ytBPlWu9YkbDAHRWh4D4PxWpeZRo+2lXggxkoGJ+xOkCMtpJvovbq5rN3aYgmu+StXNVZsNqbnrX
Kablynx2dGdM6J/2IhRjeqIhR7Jw0I8TC+ojCsV6ObDtzD5NiYFCYdqApUpOmRa1SdPnnLxJeR1K
TJ8D3zTzNfIypdh6C8gh2JYB23JymvEsRDLXuEJ3gMwjzDFvfYmCK3mfLDjfxoMm0EyOYjBRozs0
Xh/5+c5is4ZvY1yIeWX9rRfduQFgoST4ge6hbylfOYlQczpDRffv3tcINPty1u6r2EYyZeKQIdUv
SohxPap4mou/dr972bLnBGjIrZw3oUcR26Tk3xVOdbm7P6UKZ0rQTsTYb8L9hH0VjLulDj8yDNBi
ko639gvyCpv6uKdn1O4bZAQu998/ijhkwAFJzHJlOtfdKdw9Qca2dxGp/MZFB5cn6fvO+qqZ8STN
suHxhEhubCDkoTY/UWres8vUFdtR//377XPaZgyE0Ic/0XWXedv7y+LV7n9BEedPN1fYMvQdOxHT
msnF6i31khHnNv4imaGSI6o2MqS/WKsU//0reOtC99w8lpd4L19e+HQsxsR3yz14osGt3eOkIdKU
uQBY+FC94eGorhp2Ep2Kjlxe7hf7oTvnWuIgy7wCPUnR+u86ie4OI6Fnqh3eSV6bAzVWmx5kk53D
y42McV/w2kJi9451/bFg7tXllNy++eS4uIBJFuK/f0NABmBIVSEK2bXf6Xf9udD4gOCOPtmn5ccw
8Y8e9fBhvpQIIJZeArAV5VhNM2Z5tQz6Xt916zLRTAJG+ogultRu+Heb2OnXI6XT+0mCQwmsrgn/
lsiJMzb84WNIh4brrx16f5T/j6PzWHaUWYLw/o+YJ2EhPGKJ996zwwnvPU9/OXc9MTqCrsr8EtFd
UnqcZ4K89r9221Yd8Snb4d87GJG/C4nCScyvc9rU4WosFq24mBqCyq2zr7Qh8sOvDB582+b2KAXu
T9pN52tvLYIGUrAXrcjO327N364P9BjMCab8SDILpGi9+Ab6d5DG9qTUAE1TK5pDAvNDBd9+UBUO
x3ZL6hSP51YPrPLj+Wvo3ZkLjW3Pf/+dUZ0cYQBth2REWMOzRgCuqOe+jaXcHx39PXnMw0pT7fLZ
lJyBKAsAZpgcNbh1sfXnx6BJmI31PSTZv//YBWBoDL3jZJMdPu3PB1+rETRT42sBkKIQFSTa9+1G
rzcGRCUg7lFb5WQVt2Y2gWTPBDokrjd0Svw3Xwa0ZjK1j73awxr9ZeXXxC+W49HvOL6LtRxr6PYJ
TXHpwqDDtJdSt3tATFfANvOpI8cQA9hg7Z1O9lLNZHcRRrRT5ixyHPkzQwJzwa8ff8UVg/q1upKE
4e601li3S7vv1JtX7XQt9hC6/egxzCSBz8cPy/bvZJ6nAyG51Ch48LruzWySU+f1feBoaVhsBSBY
x1E3JUTmlgjGYObAfLgOotx4DOd1vwySiCVb4kGT0U///ouhvUJCV2vVsZ8cWVMSu5oj2d4lnCti
RRLSsZpXRCZ0/6R5XXqdGeKidNxdQXLQ1bP77y6BAkAco/fvv6RaMnUxY3sG85DJKoE0q2zZhQyg
u5h9c6JFq4+omwbLG4rcZfW+M42oETlCq22GAY4NJwVrFHq1vtWLMt6o8Uzp5YgkICXd3RDh8xoD
ccRgiYcJvMs0TOsqo4+DoTmd0hQwyj7f8Fh6zr2+ol/WhFw75Ko/ReJHDo2rin423R+idUVt3PV3
iRwbFOTPlTxwQxAWF8ebkwHKl4izCXnRAkviTvR3+LxOQUFfwWh24d9/rR5dGoyEtNdkldFBRJzc
5lis2eB/aKj7onJuVTNjab6JV0LHqORK7dCV/RLyJ2GKO/06AIthHVyFv3dBycWWn7spUyma+R6+
UKQAUbNJAfcyKS24fTVH8t5qIcMtv91HpqpHlm/XZ1Q9cT6hIHkKLk/aAoL/P+E5tJu8uDJ64nL1
kFIRDV6vubQubXoB2PtMGCilTWIXV6tiBYRkhWHILRKLlcDshPLp9DnRcqwneSnasJhpXMr0l0K1
8/HmPmkqzsvH+ys5yaE3wiYRe7BCqBDcYOiG58XHetOj2WKRQLnKaonnUlozHea/FTJKXhKRucB9
ONHnGNx0Q3d5OggZIViKBkrFWItxotwidI3ga1NKECSil46KCJVbkHm90oPHpmnKipe4ztxJRg3Q
gnN6ezy7IVMTfGpviTjLb3feiUhNUL6v908S3N3RiS8MBDi98Jm3QS7R3HLKOHCw1s/fOxjxfTQU
vUrejwmcMKzSw/ZrVQtGTNy4Fm6/XaNlZ6gtohtv6WaLxzROPYSk0+DtgLASCrLUsZ8/3XC/FTKh
DQ2iw1r1Jj0EZx9k19eAUcm/VdJnpatC77HW+cFsrYDbYMlnhukMYhEhAx4MzKxbS5HyN+rEXnf+
CbzRn6aMhhgF8Zh6fh0AAWvyDWqsI8vulvd6OrxREyLyc2TxYo0T68X8bfaLSMYeB6AHH4qmSppe
GpT2PrCHEzUu3NT0jypFS7VyYRVruuW8HNrHHW6Ufe+U+t/RREaMoimj5sq2xgRHZY4ylfe53HQr
Oe99E9JD963WdXqtn0Dbo7tSoKaNe8gIS5A9m7R3+QTouT34S4+l+j0Fzi0QrdMiXvpKxb6eTM13
qL3Rr/Yqc4anUxQfGgCvEYiGCsknl6s99DCBZ5xOO9Qdn4erG4RnCD3P7kp/0k7oI8Sa+J5FBlMQ
R/GJp+bVt6kE5YN2x/SFI/zGJIWOBSqh82Ra+JveJW90OY+bgMnSUq+b1CFvS8UdjSub6ZwpYB8N
esgKWAw13u8WqNiXZZUQxrL39kLAghdwSm3LYX9mRk6VX8zMTBAeXQHCOieuDXVQdl+wa1kRFTOy
sVqPRC2OYGC9nUWWxjYZqnzL8jfBSFxxw8RjIL18ohp6OnF3Xa8io7ucz4fQ51Vp2EVPurH5IZPn
44PZl4MRgwn3U/6eOTgrlUqteN2ph61OiBws1aMyiyEzCFsQXSpmTFsakFxlIwCxykXbTI+hcY30
RFsBfUd2J1lhZ2DDS6qv0gbSDbnYhShhNFGnx6Pgpai/FZDqfehEPrDe7gGj182oJwCj4Ued7pU5
P9jAvxKcBn35d9K9rvnqv//gR09K/tMZU9b8pldBR5phPbrmd5nWIPGJBI4vJ2NDkqKh8LPjkqoR
glNf4UIwaEoMZU0P8KDFyb+ZtpQfFQwcIZiEr3WfcV3RJzKZAC9NkIeLerqrnkE17R6/TtRGRhR4
AfXQjqzWuq1O1p82XJ85G2Xybw87EUEviLUjQUyj9/mxdGyc77Ibbq0T/KZkzZjY2hLvBgpN68JD
5Ksrt5xUtGa6ay33vlYlk4ntpui8qY0r32oK4CiqjPgt9sfCvDA25HFHrHBxKN94KzuC+R0n85q5
L0fYPU8KztFY9a6qtfLRloirNe02Dfdv77/5vKFsLHfV1e0pfnMwAjW8CKQUEEDFfpgeOQWr0wW4
fSl1yUR5FuR/5yjF1pfM9bj5PZ7+gsBDPv/+c1Z/bNpkxsKbPCpKlBOEjUfrgLxprSQQ3gFiM6Zy
/XhRFaZ7y9g/kKSO0ozJp5izxk0iuCjU9ItO17//Fjv4UImw/kbffwzIZo0KuAUh3i9h5NsOMvUb
Uh6Sz05FowanJLxokF+JU9AIbdXSlEbQqrKZtL4X/DrgI3o7es68fTBbAlnoamBi0qO7R5dCNTfb
TD7xTGvaflmaldvCPWJ5/0ODhFQkkkhEKa6+hEBuVPcyOVbdAntlOjidBlmIgpkptxWKebpSLGrC
gZseQqPbstUV3grGTfwZyCEaWHnatVCFAbxM22bGEVDTwZfwPfD6qPgNvGFIJcGMBig9EWVwc1gB
RXNH+ML9urQX4F1WC/rJw+2Qhkk9gb5h0CtrUXwrx1Yfdf170nglg+2QKeN/P9ttq+x9KU5vWjMR
ZYtSYtols02WkA6++BzZqFYrvdCzyMGILgd3atv8sC37Y5S04O1//0VTnVgpxVP3nTjsmImHlcbn
Pqw3/MWGGV0X2jI/hXWqS6zXgOLFdWSXASGIoInip31qWlGRJ+aa8vzvvxoI/TtmRw+4KKxpdYd+
tX82vAqsCR5S61sQm6wzjouAgiAPLMVMgzsyCQP3ZriAUVJFGKiCHT1VnbfehIvFpd09teyBJzNK
hCQJri4P+h6sKA+Udd49lFXnJg10Ob+6f/ww/e3SsJgz/ik8Ek8HJGE/oTf/zuNy7kOmqC3D+RaV
ZYoxEQH/esFGXHqf8eUlL2BnhvlPzOOwLo2O4GhAN8FN8uxjHRvVzNPNTfCd7V+2lHQ0OhkvNTw2
CNwvStUGUy9RpbHleiYRFM6HLuQN12e0lTtWkk3MqXqUQeEA6C3fa92oq8qDjqO71wEZn3KgW/F8
SkEcD3XPlrxnn4yLrRjx6JxKFC4uDk5nDhQ/lHsO4uFKMhxRXONTonZvVPZamOi+cZH895/d8c0I
J3ABDWPHeHs7iyD482tTdr08HuSoWze30U1P6soHWIHFbbmt6w7CiYBymxPw8KRvY1EGWrzZ+W+c
4ax49vnV+rAV8OKJy8/LK1759DT148+ctyBtsZVq5prAaYCbonbikwKIEarhr6p2zKc3jZrW+q23
azaZdpua8jnqbXI7T1W+QeNfhKmtMFl0THR/15EekJ/EQB8/EzXmmxS2REFiWq84ydyed7//Bspl
9nd+SKDM6E7JO5dbQ0iscHfZuJR2DEMBiSO8wE8ZowWQnQyJTjedlkuHigGukNmVYffJYYRELK8j
7Jn699/ANXrHutKjcQv05VD9aWIThHh37pwMNHaV01wXLOQh5lS+0S/GHbC+FKeivVy7erY3zjlc
JhtS4r9K3iWwsVtzhU7FGA0KcYexFIiDj4Fy+ox+TPCpyrBoZUa50uExdJNg59JQz5kRNVv4m088
/45+Tlc6730rJWhiom3prvmeaOXZNj/icFcZ1Q63LL+eI3CTIaaLrRfXwqlpinIPt7HpPo7YpvMH
PwHuxHinNZy/qVIaXTZVomZMGS40XGz9NeJDTcJ6NCIFKn13Ol5VPggGx+opN61Lk6tK7EtamfQK
m+lZXN8Rs7uWgfU3/3Srxy0kxrzDSnifIgEPnyVCgHyQlAhAR3AX7iOvKcS7eT9Y18ly7aDdKwPH
xr6J+oIsCACg8iH1Xw6pKPxT347yItaM2dKGLek695bY9I/Wvdfdg/L68GHUHFfwKioE7gfceaXP
0O6al/qw9pEucFTK9n8VsmCZuHylFUv4LQlAbqW5Bme4hQ+qk4j04u8ku+UAbxip3I232FiLkDnH
RLTq+B6nq75co9CV+EJ8+W3gMadjcbVp8DdUpkflJe17Uz/TwxgUiy9iVswSV3cjfNZLN4ThvSbh
69HXHOasWT5IYh7EOZnVepB/cxXZq1qZDJMn2n+Jxl8K2o0e1mdR4Tf0wrmMYFXdj/16KZLRy/4y
ZCUMV2IBqWr3U39MJdzu5YTY76eJzDzV8a+0vBJwtpY2cFRx2gJavPXIQyxOMjHWECsL1ImUFmEB
k52nvQP+0fJarcS43fmWuk1hWH9Z5ibxdWvkGpbKGaLHO0DQ3bzoxshPQHSOmaOgEYJynDXP9SEz
vN0Zn0CLpBP80brnrr65s2YavvfBdxVWFsV8BMfCI79H3cidgGCQ/cMjh66PcF23vvLmB1BQrzqi
XYRaAV9KjwQOk9cvTeWWrbAYaIVCOIl9/fQEI3tJbnDIY5p6Zeu7m5Py8oBx1zrC3JCmVeIbIo/n
lLTFTN/WN1mikslUFuUCLOZ5E2AA3TRCoF+KnibYmWOJeOmyZAw5GtTY4H789kZunquRDLeat4Jd
n+ov0dcR3coek03rVDRLZzR8atjtIL/hV1FfBzTVQQSIPf7RmAzfia8S9Zu6y8St914Apc5XWm2W
QbSnQ25swqZ1OvJ1G4AGpLcjT1TnqLrxnOPUdu9vRhUEodHt76sbVQsOse5qAjRZRN9v9jdF1Y4C
Hv/GZox3zXZtX/g5HkPLMGej7VLislrNvnuTdJTa7W8+NWizjIRK5UtoIWhmJlg3WHy+uS6y7yD5
SLSstH/XGWFvyiWy0Tg6sOuc4u6nLaUz6h58/HGeIe2jNxlFLo3kAPZYqn0EznL/YpwAS7vmZ0za
0wScp7kgDEhIuKWf4ae1vo8L4dqiPEGFc/Qti8hFRh4UOr9//1leNu6sI9BcQssvpwtaePU5o/vC
e80Y9q2t73JfkHqEyrdQyBtY64m0noi0asjY5CjhS1xByfyYCuVdUxM1UOoyGn4WWqAeGSJeQbNO
AmdN33zo3Ztn0+fFo4wAbO3PMKbqbjcf33GIaFcU5aO9kaCGevX39QV1iCRLMgD+6zs50d9oxNcn
3IgThywe4rCaTlVgId6bxKupBGoaxezpS4zLDt16CNWuVs1xyRwF37+rwEy1s03r9pXY798AB4sU
1XsozHA935rWeR5PLlpOLRLyExc9ve6saQpVJBTqrorapgKLBiDuinguXiYPGeV8KkP8wj78u4pT
+1GklYI2zxNL3mC62et71d+S1NBj2023etNb9OJH51r47+tEGuIVb1sjr/6+VHPpR7iLtA496Ym4
qTj2fFLVAU2aVqyvw7IrPyLKk7689Gz0+9h6BVcyIudpFGdflc2dm2eYZXhFW+zNWaLi1hl+82XB
WP2Y7Eanso/rS4OgoEz3JTyGgb46A5kcVQxJjEPHBNvKnW7ZY29Bma4rYggdsgY09O+/p8eja3Je
EdJud6ytpkBcjvb9s6Eysfgiec2iim9OwhddQa8qK0nCZRVrvho/ZrNxMVORyRYknv9/KkULKBQx
+MjaoliEM8p3jubDujDGdntzNBk3xDWlDaptdvW1plbnVtIp874RGCoX7vihkLJD2Y20l+bff76e
/M0J2EXr8oGKCEtjtTLF5GLIZwz/VEAO3tAFNdEpP+/oQ3j3ek+sPKquqsK98M03iBc5P+NQ9m+C
5AYBahKgCDVVJ/kDaumK3EeZVSKNu0UdhCt5Oby1B9pV7UkC7+9wozgGpTncCP0A3G/q8ynt8VTk
rTf9yzgz4FY+L+akII1KPwLd8xY87Wpn+5KBv75NBhzal/tCxRmYH2MVZQ2aMWgA10QxJMib61VC
wl/477+jkRFK6YoLPGxUkmmoLr7RpHCgwYNfJ7jj+qMIpTVag+7rBov8XO46RHZhFt4nKtaDyMK4
gQeRdQr595/CYT7PHKtHI1A4IieysN8svdcwPs/rjdP2KJ58/Gjk5mrjRw4E1AsuXQ+/l8zYZerG
yHfdslQKbev1hSxOzDZYWhLYUYKc4VDW2640Bi/bGJZjzWTduZOFbHdhxLorI6AunZXs54b78MJo
DnS7jnDMgyr793vWNHXI7876gNzt8rL8vup/+HLFVM4Q0Rxa+7SkYJZk4cDgXUD6wIuUJAZ7OJbA
kn3qdqzox61JQ1h83ysFTrt3r55EckzS9r7e8wuo/SysJj5nGlCyy6kzDRBnyjeNRObV0YvfQtha
0Faq9wLFbHHTK3xibeerIVJljlX97KzW6apiW/cPsv7GhDjG6wfLIvjpOkZmAC4cTh3BKdkK7N5p
mtU+b780JuSdU4Zty0J/E6/slRo1zWGqMpXJje+QmtQp50PqSrbQPSsSO40X6Jth4o++lE9KfBh5
HWTJ+2kdI2zmiyIrIjd74W2v9hbq+c01BojDDZv2pxwEafokz+z1VM5Du9sdVt+I7SXzFzFAfEHN
kYr5XH98mRVLqZvST/DHm3wq/F5FWlEjL7cuGEqxbmuS0/0G676XstmtRK/ezBwpqW4t9mbWp5wd
XY1cpVzMoxxFz6NEqmwMZz6vNqT9N9fnCBkSoOOArkC40PRB5OXcDfIeIl7T4MfV8tX5lGeABTPv
AUhQNfSypgYdEl/UFwljpgc6GXC3xjn1339oCV0bx5s2xBUGw17N3t06EUjCCtAZOWuOEZmdOGya
lLpE6KjenI8NwaOCnwRlf206rF9P28dmWbj//tPm/GRLRn/poWPgpHn8FIq1zRrjL03fV/X1DS/z
h1WjA7b8Mp/ZxEqfz8Hxo8OUG34bpkghGiMk1XjTB33iU5YGEwF8rKSOsgO7w/s7MdO7pIHBWglR
mXWNo3eLiLB+w/nldxnVV+pM1hkAOVciyc3JVlL391tb8zE8c6egPLOXH+jH2XhNOGx5ll4rUp7K
Jb66FB+KpvNY2nrKqKrt1hkulvvsOth/iDJjUE2LaId+NYR6QF1KRcT2PHd/AqnQxHICdSAa5QR8
Ss2mDE765VaBCyOHE4lsHd5nqzHMTWgxBEQVO5zsWxsInL8OeFRrSX3rTcl/OUWbfNFSZUftiiUE
KlnUM2V2A/chrLjWTOLH5V/Wh4wl/aZNZu27gguAntmhyzLI0f894/ruset7kZ64xu/oDKybf0UD
Ph6mV5YTD8tnSnNSZcNfKoA6YvvM3Angz1kSQ9uOyN6RTerd5WbKl5HonJl+FY3CcaTwZI1YgZ5G
odbnubxxt704vPSkYTPUQ2PVXcOhA9g2b/kJbyMEeMzURtTpQ8moUpK+6aMMpPqh13qc0DWo29LG
yNUHGu7a3/4ofIgfPeQJWAvknKctMDteCGPviaPTsYE9TgtZdIDu1qqyl5eRNn6qqzyx/auMRzcd
ExPu5i7TUvCuOA1aXLyqDF2uNK/yHSCdSm0OKzxURMYCRR8RRh/cCsBC9eb1+ob/vZ9vUQCHAHwW
nZXgs/dxtgvR/9oBFMZy7wdKnGKY2aGjA9YwZM1moE0V/W7S2nLtFXE3CQzeo/3t7J69sYBOGk2L
7eVDu2Tt7ynvAHyN99dlWBqSpojUW03GTJJi3K5MmX0OWJZi7O8qOltvryT8LUnpTZQ1xdthV0JD
JrdRXugKbtv2t4oqBlTIr6PB1ASNnHYSik3PENnBEZOxne36zGoHMq9QWYk8eElGCPN2vSo7VPjQ
igmnqnX3pi86PPvBANyTMOQxPbnI9MjzuONRzykF1GfWZ9gqqKbtHMW5th4fIK2U7zfMvKsA9l8t
B4L0DcLgI6ce2a6y/BvjPDkDrknXQj+DGHMj8Wxhn9rNr+UcDJhcCnzCsv67fluKCsqFKaX15voi
uAfRd2LdYrvWgOssk8HFNoU1r305KvNEPX/qUH2grbFusV8wpYIdMQ5hTvHYxW+O812F71mNllW9
akmtJ+D4Sd10fgfhl0jKLO6cmsC94B90YoOlAsVCxQshs/i9pEUMkrgquPv+1MOodm+cS2pe/+61
8CpS/pKtLZmg4q9Xw2qzp+5V6SC2/HxNQi56oIHmzRPmUuB8FSmnwTphnd42lrQkdj8evg6u+Wkw
lY7/ntC+OYdF/Fb7SdcbtG4+XHM36o2S488kCGo9jSWTMyYm0d/8zA1S7B0fh2F5m02nUdak35C4
UrjhB/4yUkuOdfRhcnL3lT2DnYDSslXQorWcNcPbxnrjJSbQ69DxC4LWu5DTVsEiCLe9FXPImGKY
UssrMOI0XxrE69tIeSd+86MZdxGy0UdZeetA27hJyShvI6IXARNU3aD+SkrGrE9SxVvdfWDoKke/
0gx1PIsTC4fg338jDW1GSdHdb7GzA571J1lSZnhXU2d71J96570Xxxy9pP1iXLkuE0TSsLT0Lgfg
GfEASz6lW+QfuP1Wb/pZUR0/XMUYcieffAuZZMo7lxhqFup0XF6DT/sei3QMnjdWNlbToLjTBv6U
Vm8bsWKGbRq1W8hWE69nhUakmyVOw7rnRVmh2LMbUoq4ul8qDRC4xcNaUZ6USxwc2oW5o1lnBbls
a/ioKJoaeDaUomrbU7Q37W4nzWHrss6LI61D8sap6si0LW3q0AuZGid5X2qREXGUL3Vc+yPE9VJx
w/YLjM9Nv4CftPRjjiO/zd2//wKxjHab6oaQ2+vJ1A+SNZKXShX88fPiI1HTow2FlIM3atKehAjk
+jOwkPlE7fX3NtQqjK2SacHp3W+FzIqG3KgYN7xop7Kw6j2/iGA7xonG9hOSmoWspLrbAwID+myL
sJjTU0pricXFtF5mSeZMReoxekkpvJ5FHI/ZNlplSqQdG3jl+H1TJa8XUMVdnGjVKjiLGTCT8wsT
mi1TRfjtFXtC5F1t+C3+g6dXsz7Lqb/6Nts89NZTblwjk46qGBTsoRq0IZ0khedz8Mt0Zbs7im3x
5w5TqEqTDhZg0e9WkBHt1XRJj9g/iSBQf1Nomf2jG9UXH7Q3z8/K3wv4cQK4snTArUq0GFSJKnp7
AXxBekaVFl4qja/pFyaNHr/TbKAIa2kk1/43gcjMJoBAOPqZJ3o6bYz6/QKvmh6IVY10RI6S3xrN
UoVREqNITFiaSbVRgA/FLSWJ47kiPkWKcIJUHvE3y1Q4zbKo7FzNxDzKg0znpFzQxjY45se7c2mM
G6GNRbd9YDTfNvM2VuA574qZRRluRmRps3CvYS/+9u26UbR1AJXjhxDCLnXYzLm6n0aY149B9ou7
ShLImgDvu+TqZr62Bq7AdvGc2ulL8W2M4r6vSfdKCtnvJVWSwdo8wayzf0Owx7YwKiFBgvz6+XWE
oQgqPGX5GxHfwALA7vOW0IuGtFxEmQpA+ueHZictSMaqf8u/HQeRKPexc0hPGcX9fh6hNHS9MTba
j1EPZ68SkbW535vpdzKe6o+03Gu2JKpq3uBhRltpJWO7w0HX5v/+ky8Sitx6EVuP+gm8aulfrGxZ
hdLUehXtjuaRWJmvX80qZyf5Uy2RTmbNZJd2aJ4SlmqsLEs2SdzD7d++NhWypCP00bpX8kKkF5Et
QjsZrR4qXNvpc+3Hszlrfbt8L2S1q4Kwdn2K3Xh5vEtmDk/B4TvZgbtXLRkleMPI4UsSTC16EjZa
0bHyod+4MEFfAUVVdbEHca2kpStoxAQI+E6s1HPTH5Lfph2zS/d9AzyO/73RYQEUbfUMuOpbu2Le
8rMDJ5pOF95CbpM0tb9tvoTi2p+V7Jsdd90KYslQ9NgHijHVVkmkhzcThu/V87//vp65kWA3RGHk
T2fqbczCaffAUOS5xU5H6sLpP6xlWMyrplCGncWHK13K5EQnMbJCZVSmU6w6xc+/CeCrTNh5zsn4
WA8FS8rfhoNw1kx9icsCbuM+pqQXhB/sE9uK3A6VDSuNyGwGvxyxfDjXRcHEuQnwvftNuzkB8l7H
7dG2xLAL0UI+SUpg1N4Q5zmufB74MmZjJU8yOvnR+f4Ii3i0eeUrRElLBhimL0JZcmc6vf4Sl4xc
CvgsGCuz6txMFOH6iTs0ZbN7rkWpe0TDPCntmi8R4xkjSW71Jijr4Flo+84ZosoEFCri7SRab3b2
Tnlz2kvhZHhvfSMF4RuepwGIgy05ixqaSv8+jkcfFbogrJKiALEJ26vrMLJhUP7pRzgfPsMm6S/3
Nh6D8NixdVeavSYciNALxRc+0mVc5nclgoigZIGYkOEizYcP9bIGR71rSIlE0GIzeI1HJvC2BPDf
xPkkrgMI739khEGEz3muuzrISEuwXJlfV7lO1dsCOPHotCWLMogq9Xu7dpbbrWBkoScklX4plGPn
9cL8+0/yvx7YMZ18j3uewatCAOdroymLUXiPy/EQShpTagmkoZTYj7lnWRuTcCe/me5XKUMSyaOH
ZvDEzOv3u7Wcz01b02l65wrMJxi5MX5FIUusmh/O3qdwIVGLcMqSjTD1MkXBvfllJde+to6PpY1w
fVj7m5Gub5Zxmcj827bXGhbaL5VLKDSll2Pg7vcm8t3FgB7RVP1x5/MPOaQaI0sqkTb5G7aqTjmE
KMIJH0Ao5HLcy0gUzpYqaQ4laJen9YNRpliyCzjsmYC9ljJzzS0HT5qEluwoCYm7mImhTMEiLnVF
vmxTR1+9Z2FDJ/v33xUBS7vlYWIbwik0lDQ2AHm1/lPPBzt4QHNi8DBXv0Ix3IDLNd5U8DHi4xTb
A2KYHjGyf1g4hd8r+ds7xt5AiAeZX8QsOMxPOqacqVu+j3TZDPxewoexuJPaMdvZR+vhgyfasVg4
w9K+I4+4ctTMutRTjQK+pEqgU28+bAMGeV9WZRQGsRJucWz5qB7jSC6I3S/OKM6A/PRu8VTpzYZS
3xxGbuygdyUvqhrXrA3oqu+a1jMRbiPqfjEpfYLuQy0CHnawc67pMjKfvJthnYo9vG4zU/uR2A/7
PRnD+i8bfRGmFDKJgaoYsY26fz+tPV5N2GPVsk9N6VdQHG0yEWRRHevno4OUANeY79Cq9rdb96Ce
iV7Ye5WdH9bT8FwvwZece2OnsTt4U1thZUNGGKGwnvdbwEBmtNemWVSSXVZjBdFAdShus1RqXh9s
w5o7gLrg2rP3NpllKzI9LNgSxTLFU/ydoFVwJGOwk4EMBlG8wR38fE7/a/OxNMtUHSc4Yk58970f
GxocjN1/L8I/oqLxo4t2a8SipvYGCKcr/nYc0AAxLSqRXkqUyjDuOCKKTIVnOySPyPgX6RzO1etl
+iRDjKAk1oCwve4aXyyX8cIN7GzkOlPWQ7Vz8t63y3G1REQA9/qsUd2FlF8rGYaSubcXOUI1XySY
BkSg/KzijCdWkowensj0Px0jNDPUPIkx4YwffdpX30pgVnBgQZHlokmp4FAa/R00u+i7Ge2SfGnt
tHItTxBWw144uUG4oAIbDsxOuMfDb01+lnGBf0fU4C9xSRt0LQbxg32xKU58BKhorIpBHNnqyhHS
YlcJoIn2hFL9iwMg1OzCArEDV8E48qOunDHfojvkTsZ+75U6qBKGnyRSv83yA/EpBBOOMX6CGjyZ
WS2Guh1Xn2AwdOixfZMwgH2E3vyQQAXwKsGYZDBtFwrgvnm8340fS3f8UKRpF5pph6hT8Bk83rA3
nbnRYD8xjL2I/LJV+FsIXe7UbxtRQPBRrnqpzw+lBSqHhDH8K8vXnS9hQ378L7tSOFEQpPdkrGBA
YTAB2hNFeldB5mdoJSFGyuyeTNV+GbYMmppEPp9J0T9HzPP+ZlqF/HtXgWaNAsTgt16D3fNEt/+N
lub7hDSKrKBTGNKWNdLsZPe9VsFoDmA/WB6HgWK2SWry2Lsbrrd45l5p3uqF5nLdbPU7y/pKsstn
f/bM0D4min3jDPtySe/mkJx9N5P2JzS+0gA7J4OfopPYN2j+/NQm4kLwu6QO/O+/XuRuYd66ClU+
85KKdTS/0X8XzA6pAVgdbUXnh8IvvtEIdI3t5UOe2wedjznsJZpDl7idgmjIrN3nzVnr8EEl9YrP
gcPLEvHilbSpN9qPk2pZtxm8VXrR+kixPBmUdEvYD7J/z+ZaIv0b1N8HkjbUMd//3iXbv//sjIy0
XTWW9w8aS0IqbFV8Y41M2S4xhkFgFEYK82rQgvAzSPxRHXT7O0evyn88v34qDVt9gIi/8Eq/yQgq
/DeIaJcu2qqaJjaEEnWJNFxo1lIBjCRaBUtoDMihAFnEZmyyHv6vYNV8MGGpFxQ6exK3nMgiLF6X
EWywEAxQ473ZZdP8yjWGG0Q9u+UKsbX6Bg1eR4y/Y8e18D4RZd1Jg2l16yy5Ec0I7a76EkJ+7Z5e
L+H7hruo4dx6IOF4Am69OD7LJvfFnC0g189dXxCwjiaxLMsLd9+3pTwxCw6M0V0KiGdC+Ki9t7ri
QIrjv/8iT0N88N5QNL1L+ZrARQgQ3mzqGS5tPE3UrJieJ/EyBC3bwQS7VLgCgn2QjKmSEqra3KRG
S+imSnnzqeYiyNu0WfyKGkV8NyFYNDmyoZGY5i+J2JyCx5iDxzhactmC8Brlwzb2svWyZz8OGDDc
nRGxD0F2+pvZPWIjFBAjkL+E3J/33O0fguxtbt9MIDCIbgeUIP6srQDkRK8MiYD6CSIHb+s++dRX
slir0nvliHuD//4D4ZCBebAFUxrdE1heqvkg6mXA4J8VRe53uZvsqPPXDg4y8KgmB68135Tb/LUA
6ZnzySDt2BA56Vfqy5bq+PDUl4v57UbYkDmqlZE9ofAw7rPnrBYvAM2R2Ne/RjMx/U2LjLvt9M+F
Lp87VVUWC4v8+A1M7i3//sPPSeaJHFYkQGiI+Wn02LR1GCKTIxmFoxERuh06kx8ife7Oz4JmqpqB
F9dB+shfJOun0Olj0bFH0esyFurL+/CI55vvevow4bxKjnsdhGUcexW8n6NMr119LqFeGhktT0PP
5adkcWF3EERBBPjsf2H3tv73Ty2NjS3R3OUBoTIuiP1xSWZ9CAGZPqlNyhAP/5qdOtaQu+LEDALe
80gsHMPI3qCCdnR87EhuTKAjbt/qdejZ4IQJ9OEz23+GnwO/LLQbdwy6HHpz+TmEs7jgt9fL770W
tK9U0bkSTpD0Q4T4KPjVE8y7P0m4+5tCewXxC5OKUpxfL2f2gqhtXVgYhWdQJzWjg1teXQ22fJgk
HtgajAzNLnMEDj2GOxpOoUsCUj1FdeWyv5Mr7P42Cw/md6FvQpq/+o3pi3ZNyU+4PTnvvvb7K5UQ
qAIkCQkDtPQpzLvQ6FLDBiwU0r6OMWrR+bdj9NIRDhnkV1gqsV461Q6fpjrF65ugemY+ZIvxk9HM
ASRxvxgYIlpfNSkikCkhP47+7OL4azq6JqQoe6vXsGWqK6LRZm+SX7VbEKFfh5zzmhZBD+BpJVRy
HeFqrUsp8eCoKRMRTkx0j0EBqyqxfON4uwnohp/h3zmNc4guMIehOaVhqpKbMqSACfTZGDXplk9j
DGR1W5eKB+xvf++Hqek62hA7ov5CJ2CLFYymzYOCvtZefftZnzV3A2aMMhRxBS/33u8G1IomLb/P
F/2Y60Rkq676gEzrnt8bhXmlLnc3ihxUSZZNbff3bEJQ5JcGfVKh70lX6U4dgY8h/OovKFjWdbaO
2udXWY12Y87xioWMVIPWs20WyRoGIST8yXQnhFM4k4MF4ifh8yrSFonDjJf6gT3sdxFTySxNst/U
wdxlUDH6MY16oI5Age6y0vi+LhGKFKd5kbAMn7drRMqlUW1fh+Wl6CRKykgLlTxtVchx6cz0UeOJ
BKZMjSa7O9QcCUhFXJRI7XjGJB5Zye9cJMcpe3JUD7T5EuT+OPmu9H8TJOVmXrXLxUJS0M5tcwGn
uL0f1mC0UTiBwSxmWHKkRBsyTWFo1itzQsXmY1Dphxvtx9V20xl3Tc1fRSrC9XhdMYWNSO+UiZ9m
m1eAaleEgWB4gWt+Bdfq7DEUUukt4BA61Mw8UUL7jl5d53UvECL5P1yhyPTvJIFoi1cqCZzZ/enR
kAfS7Ul993RfFbrAyeGX1v5SXR2owGfqvk17Cz8cO148b1CfFlbomZk+W3dcfd0ZMtOArH4jxFZp
qZ5AEtPY1AeyNZ5W7D5GOIifIySVcJeE3Eevy/owlKKSOr/cy3yjBFIQ4PfyRUD9/U3NO+lhR3W8
7a/PUCOQmFgT/3O+48/t1qfcdqjYB033QzfT3MQpJe762hpEh4+atqVUeV7qtNjVTuXr9Qt0LIvw
/QyHGaLBCJFO/Nn4FRAvpHl239DM580lJ5Zq9fBrsI9TjYsOVmocvNdImriSIUtYmrbi/Z3dJCrn
tC+mWBJ6q4F/pywNwfVjPy07zVhEIV94bPLkhvbUDa3GG/dOj2wSIWSS93w4HgjfaxoMI9m0fpW8
FQjwGEVbdmfOkiXWiLVzavfXGMyEXo1hrgV6Kz5hTZPHwumeIZD353hzCUijOWOEHDXAQuaoe8Hi
r4aQWLxFnUarGYq12GkzTP7IHLtj5OOXl6TORed7Rjs33PTcexyOvyPfPXzDv9YQ3s4m/5pHnHYq
DM2XuK5pQM2dN1n5q4wMrjEx012fjqYNMaa+mVg8gHbMVUjic1+H4ZN8S7KVR34Qtg9zzbzctTTB
BAKSKv/+u5n7xZneZ84FbJ90tj+Q+MfKgFd94bj/xSSnP+ZCIyr7w149XgY9EuGnCEvQQknr8qXq
cCtmicC/55a2s63f7tAORyLaZAOlz4SBUM47k0enP2pzRKfCZCcOon3l1pWOZyDCDyWNW8WW5N03
B8iisC0qf/Crb6equdnHbTHMazIJmyRjPTsYii0Vwo5VjzFsNGrDf9dp8LL54Uz7mcLFMTA8+1QE
QCssNfDAyZPgnzuzF+N16KhIiHd6yOVuPbbG2l52BI2YK/jBJgoIrxBvB0AzbnPLfnlzykLtR3ZK
aMfNZgccljtw7Oj077+5d+l1itRhGSV8HYYYFnMYiHb3jehedNazIAhNNAb45pVPSXqgffR6GikJ
zn2oTzQgNLYftHg3UMy/qxA2MBnd8RGK/U6NkPZA9wPhw8d58IMiOZXrHBfZHkL57E4B6vmnBL8Y
E4ugrXw+WBWhfnnGQpgT6t98GYDQxIuePtzrc0hcgUAjxsZHakky5bqf8OHZiiWqPfCHK0fP6WO1
kDcVWV9/6xnIPuUUKc3DSS5cv8koWrCtuQmydmEQalVMfKnngHeQVzvmBwDa3ba9KBjf4ouSo99t
8tlKzM+OgQ88ZfulEWvzXXgYIzbmTUZbIn9TzDpWiOX5/gqRiET2TD+ND8XEmxWXk+m/1MzSDKS5
MCSAeRDMPwj+ZasRuLGi9xIAl7pG8dr3338mlNS71duQA8fQboVCK3Sg39paH363pKcYyMPqW4tq
y0FgyNmgTF9z42gwm/0hBuLf+2X/DZlUCf/+9x8g2+49fZY6y3ENlUwiis2Pc2vYmK/yF3Sn3RNj
s3Ip/Zp1X7cHMx2OQvuRW1t0J/zLx3TaBXoCKoP+mwXsUfsLCYherFv1FTeivfP+1jcx1oF0qfSu
FjsTif16Qm0O0wS3PEE+i59StS/gQbCXj2xJi4MafvUtX9oMW9/+Rc6q6VtqfAuinXxTt98QZ9uf
z9bpFq+o8lZDlttpkof3XnkDMloDX3+16C9EGM4QuUMQ/PvvSHqQfQMG4JvBCQr3jkRjND+nzUNh
Ldz3mt86efePNt1RsZGmXt7pJHdORU23P4wLjA0rgbFrjcivy3hB+Xkj0z5lgOAalyUARCIP+cb2
nBXjeLTmKQSP6ZcyvHy2Coy6lT3o3lX7JERfFssWbA2Yi0rYZMa//zB1MIC9QVDS37EvueARkjY3
KPGz+TIIecAmctHmkftA9OuO5CQw5GfWjhdQ2Yzg5TlVH7KAPuBx8W92RhCvJaavwCJRxqjNU5u0
mRPfR9vWpFZJjrL0G6JiEqBsEQcgBE6KHrP6iYJsvQrZBHk+CDxe8CnQb4WMl29rmytBrP+C95wk
eoChgkwfF0iTTcLG58T+fl6R2gG6xdn2hRlrDS9+ZjpVET+9dHo2HhgAIKnRv//i6Ounso43Wttd
DnHPfGARit/cDdcIWsOzY7PV79c8f7/l+/L6x9S/xxARohGmjsMi+1NPtbAAD4q8irQiQdDkZ/ES
5QVDzKUg4573KwjkHNbR4Fbbb1yaNT0qIoD7BI/fslrQZMrzuY1KAj4/1IbhZvfuGNNf4pJRCTJ+
9pFY+tHcUDBLdVCTMMRfUL5NKqS7+MX42uqIsBeHSne/RF3fPgYZI+jzemIcx/BecI8DyZ/2km5H
uEK9k75uSMaOA6Yl6CwaskGmRqOnWlJNS+MtgR5PqQNsIZ9a8A0q2CKnqTO+hqmQA1qfBYuX38zh
6QybPHKx+FaUdFBDajoUlTU0SrIsvzYE6ORKM1zq32PNeE7emAotMTwi341yR7col7h6AAIjX+39
LTC8Ym6+JcgFjKa1YQDl8xXvut/ubChVXRF107+4pBPUoChvREfwTLyTIbifZIQyU4Adrp+4GNjf
Cvl9AK3jTxlRGMrXXWz9toWMQKDkLvKzhk1z/mQizpYKWEl7j8rhdMq8WejvGQYTz9voXDxhNTFi
Huf//iMS5xg/tvJ0iYNFVe6ybFM0wmRvXp3Y1lGJyB0touS1n6Z63CP4O2FOzHtY65mINMblK4OW
ZznewoV/b4DrRCirJG/oatMET76dz0nA2DOTYfyS43F1oZnvdmcejB+PHXZatYUTnG0RwfmGIgY9
Qfam2LRXXibPXrdAo9rH5rPCqipULhylWdqhSjLUja+n4siVFWIuTsXcDI4C2PQlHYSsNy0oyvnm
vYVgbzx96n8T1mxfRLlPSq7y2Es05faUis7H30lcH8cHg6NuNzjqGorIYLPMY4koVQHuYuxHwWul
CuxZ2gEeUTftRH/vhwTk1TGeyOfRUOmhfzMfIzkkyBuL6OPefAKYNJccGjh9C+67zkoeMVbHgT1Q
kdoRhNj06z4ZkgLwjr19Sjl3wzdNPJ2MupNAYPDM34/GSHN/TC3N5/qj0uASPpwqzhKia8hPWn+I
mUuttNoUGJH4J4tzA0Sw1xeONiJviVkSF0edkj689FhxyPVkUwY/da+GMql83E1o1/0wIGz/1D+4
ypACAY6IB9VrPd5cydJHuy0vW1qUKzFIoBCcA5u/5RnQ9XwzSEiig0Hr/LG+Pt7p9mPaLpDXyXvh
DjEdBhErNmvqWCfcX39e+/IBlv9xdB5LcjJbEN7/EXoSFvgGltB476HZ4b33PP1lbmihUIyGbqBO
5pdQdeqlQToKIlgfC5mDMkYOurblvYae5475Wk0WyJzGHZkN7vyZ6urx1TIuj4ZxeF4rCkfIAx7Z
pjmjxzXpr4N98Iip5XPhPayaswaD8tnLn0OcNH1m/bGOIPJ8ctVMNvQAG1BxqBHG5/urao59oxvG
5k8xNJQpiuz0kkOIkY/YyxWowQKKRZhxZmkDe3fxeN9xKdJPGis1yJLyJWg2Up1NtYIprdZVlif4
4c/tE0pcFLnJgf4lyvqCkvy3FD+KWFcKdwD2Oe9TqZDw5A6Oz6MewP9a2jQ7UkjiF6Cx9mtOLTbh
qx9VAtGpDoOzXVFFr8vcydf+IjtDxsg4pBT59Yy47UnKlljyBIPD8WLhZceE7PM1JzKbT1b+mzN0
erF2AOz7+NE/Hyb5UOKfIhELAID1Vy/DRztEufggnzzmA3FQVrC7Oyq+6HBNsfzV7CFPO5sHABNH
G3PV0kD/uJfeduPHy2tMc9GXuLTvTy6nSvrqIpatVxa3uxYcLpuBiQeKAdRQOavStb3bw+/761QM
yiEMQIqvmNC9nik/e7aF30st7jt6sWOTTmUeStDYpK3RpOGDo+R3or1x2BYZhNm6dn6lOh9CTyZN
uzR3B/iH+ugJptjnMy0MdqM4ciL+e7QwCLGENwsSqhuT4ARmWdRV5+cWHHbX4nUG2z8fg9u/4IDx
LPc4Op13oL/DMhHHPYvkx+ztKYHGP/69bldUd04yLMBRmDnwJtfB5IFc+k2ugaf9dMlvQKaNk8vF
V5r06s3OLzKbxsdrVaQYDerY6Ls4bCy6buetLPjbmRWHf1c0pj6fGq55aMeU10sYG39+QagmlVoo
QKNuJL6LQEY/dEfiD11i1G4CXuhSa1QrHgA83b///JYQDhSM566nUqqsE3n26w8oB0vcqP7IKZMJ
SyxyeIHzKNTFahSofgL+Mb6yXr2ujWiGSz3tWmba375jcF5AbuUBXyM/uH0sOddAGb7Wa4+MvoGx
s4GTYYpiwLw3fbi1NsTGgM0oF87Y39K2jHjkXCIGdM0/l+mW5ZXHY6XIhEEvbCj8VEL3WMIKYf/5
HwIfe4Cw+I03jdQzPxewitpvJ/o08p+a4AMoVrIwgYeOAv79J5Szx1UtES18OBAUGFYrAY3FqAj1
gx3zMkXSkvXN11iTzEBDlFIT9vNYdrcGz3wb8BmxGh+Hv3OZkn//gampjG1nD3/YlRzlTZHgaI+9
RuZRHiiMfqwy0vtKxBNgGceJvo+2/QETA+irXydPF+j7oNZv5jS8deo85fCbEx2K3AL1lfR0w9kT
Rft1faMneqWXIvjjpr3wsyGS6o1v69C4npt3JOabwAmDw+LmqSog8re+HmnvrxnGVdAPGY2qQaAC
RhnEpRgKXM47ozoQuj2/7DT80My74qsWdg2xjE/w8k0mUVyYtsBkVDSmvfqmrkLpoco1dMqJITZt
C2NrPUuYNkT3m2PQtZL6jT89YXQ1P/qwpC9cpkNB7uyNexNXcilgRKUrHeXz686SRUcdJDwa6E/E
HsGZWJiE+uycBxoJHv3tpQaEEbFd2wMcttTVZpk3LEX1VzHAgSDoO95QeOlojv7XV+pSpP3jAhMa
fZUixZAPp9yo1028jGkTAh8IHxuru2f+AB1NkmPgwXyXfBuvfa/MO9HOsW96Oi6Tt7JeF/XeH9PH
owH3p4Q3qGDsxy4DEwQMNybRGkp+DJJ1d+IZH6Xd0cbSATId7RkJ06d2SAZ+trJRzOvVNyQUN2XP
ApIra2yNfoXn2/f2fl1dfhMY7BhxicQfqAjYlfHd2aU3cFy77eKU6jnTJoxayfNb9T6H7/hSNCwr
ETkLw0UQxvhAchxm8TduvmufVQ+nT7VchBZvurmyFSY2zV+r8qEZ3YZwo/S5WghrdlTvPSO8/jtT
Aj1l6IDe4rgUA8u0cSFgoMicnGXIPhZ6HP6E6JTFJVh4kzlpyjTwTEagGuHHvDtXCKLb5olcn+jf
f9WVRHF+4dXOZIbg/CRwXWb4fm8czmL1bbzgrF4yOWPXxP0e9nL2gdp/aH6/GdmbeWTkhTthPsEc
NfSrIWHHaRGb90tP3cMFHjc5Vn/vnzDxEGs/SzWcJRTwcwvLPHReXlYLupmJqSDkxQ2zQXL0DdB5
oK5/b2Nh92iNb6+fhO6H/uTy4+rSMSR+qJyuv7atZNvmQ5ZdRkZuV0vse/xvM42zwEtk+FIPquy5
9WyuT07v6OX3JFKcbje0Mz/Moqne9HbtK84gVpdXFQh+LD9HxeoS0mcPwNFsRc4WbK7trUgWfz6N
d3VaocIyuW+dhvsQ0SRge6QMTro5G35fS7zDZ7x1i9qLkIE7uFefzd0tgTgjgd+DE8SR+VXr8N0H
xR0s83Lf4t3q12WaDSynbJ6zIDdTrSYSBJoTCzUjoxxTfLHEawpUxLJCzG1sjInsmKFp8BKaSS5n
4dsuUZqv7eKZ/P5WvdJ+6iQMuCdiGYZxrAZFdEIQvcIFBHPcW4NFpJPLOvJUbBFqeA46Xa0JbWc+
D5Cj1V1Efh4YvFAl/81ON5sSMnH8m3/tJmW3yO2ldqHAX38EFLt72XCxhrV5G7W0aCx8JtL5PTk4
4Se22Zw9rT9rcPGe3Kvz1V4RUbQs7IrSfOkhNz+ypIYkCk6tCYaOe6EdPY3k/Kl8Js7aDKCMeVGJ
AdHMiXpFj41NlQNC1E+aJSFe7ZUbMU0KkCKRH/gQ23hud+6r+/c5OnVG4GCsq08OOtpJ95R1Ujhq
aboYoyHPH3m+P3Y8oleDxHL6gV4mX4uK0l9JQ9P3WIWUfkRqVgO02Iya3QdMwNXiPClyuVLfwJel
hH+50e3ucDhEYaLLp3wdBS0magXfu+B/iciPiXMIvp2QFFiWnNr8gb42YEbnPIEElS0mlD8tAcQQ
ihZuJKsTCFIbTpFFCH9Yhl3NZaogPQ//9qjCh+LAzKwQweNTRQSK3CD85ro5pqoQL2CtMBFQ/pJj
dNu02YHf7ytJpiIuaXr6ZBYARyyR47bjUvHvv0XW8QlM7mJfBlKfO6fliya9G4WbzkLPFsKIjjg4
oLjRxNFvXeoKvr3zi7QCdI+B7fc5VBvIaidPCN5kxEjBK3GHuHkgdhK+Isj9mdtsZ4U6atgPlpQN
9wjUg2P4UZD++WpyfuwVKatYkaALFTBttBJZN9nveFNK5mX5QdMUqDRQbOBb8HtJb1jMWMCeXkZP
1qUFfArckNCkksonjWXAwVttg9KVm2+hUC7wxUO/+gz//tM4zPl1+ycVijes0U5U8aDoup+9oDBC
DTZBamwWklQugoO4hswlWhN2jwk0KR1Rk3wmKXpRD3/wAb6J8m8/QzV1AHjhKQZgv0j/zWZay7p2
An9YspKeubrf8+EwwdAaEypWugEEbWnCGMJuuS9820YRHjWHUXyzTIm2YN/Fs/uxY85ILuPcq+uC
HbCjHPPbrBigY+dZGBDDsNfetPz3wWpZybpgV2QwAoG25H8piGt68yq5cdTmN95e8avq6dRNua80
QcXywFw+vw/2uXmHLZmEbDmAycnOSLJxemnqo+ApXLDo8t4MokhjCmXefEqN33ZdXtkzDFqEyLAk
CsElPoQybFcsH7BTvVZ/Fhd57TxxOQjhCTI7D+IYoj/rWj3qLVGl4A2Th946lXKafPHW4NyhQ6lj
LRgqQHwirTBYud5QcGouByzhL1KKiozc88O3PwcXNTDdEZN5DAH1IC1xHuMm3lr4oLT5mfUiwYLk
IsJx7rAJHr3dU/aRAW7wJc9c6/A61wWCUKyhTn+ZzDiOEhQy789P/Tt3OEPA+V5ffgMULDfU5qBq
0/OcqQZ6PzLLDbQ52Ft0Uq0ZiQrpYCJYen5OsDNsIPXjrzUaH4x4/NHhwF9UPj/XP1/u9RUws8sB
vn2AiNEN+YLoW4xL0Hhu6XxJihM+eSg/bpHxf2nOVcJ7x7koZ+bi9gUonNEA0yNzxG/cfr/b1wmx
sYo50yRIaZ9q5Q25GBpp0Op0tW8cVMSy8+EtMtaCT8fJb00+HXEuO1n0L0K0+L2ClTs4voj9+8/s
YuIAjiD/clrpStwmaJjcBtqlmiVtLWXkDSVCY9A9F+iwmL0+ejapzgoSMqP904EI+xRL42WG9XD/
/nuO29r28x2vrft18Z37gVtMEMWq72nMzSliirpYLGW4ZVY4oEHXQZvS3yv216FxKPS93bElupnl
TXB/XR/X0L/N8IcP2ZdJHH2xPEQb1S82hRX5GEzriwaE7sekvcCN8bt0aqrx+yijw87CARQ2YHFm
8fuwf2srfpTAsfDHzogxUjrky2Tg4Mdr9zz7bjR0xGakficduFk4P7nY9+cu+Obuv4C/y56d9qiv
j85WX502/3YA39BwWuILZcVd3BD2Zi6Ci1CUOptf6hEabDahr42z6+o9AdttWN6elX2xZfRcKfB3
g83HwLG+Jkrm//5zz2qedre/98aorpfOH+DMlLT/Km5dbv1RSYeNgjqsOnGqEvGuUqO8Eb9q+8gL
Sad21vknIzOH5/jv0XTq/uiaqtqBqwVtCABA4fIQR2mImSXATgdm3e8y9l2E/E5YHT/bFyzUYYTG
q9QgCX/Z7c26E9hn6PWSKpE07DVNRGKidpEJD31C6ioKHIWAP5EodQzbWp1I3qE+Y0kENmS0y6at
5GqC/mwYFx82jb1ZfBr6dUB3krjP40YgSERPwVLR+KX2I8siIHsBMSRWvguTsWT7uN9ZPRgAjesZ
IUbJD1OrKmoApBP04m/tyeKtrFWU96VegpH6ABZpDnhkDWRXkACIaD6pSzyDx5xQUKX76FJQI3NY
tzbj3/q3H8bcbO1fwpOQktWe8vv3H4decQx9Wh8BT+aR47yUMrlk9Hm7u9fGX3sZntGDD8Ui5R/w
hsoIUAT787HkQ0fVBuH5nqMlBHCW7tUQDE2Kz/n3NCb/bGamvjdX2vqMPr99BgkJRL5J73PC/o+Z
duP7xgqxEIfTrxkjhM5Bv47+w3HVaOUUev6tIknFLmOn762T9KfJdB6nd/iWi5nMcrI3DPtnrtkh
NJ6ImvMl3C5+IYskxRDEC5rSlKzhj9vRIOSi/p1phSoTpc6ojwfznGMefqS1BoCkgA/0YDUCy1M3
eebZQ8RfSlNam/aU6WJE3w750elMDSteN9+w/M1ZJv63NpWcyubksQpauMsU72YHbwjFdS5ByERe
yvvKPwpfZZtgx2qT7c8bA441r9o43sHwQ0EAX/x+wr//bgtETIHDe2gf6jidymnoWxQNYZGSHxD0
UvHavBaGFIMY5BGqlQv2IIZWPbY9GU7ZdsSak1fuDHW+33wqj0k58JCUFH7PgQxgP1NaE33oE5Ce
Mcc+8G8Av1z5wDUSmVMaslxQlj1FqilgtHrcG1VzUX00Qf/2IpFkDDX5Mg8fgEnO9WEB9lprjUmV
bBxv2V+tKVfO31KQI69loPrkz9e1xdYFjAFhE3VOerUGLFAzmX//fVM5pJssXXFs8XtLIXhV7A3u
9URyRmENUmgQWgJ3/p1EAUkulJYr3I5dskcIvA1qSMUGN/VatCWft+pl+7TxNY0+yB0LRo9w3+4I
E3AgtQOVF3NjRM5SVf9qBb9vllGAnJRSFyZTpvwbx2ep7CnJ2xo/yX99CRAEvKqaln85+Hv5Vahl
113YCm+FbKqil9YEEbkNLIaOVDrugwuoyFOeQwxrkLd+vVpmreIqJhee9pudxTqFQHWqWYrhVL8Y
go7WoM2hVpKyqEX+AuCzWKeWFwzgX374hlQLL+VPCPlYEbxofAGVvfV2Cu+fl0PQHsSo/cOLXNC3
H/Gi3MT8BYh5pWgUxiqzX+h9rnc2bAfn7qt/c3z03Ohsrh21oy8apQj1kOg2EdVfX/fqE2rBbo9f
9cvXmkd3O+JsENabdybqaZukpTi3Eox8lUQvfhtfLkSPRHDrp5nInpdpfj8ocGkoBb8uI1LltDwz
NxiKvw5GqeAPp/UjT7cECWD58CDpVAhnU0TwqhKOi7VIR6ZRXWmlwo9aj5tl+kuYoqTn/nWZsv+y
XnopNj5EVGp4GRB8dlg1NEMqJ5zqQa9PgR1CenELksye3oqKyAnJ6fxN7n7ZPcOkeMdCRG377z+c
A8hdr91lgYl+G1s0tHDnGg53Y/sJrx3Gc2/tzkJzlZTv3H4tcQaDTr0mOqJeY4gA+NhjC7u+if6q
JcT+ltRtzK8rkKSJ0EvJqFBe2uc61r1bko61yoaUPLah0PFacQk48SWJmGkFTXCFzGKfrH5jiEFR
vtn5R36fZ9IsixIzb09sZYQ+fL3qJb1kFXCJAF2J5KUqo9fKYSzYLngqD8KdLXkhvDfP8LjM/l1l
Hf83b9Dsa+C4zN6xbHG6ze1NkwVUIAU/klfymuln0Hm7RMqbx364Xlt/c5/sWkdp5Gu8x7HQJRqd
uGHns1n/3ioGZO4QyP3MglkC5xe1kvrcG491Db9tdtHN7V+2fvnrb3f4Xqk/7U7Xb6JW8URtATFz
MSEYErdiW+3ffzmqD7sEC0GQlzHHwUeHBux4U5aNfLc4nUXVFP2xFvHP6JOsWNmR1TAvBUbLvt4G
XlF4DUQQFEKK+uasYKGIcZVaXc8TSvtJ/Zcr6xmQXzgLfcc4GYO8A4Dkd+rHlVdMAPh1LsRkr6mt
37Jmn6IsE4TZH7HxsqWiegZEWLc/Wuw6Ufu3s4yjujErwdMlDBFdbQkUrXkM3oAHB6Yv8CQ6L/b6
7PX5ZUg/1iex/QenSWa82bl8gWXInYzPF/9ZmwTOO8mMAPXZ7F1htpNQtHD49n5xE3pqlcJFcp1N
K0bUw1jCkFKY1/YqBvgbQf79ZymTG6Xq0IPI3cgHpi9eyAfgloUc/arDr9xLovQ0I/dw38R8trqf
UKbhfj+cdP8t5CeDCJeB53FN9H//qXH4GhOhwl+NvFnpCdZ2Qm81Rm3JuF2z79GX3iAn3G5AQHw/
7kYUllCTUIxBag84mdBUs/B67yR3ehXpoToRmzTkLAW73jQXlpfuyqcyu67BTiyOT0VDUiCkVdqZ
FVNZeo+HrmwVJqe7opOjm98aFc+G4I9///VgSsXc5c47ZbzYzB7lclDMI2E7BhplHEcrm/bHa35f
SXCCHEZSipIhnE/udDZNOSwL3qdwYNVm+9W3dihZs4QuRPH8is32JoBWvXApCvp7+k49DDPTw6/q
u+fQwOakz8PyvZA2jzwn0cbzN96uDSzBrgl9R+8mSd8bdR6h/LUcfSrOZDmkfTVIOu5M0gErfcqI
yX+t+dFw67HdVajxR7LkFUDwX+dhbwDlpZmuBffP6/OT+s1oE3ocg4cmUGliBJPXIgb2XzOGzK6l
4gecHFB0Y2QAFvQloUzoz3C9cS+r9pRL9uPEYpAEpPeeVgwQWNqUPRTjiNID7QpdqSkfaEzvSk+M
sH4aw1wkUvOyzRvNFHYNx/yREgTdCyTba2unlnCIA0f8asgbl2HSFb/o7is34NSowx7oVBI6AlcS
MbXPTRDpjH5xYkSq4oEo7GBys3BZ2TWE6iuueJL+vYqo/t6wq5x+2o1fjzz1k/N7U9UAdm15oOZW
/7DqauQcOaD6xi+Ci6dZ7R5Kgf3UmATIYvYoRip/tOem43Ao2zveZON5TqhbMArSQ2FezMLo2rmp
utd+jaabX+srYds1osmGVR58wGUQtZvWvuC+I/D9MnUYFs7PmIm3smB76gT5N2r1iFBohM9q6t/x
aC88g1Qe3g5Bho1U4bhfnDmOM2SzbmQ7Yxf/Wi4EJR7aWK8l+VfNXPg90/KD+7APb+g2ULeI+n2p
zunDQ6uWfVoBPeD0Grnj0q9TK3rIlBWtJoW2+7EYBkVy+F3HW0NXJ3j2V3t/sAaa+Qwb4Kg5Zv/m
GTca+ourqICXmUEVpGaoIPcg1FmlQxoPhTv22C5diJNKNEuFXo7O+CxDtfWlGi+B3ETJQ66sAL1F
CcudPphFaCzDfIzhK+MHZC49RkM6G3GAUlPE954MwDdMtFA4XL2L8VmnMa6g+SV899JM12+fTx1c
UQMQFDi/lDBnkElboHE8WeRMKJo/lvHFiulH7y2fKBmFka7bnBRRGbxphWWOUqPy0uAkUaTlZzUF
gfQv+BzuwdPD5ThEb1DmijgfQyAWHy0+sDXXvDYvKTwwFLT9vBWJspItlcwDZTqqJr7691915L0G
cyPC72C66CqyIoNWGkuzcLotdcKQ5rWFIZAOCDicUuxrkPXPYa++/+K+imYy3kl6xz9SzBdvLRAA
dwwfN7WGxgrbE13kjmGCIBjS11cu0ODcOV8UKSjMledR9qAA4diZWZg1PA0g6KXp36V3i0D9PUcK
8S/kwAM2DoYAaV70s1rMaMpHfjpSx/uQHvJFdDhd+ZKytc0KZ6YvAlGs+Th9NKu/cJ6ZTzIdS2j8
rSluFFQEyQ45VrMP6t9PZdh0NbrppdaxiCneIBgoDKeHU9EBJ3xJ7eIL/9k/4gH2dEDCK8mdF03w
hRn//adlGioZx0iCISBqZd31cVRsuyiCxm7idbZ/p927SDVYgD1xjFLnOuKmW8mD8UdFPtrPEIdd
9hvoQed//xUcD0XD2SAcyzP3tckrKDGZS1Kf76XoUtdGd9ZcjPBhdW8ce+roqeVNWj02ZVufem8N
mhLqcYT21MO//+KBfFMXJ5vQqWfJ3ubG5rhuS0kgm5ksH6jZeD6NpNtKA4ErfDKl8dPH+4DOGWXX
IDZNv5J90LGLH/j66dQIxE/8/8qp5Dr4PbA6ynAEd6JvnOaeLL/xN1kg1MhV28yd5cBoRCmn7jv8
GTv40JxGrxKzTY2z/PuvaT98eqAcBArIfm51gqA56ThhLaO/EtUWi8Ze5z3dbaiAr3CjXKvhktaD
PNVj9mddPPD9rYwfEi9v/v1HJYnmSsqTTiB2JYiYfLZpQCAWT9YdsLa1qF31Dos2d0ZQSajffvfY
W9aFC2mlt5noN07Q97+kAji9VCOV7XBdEMN09aB1gndL0ZelwBF9h0efZg7BIMhvOdS0i7PEETcI
ejQ2z3hp58/kNUBMFSC4v6WQ/OuiHHOxZneCJncN8daqRAU3C3GX2lY2drJjDXWS/R7CcD7Tx124
PisXBIuTGymdLQHZADi8K6QnUM1/5JsXcsws+av4LmcMYIlt7SQuuKKDzvGl0whUTE9XzxjubkzQ
W5wr2EUJBID6QbG9e/YLeKtszumxBam/eao9uzUhiwOfDOzOoW6snSeGXyEMtMdxO7CFn6Oux9Zx
fX22E7mMBQ7A8C40xxKSTWNsuKO4lYKR/7pPA/JkBBGBJxFdxib1Mp8E8+CU6glxq2d63/o0lSZ+
O+t5e9VIbD4UOzT1+cSGj3tnhmDXK7c3I9jSmxfUX/2wU9mvWqxP7ijASkuyn2gq0O8NGTuPQIYw
1wP0+YLIHKrqhVhSu81IGNN+340lCGdP7IwZ63bqSw4sXwRMhkjBEk4ZkyNvjn4ukKicPZdFukPd
wbI/3YGuCYL3hgauwKFeHYipmCSB9lZCyHqLg5f84ted7RgjzQXiZ5J5fsvm92r49EXgADu8U55Z
iivqC1fxuxKORUV/zW671XSRb32GgzBVleNG1pBlZyznHb3wQvdhvRW82tLflOyzbdPZpKA13I5T
c1bgGWkhtEL5qTan1TLZ9a+lg8RdFi0JHGsrzClkDsjRzvJm5+ay8fZp6obpejDe7W3ZR4EsStYt
cLfFxGXbW3d65cNoxyEwDidHf4fHGIZAof2gxCGvuklCo+ETuf/+263L1NsIUm1QFRPAdF5lgPzR
t2+il1GrRNMnDaqqrkDvF6+4un4BbGhnqkeBRwcXRjfXPdY1Ul3+6pQgFmcIMZTGdFnr0NJ6NL6u
4Worf3wS6q1wiXOic9kTqOae5zL9kTpr/jHmPv8eBR68U+InPDoHFHreLFN11NVf2hbNHXZ+Rggo
wP2bfo/59kot//xgHqWcs8PtPOIMIrAu2AEgiZpfCKJkzjEIMeLxCUgJ+K0Fwh5yYmWsr3jwldoP
oIAnoMDuFF8GeDUQjG1T4SGxAxHB2zHvbl6ZgxpX12VqbptS2lRE5iHkobe83w3/ftlNspcka1Wc
tHeXc1yBrcuaJELOgqiMHfHCRf3dBD4smoKKy4cNKokPyMZKKGeDWrFkgXSK1dyv1xvblfvf4KwO
YmlQN38KqyMEv+vH+CAKdFQokPjGVHlpX91dwsog4tQ1i+EQVKSxf6YWtqwKF5S2vWf6EnlNgYkp
31Qjy46Yfouo91HkR9t8OFWv2qPogxLYDyxzHQx5rl+8dSojHoZtnijIMxGGc7SKb82+4+3w8u0q
ry8YKHoZ9jCEZtsdajwJjvIbJxvsoOn9eFD3wrS4v/h+qhAiokGMK/sMsSYBIs1L1nTK+escm2w/
fKkj4qBW8HiBYAIoCPvBH6+jO0BN0ICfsl5FhbHaSdCU0WJAUanwYonOJ/nEjBsZo31/oT/9O1PT
HbJIx4LHlZxu6DuQcOyzG8yJopFuJgDQNegtPo/kQy3JB0LqTqq86FVOiQhZ1c6cR9qNuW6nZnmT
kd79jg0SbsmhN5+vKNQv9nwDbkl4jmV+cLu8/Ccclt4q/cw+KBwLQpHCHDCaE2m137Qtp5w9Cv1Q
/M2yZl5gcTsWW/Zh+c2rmOHlKeih+ovhkuF2/Medyw1osrTsh21ARtEThMeBdsB5dx5MUoelGYxl
SlFc//5789x8+MsS4Jc6aPoXMx8vBtofDlWpxhm/rSkCH6RzVJVSMpEpumxRTZqf1d6bEvZnLVup
kCtslvrrN4gA7HbvbjySL32ibQwcKICU4XWlyDENaM9xOuC79QKwUCjxtyYOehIzqGOFAerCItaq
hVMUrVbhFPbvPwg88Hv2PrMUWCD9EFnLNqhnWerfHCKSotm41j5970X0kuk33M7g7BarYiPunxzW
xA1LvlmuSsUuL6ny0lSelRDUXOH42RGJcoN5Exbg4jzS2rGOaYyrP4QKdRzVnsK5pjtIi02n03jp
zze4QGTjBUncF4f177/5mESMDJM8Bzz2/UBlDhAcieCTchx/YWfBSLCPIvxS/sLpDEh+IqZtenNw
F3w5Usy0XNMApsIbHvvWqbTAIQPvM4z6wGwU4ZaitPQUHd0/CTzkgpNUfqL7IUe/roGfLhfi3OjU
VLsKk63aywkCny5EJsZAiH//jfVF4waJO3ePA2CWYioJAnpW0blFL2wXPJHTk6luEsaTWyhhBPNe
tN83Vv3e0XMeVKZyllITU+FM0L///IOPt08MFndT41vKaftbcQyXVpWfRXkoE7/o4jEIDO0DaI2g
jkCqP5X069x8DhTWdQ7MXPteJLvb+914iFIWY2TtBNi6Xz1v5ZSyOeUfNglth/lc3ZpnOwVsqesA
vGz7KHsSKh5KWWzsh/z+pJc3wy1z5MP+rToHxjtchfx3N3JM6pCXDkOccfiwQk16Bcf6i25U3PP1
JakMPY1iRh6d4Wth9EkKRb/U1+jcazoC8/V6iKFhkoDyum5Jnt5RZAUz7zLx4AEDf3Tt3QwJ6dIs
bN52eBOBSOAw5WGLYJeoTxvmkOpGTkYMxEUm//5bA6PRYxWv3K/vU+JsCDBqvCMwMEec+0UptMlP
lOhuEMY1zm+Ew7v8l0TjIg88ve2oRlxEvQNXDqTeJK7nSIpOiu2nGNfNDqUruJyL4vlsoPRhOQeC
wcSZNwWa5aauBMRk9Knrjuq9akixj1LBL2cy1qJDmea///JLhnF4d03y4POdwufgA1T0Z4NfMn4p
awkb17U8TfeFsdu0A//t3eei9q28ZrhBTxD6fWkSi9LwK7331D7kLKeO5Q1HCpJHCZtucBuSH+2I
SjH30+dHxjJEpKD+Y+il6Iwntd6j8S6+KSGSlqJ3RKrkd02dvWdKX0E0m14twZkMwm2pJ3KkISc1
eH2DDsrF1Sb0UoFvC2ZhaoZDShDDzgN6oGTe4D8JgLEyyjq72aj3nvJmTsJna332MFPmItas3URo
SPCaWzh+q2DMlk/C3Cl51Uw0yrp8MTYe63lsKfgq85qyYlGx+RmRwJffOqXVShD4ZaaXuKqTiPLr
+eH3WXBw3UbhBivcBd/PfxYPgSc/t+c4dgqESqcBW96RMUa5SCW/YPrQ710gEwUr28K/f0mr3AMW
fE0q//idMjNOFgl0lNWPrvsiHTdaxgGacONe8Fv8Hzdq1scq+QqAfOoZPm8E/vdfyQ7tF4lC4HMy
0TZ7UPraFDCc34CoE74bP9Z8Er/H7hxUb2Ri5G3pSLGIzPCJj9QEJ2Wo/C2fTgql97o1grRRvR8C
PGUCYP/RxbjhhDanJ+zhLrJBYm+QX5ZEv+kLhjahh2Mn6j9qBOs0cT6v/h/pi8Ojzg/C6wuC5al6
WJhgRdBKgG4kkvHc6Fkw8bj6yF4haNokiixoEA3XpuIPLHLzcnnVp9T565oe0p4j+sSsvxlEce3E
7z+UAvmYrjQE+W8ScRcpf5ShNBtMPU0UWcaHHyMGG5oCGIahmeCBhtacsN1vyd4cgVPPyxRp9JID
J7BekNv+tA+TR8cJxIvj0FUTHRse2ZBJW0RhDnyrUNPMMKrm55l/+HY0EL1QitS9SZI/VLbUa+p4
0+7pjjtAHkhmajGS/BjmHZqFTtqT+6zW/akcaRI9Yv0ZBwlkmj0H9SfJlmVyGvdMKrFQriJUGRK5
q/itLEIGPoJAVZ8UUX2oV2bVneBKTU+svz01x0gXHhpwF7VeEFIHjxkLGCxm97gF5JbJWIvc2f2l
2FNR+Vv5KIS0FjxvFo6TqlmI2XoDXZDhJqfjfAeO4LRFV9DpVeQbRUwHBn5DGaGmOZaevXtcyQjZ
YdJeVUX/reDD2+BV9Y/y4ZDnvYEUnAUxkATTRDVvGaSyMyQTp2hnPH2gERHkw+6ZIe81URsxvkCp
FVV8r9OJvw7PGZ9PcAw/mWCrAHWw+uem+D5l4TXMySNZLGky9YoYmTtr4k8mm9JvP35PS+3wd9xM
BsLtZX814QchfyvimSqUqmDU98Ngg7iOxki7NsQ3ZseWS/UTb3MhyMT3nIJJpCVG9SN8EUX2XDav
i0h4+QEAH0xy2epvPlU0hG4Rw42YrI/uBo3kef9+sN45zc6qEQtrLfnKZ/QB59EmCv6vsZEV33uV
L8Act23CswbbkY3Czq+fonnHYU9olaaEp+zMzOIFlMmvfyh3nzY3zAddZ1TIyG2GYH10gXdCwjFF
Du61hp79c37IgW/sivGrl2pWVWjbAA4+ZV6u8zsc517dvX748YL83VYS70ZAlASC4jpcw1YdW1+D
GCq7Yz5USQ25sn+6k/6QnFtTb3belyar6hdoPfyrVNnyMb5+1PPhO8i3u0pUTtl7ZcJLEy1Ruja5
zG8YoHpByzBrUG9lVVsibMdnYn0dsFLK1Bt8L8TnQUlrHU7gvH9MId8VLCK0Nz/luWQVifWtNd5/
lk2k3AkCpnvqqL0JOfNbqBLzKZPob7fB5DcPvA/XG20RGNNd0bTHD38A4dcKYHekRk0dmA3Ey6DC
oI8FbWnlaMy2+mxphPkoth6rlX89XsK/N8WyjByj3kBmfs7ll/flxW4fcEKIc6XerAv/ptUO6h0W
bXnQym9CDJ6VaKaha9n9pNv+kZyR4xk/vYqXQwR1zlShKRkXsW+6KxPUQzfdgreGeP/8GkiJQO/N
f55wVSXvR4vNdkjkdcnmqnwyghoM2i30KRpuq1/P6q1tC/PG6lEp4Nw7mWc6QDAiEJ0IknI442qc
TX7XoB4rlw7Gbec0Udv2dc51PidB580CGi6nz3mvvl29olwug+CJ/+Zf5XoH9uEDYIEWUbTJwy/D
2pEbuuiWZHiL0YaGCd1Y0qxw4xLPo3Z9dg7A1BISm/PNp4t4sOkb46v5g1EXYnZChPLk7lNsAsNp
gHivcC41L6Zit4Dbc/b55DB1j1zw+ON0taweuYjgYJF47lVLn3nUpjfz4bdUEvdd9SYswd5k/Ibn
Hf8zvTrlch9ZIVsuCHyCZQdeaD9NqYLMg+SVyocaDoY7FtF/+9cXYYcaILaOtqeu8kCQc04y2TMa
FjmXuOVK7RYqlLelff1RWq+QxHopyUNWkZ7bvhDgw30PQt7Q/tbXZaQjqHUPE8bTgk1uR5fpDQOQ
TdDHRMs/cOHmgsXv/qx4OXBiz0jMWIxNAmcRxzaoxdG7NETGxKs1+d9/1BdbeimRphi5qT3hhz50
hYcvi+4LPP1Xq0hFrAt/bmnKNnsBXjxAitdNeXIM2RuokY3bKgeMViNQe30BjcJlBLrry7HQpRfp
Fc2TsPvPLCn5A8UtcnDoTuogsIdNdOfQZp0N0AVcPK3m2rWGZl/51P9K0f3bC3i3npQZoYwyHQdW
mMTejatfDzq8FplPPMEZQRUdWrE1hPIp8wRlYbwChBdJ8C2mP25DHdTDWhKnm39zaLtZjfcr1p+o
xLkD9MYOinSl+Z0Gdcz+U2nrWF2NEibKNdvJsNWHTAmR2CTpOjBhtyXQ9XRPIjOv13948+tmx8YC
mPXgBo1aeywZIaSXPJicRNkdyxaLpm+UPQn/+J8ZZgz5TSisKIaq+6iwr9V2R9iLbgl/K9EUgYbX
F18p2K/66XEa/iSIJD1S44enlS0/4YgQ5MihaJIUceW/nHClghMkPUesxXJS2PWlWWiCjX//sZs1
Pe18jPkE2CvBExumfwYe7/m/TlMDFWmyzminJLjxD+bsltyCRK1NzN/OYt3BPOB+TI9f2ErYr9fP
0/u3q7lsr4v41tCgEy+4FgZLZIrnWN0M9ThYnGsCuKkLO/3kU8bVSEQZAnnJ480HSKaaNNUxEP/6
af87aDS3eGowV4BpjHY+KcTmNudBRKBw4U7Yd4cCwB2sPlMdtPBioKHVOeccqKiB8Rvsj4XkWY1+
vIqU05IGOWf/QJIzuKadq9DgFB4XD/09fzn70iaFdqvM0sOnK8su7cBlYNw72kxznRhR/86v7d2H
78cvh7B2jpP1aGwNYMeCIH0Jku+AdvcV/Dfq6LNm34zTZT8xhhFAi1XraMDEjSA34AFzzuW6rJIF
ppQn/mZeXVsjsLOskl6ZWQGdZ6hu1btpvNQ2hUKikq3QavY96stjTtsXfBpdZiFGdNftJnvvt1bd
/YiIJrDoSw5VSQpK0WBEFOAjSmKMz4D98TW+Ldz6BncnRR2Rn5UpDnCv8/Q0E3XIrwJKRrNnUcq2
ZiJc+vyemud157QJPOivn/N+Y/Ac5GMosQFtPyQKE2Ew04/4XeCHUAEXWW+HVvh2IiwIjDnBXKHq
TFGe2bc4pcyu8f79Nx3IXCT1pXzBwDAkBEjroCdAeH4zyWdllc6fA2zNWFGsD6F90XGYti0zxKiD
0lxsbREpQvHUzciEhr85tDlkmIo31a4wMQ+6rneUuBrmLVCKm7q+fgJovfv1ckpWuF93aj0f04+P
rRja/EC/84k+7284hJC/avm9qpFf9SyTigmu+7HoArCYBv4D2KD2FJKGWyOzpnQqgxO/fxNa9hwn
1gEcdCDLB+bgIsm8DrrSib9/z3vn7Q1OyWf2VWyI1a1KsUySnYmAVyLYcvdTrs1Y8sorzMMEHMIH
2A5pZgfGRBy4StxJFdNPf2t+9qa2Iz36Cx9fHfCdnk/TXbZP9exwVZz088beSsIaybh16zd+f8o9
55BwUwBVfkVDQF46QUDxm1IcuIcc8FI0RiwszcmIQDdysyQIgkCyiTezpiJ1Zne3OwIYU7JzdxFg
IN/L1ERqBtEEjTzHBPhiexhZwKO4Jr5+GiDB4nDMOOifq9LQEsJrP46kvn3wTEAxLMblegBMoqSL
pXQxQeN2bqJntHcw2o4H5Kkk1KPTSA67V5HqfuA4jfbU2UEVCkRBdUIN9Cf6SklScMoJlHuiAh2C
wkjLRsY5k3jXW0HCLmdWyFzWSnYvI4U0TNT9+w/yaJYN2378DO4TmXxL9OHPD9cS2loBnoZxQLvq
kyTN2L4Z+LC+cPC9mcVQzWEpmr16r2FV0xFgQj/k339LJQ+3/LddUUzUxIJx4iUuutdHoA+pzd20
F2Ar8heypCADh+8POokeLsUvuVudFli6mqdvnKAL+NXcN1HGb1qqV14ctvdzscWPqMRtQV4o7tag
73qgNFbMp0iTkPFs94FjcBgNQcokjxmSju0sm8MUb2ql/9w5UmU9sNX0uQrJ/fa2+tUhUof7Miex
LAZmtgkkAlAlAE3rETq1tYhZI5dVy1DfCLioJ0GdZhu+F3IJXyVfWGfzR5OFZfVsRi5ncBB3Pjdu
98jgZI16oVaTgarN0iEn+SzGwJtKtLzVW425SCpVheYTqDQebm/V/7V6OgSFfrPCR3Z3RoNoezZ6
sRvQiHf97qZsmAdiUcoT51XLbmHfkfRVdlMBbX5+eN72yKfTTiApg7fqzZ8bjC7gSvKIywtlyUp8
NrGMC3oaIWK398OLr4g5gk3JH+dFm951QV3EoIJLbYuUzfibcuDsbx3Ue6ZFqJit+ECVTrOeMCxx
omltwXtqGJ2sM/b+c6k/G3YtDoraz6aV/rydJDLxgDCTEVAkCo9JkI706vMSl5Oq0WZUXPrGglzI
OosQgRtLwlSKQpWPHFeSoApPutRjjsvnOGn55D+DOMHFa8HzUy0Koe+dpjl/u4LGd9LggWG+kO+Y
7aImylLFP5cc3HA15Sla7WUdTJdu1ha8JxsbkqzFf4fper4EfFHfbrn9/FWvIhHY6zJjn5D1FJU3
+f36PAGhkPTXkUiSdrOBEfhmLYc5dVQDcClayr2zDNgAU/NbgQQXsqnHVRqGTYXnkMubZfy4Idoj
s1iruUEk1lX/CkkVUFlrVfZYT/YbyQ1ihb/ggiHnZnXDYhmocmu429bxGt03CekroIzge92oaHao
sL0g1jCRhTYz1rR/N1+uylDCHdoDkIRS9eqFy6TCeRZunOPbcL/pv/pbVNxiMUOYovMjR9NbWZpg
PVyqEQse/dLu1LxNrDYN431xePh+FmF+A7Hk8yawbWny4fWLY9rUOnN6GGPDYxPTQJ0/Yan2y+vO
5fOqAvCOKpfkw308lMQazfE1qS+TcBIvntcGGMxlMLCFAN9PLicRFVqvxAMbGTLbbbAOZG41dQcU
/pKq0bbXlhtGErf+0sfi4hsIDTV+foxH+qr3IrdaFjm7oF/13yPGmUJpijXA/gep3mKGLSaYAWBJ
0d98pGH4Pu+pNpsYpMmr/gnbWB7Qq3WPeh+BVdn7KSB8GtU0Q+99NlprHT5Ps5QNtFyAGiM1wCj2
JLWzYP37z5te6Kbto54Az5KI47P/Cls7RDiu59P+LYZEq6PQrgHPOGS0f83P/lZ9mDnxPRcTNJiU
YtfJhHkS9PKb1x+w6oyO0L4hEYijkjPgJ4xtohswZS4gK4srFD5HmSMEjnK0Bh6fH39Rg2aJZVtR
LBkmMBFUXfV13kS5vG5FyOm3X0ygUOOXUkSbw5qN9J83PITYwnLnm6YMXMyDvuM4E4+zHVUOHgMU
J5sqTnfC7ndqKf/ymxuNrav4Rei13q5vwAjLxVzUARKOfHKhO8d/DCgUVD7TWJJx6yc/jOvOqISY
A3mMhFilcho9nu5Vmjc737UEBYnSz2sjStQwr6IqfJrke45nA5axYn3Vo3cxVnKMgf0BglNN/+vt
WlZcx4HovqH/ofdurvyWDN0NfsWJEyeOk3Qc7+zY8ttO/Iqtrx9nBu7AbAaGoREISoI6iDpUnVpI
cs/4vhSFR5uXVgnleS9anz1nZsgpHGJW2lUj2SqDizgbIslwTTVTfX0K2xNn7lvK9nLNzMJhub9V
vikm6mVZTFpM+EgjiQvAjfGMYSfNdaGrAEnZyarV6/2cBhoEUjKrw3lCJj2dLla8vqwUhO1hosat
sR4yyAdRn6494WCZrOMCdUwT9rKy5ihs7WqEVw3Nna6X6KujObUPqqnOY+ewSw5m+wOdY6LxGojP
9s2sqYFrGAZRmBODrueZiWWv+XA/nogzvr5Q4wOgiNlnArC6O2v5h1iU2UlBU7y8fJsStruI5qUh
zNbWSjaBeeSTRqDsgBqvQ0BoZvK926TLYVc/395cyLnpDV6RV4QBykPV01ha6IY5rnUvE9A5lHUl
YXDMi0Bj7pKSuyAcBtKJLVC+l2ZXnCC2s+10aW9zDjk3e2mkQrSiv7/5MVycidEtTvHW8KdjhmjK
IQJEsEugjy1KlbE7ahqRWmA221k2UJFtbSneoajs+bcXJuf1jSt9tvfwssFzI7PYyVQMH0cKOW7h
jPttDeaWpWRzGQ89MWxRiozSp3BqrFzU5r205MXWwWQ1s3e3iBOptw3AnLY4k9KKCBJVLjY+TS5d
D2W/te6RV91UJ8nXZm15O/0BSDLu9yFrXQVFcoc7yO0JIyy+vhSz4CY7PCdBIFJxkMm7LFcZBQ6C
XIxccXeR2ORp4bBJqtO3lGyUsrpIV2UD4D7EUh3AI9FXeuRW9lxlhm2NywFJh0N+kLXSmIvwMOSa
wQkY5lO5vuBDo1Z84kCpozh0FuACbFoIducks8d8s1BDIAfuwtS5503bkl74ScM7R9mCEYct2SnA
wABDQX252mxOlsPmxwkUavEYCwJEeikhooB+YKL8obYzhdL993JnC8tszpasPd1ChLsuUORNVLID
f1PtCMBTgDyJrJRid+ius/7mIUKXgAXo7uBHfQRUtiJMxh7mvto6NKhRBjDXrGqJ4BEpnubDWr8p
8kP+/ACLuim/Xl/e3j7kto3KoEij9k/775Xpq2yvdVOkwfvbd9S0aV198r/o53h/U/ui65vos4r6
rvGL9ze7n31c19EsyvOo+gwg9IWrIDISx0c0kj7Ab6//RDlMbReVP4Hx65xWYf1ofz1P3/4IouZ3
/s8ANf4jreL/gkVzeGY9ZphQoH3O/3cstyx+5Exq3UT/P9Bv8y/KfwAnutZD1EzPWH39AfjBzgwY
FgEA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonRestartNow = New-Object 'System.Windows.Forms.Button'
	$buttonTraceroute = New-Object 'System.Windows.Forms.Button'
	$buttonManagement = New-Object 'System.Windows.Forms.Button'
	$buttonRemoteDesktop = New-Object 'System.Windows.Forms.Button'
	$groupbox6 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonDrivers = New-Object 'System.Windows.Forms.Button'
	$buttonMonitors = New-Object 'System.Windows.Forms.Button'
	$buttonUSBPorts = New-Object 'System.Windows.Forms.Button'
	$groupbox8 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonApplicationLog = New-Object 'System.Windows.Forms.Button'
	$buttonSystemLog = New-Object 'System.Windows.Forms.Button'
	$buttonWindowsUpdate = New-Object 'System.Windows.Forms.Button'
	$buttonSCCMLogs = New-Object 'System.Windows.Forms.Button'
	$groupbox7 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonScheduledTasks = New-Object 'System.Windows.Forms.Button'
	$buttonUpdatesHotfixes = New-Object 'System.Windows.Forms.Button'
	$buttonServices = New-Object 'System.Windows.Forms.Button'
	$buttonProcesses = New-Object 'System.Windows.Forms.Button'
	$labelSMBShares = New-Object 'System.Windows.Forms.Label'
	$datagridview17 = New-Object 'System.Windows.Forms.DataGridView'
	$labelPowerShellNETVersion = New-Object 'System.Windows.Forms.Label'
	$datagridview15 = New-Object 'System.Windows.Forms.DataGridView'
	$labelLocalAdminMembers = New-Object 'System.Windows.Forms.Label'
	$datagridview13 = New-Object 'System.Windows.Forms.DataGridView'
	$labelEnterComputerName = New-Object 'System.Windows.Forms.Label'
	$IR_Computers = New-Object 'System.Windows.Forms.TextBox'
	$labelCollectionStatus = New-Object 'System.Windows.Forms.Label'
	$datagridview2 = New-Object 'System.Windows.Forms.DataGridView'
	$buttonHistoricalLogs = New-Object 'System.Windows.Forms.Button'
	$buttonOpenReportsFolder = New-Object 'System.Windows.Forms.Button'
	$progressbar_audit = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$labelArchitecture = New-Object 'System.Windows.Forms.Label'
	$textbox11 = New-Object 'System.Windows.Forms.TextBox'
	$textbox10 = New-Object 'System.Windows.Forms.TextBox'
	$labelWindowsOS = New-Object 'System.Windows.Forms.Label'
	$textbox7 = New-Object 'System.Windows.Forms.TextBox'
	$textbox6 = New-Object 'System.Windows.Forms.TextBox'
	$textbox5 = New-Object 'System.Windows.Forms.TextBox'
	$labelDHCPServer = New-Object 'System.Windows.Forms.Label'
	$labelSecDNS = New-Object 'System.Windows.Forms.Label'
	$labelPrimaryDNS = New-Object 'System.Windows.Forms.Label'
	$textbox4 = New-Object 'System.Windows.Forms.TextBox'
	$textbox3 = New-Object 'System.Windows.Forms.TextBox'
	$labelMACAddress = New-Object 'System.Windows.Forms.Label'
	$labelIPAddress = New-Object 'System.Windows.Forms.Label'
	$buttonExecuteIncidentRespo = New-Object 'System.Windows.Forms.Button'
	$sirda_status = New-Object 'System.Windows.Forms.RichTextBox'
	$labelCurrentUser = New-Object 'System.Windows.Forms.Label'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$labelLogonTime = New-Object 'System.Windows.Forms.Label'
	$textbox12 = New-Object 'System.Windows.Forms.TextBox'
	$tabpage9 = New-Object 'System.Windows.Forms.TabPage'
	$labelDisplaysNetworkInter = New-Object 'System.Windows.Forms.Label'
	$datagridview8 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$labelNetstatProvidesInfor = New-Object 'System.Windows.Forms.Label'
	$datagridview1 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$labelPrefetchFilesContain = New-Object 'System.Windows.Forms.Label'
	$datagridview3 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage4 = New-Object 'System.Windows.Forms.TabPage'
	$labelAddressResolutionPro = New-Object 'System.Windows.Forms.Label'
	$datagridview4 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage5 = New-Object 'System.Windows.Forms.TabPage'
	$labelDisplaysCurrentlyRun = New-Object 'System.Windows.Forms.Label'
	$datagridview5 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage8 = New-Object 'System.Windows.Forms.TabPage'
	$labelDisplaysMoreAdvanced = New-Object 'System.Windows.Forms.Label'
	$datagridview7 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage7 = New-Object 'System.Windows.Forms.TabPage'
	$labelDisplaysTheCurrentTa = New-Object 'System.Windows.Forms.Label'
	$datagridview6 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage10 = New-Object 'System.Windows.Forms.TabPage'
	$labelDisplaysTheLast500Se = New-Object 'System.Windows.Forms.Label'
	$datagridview9 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage11 = New-Object 'System.Windows.Forms.TabPage'
	$labelDisplaysTheLast500Sy = New-Object 'System.Windows.Forms.Label'
	$datagridview10 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage12 = New-Object 'System.Windows.Forms.TabPage'
	$labelServiceTriggersCanBe = New-Object 'System.Windows.Forms.Label'
	$datagridview11 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage13 = New-Object 'System.Windows.Forms.TabPage'
	$labelInformationAboutCurr = New-Object 'System.Windows.Forms.Label'
	$datagridview12 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage14 = New-Object 'System.Windows.Forms.TabPage'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$datagridview14 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage15 = New-Object 'System.Windows.Forms.TabPage'
	$labelInformationAboutInst = New-Object 'System.Windows.Forms.Label'
	$datagridview16 = New-Object 'System.Windows.Forms.DataGridView'
	$tabpage6 = New-Object 'System.Windows.Forms.TabPage'
	$webbrowser1 = New-Object 'System.Windows.Forms.WebBrowser'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$buttonLockdownSecureSystem = New-Object 'System.Windows.Forms.Button'
	$statusstrip1 = New-Object 'System.Windows.Forms.StatusStrip'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$toolstripstatuslabel1 = New-Object 'System.Windows.Forms.ToolStripStatusLabel'
	$buttonBrowse3 = New-Object 'System.Windows.Forms.Button'
	$textboxFile = New-Object 'System.Windows.Forms.TextBox'
	$toolstripstatuslabel2 = New-Object 'System.Windows.Forms.ToolStripStatusLabel'
	$Column1 = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
	$Column3 = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
	$Column2 = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$ErrorActionPreference = 'Continue'
	$OnLoadFormEvent = {
	<#	Author Information
		DeveloperName = "Jeff Holder"
		DeveloperEmail = "jeff.holder@gmail.com"#>
		
	}
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	
	$buttonExecuteIncidentRespo_Click = {
	
				$richtextbox1.Location = New-Object System.Drawing.Point(11, 338)
				$MainForm.Refresh()
				$datagridview1.Rows.Clear()
				$datagridview1.Refresh()
				$datagridview2.Rows.Clear()
				$datagridview2.Refresh()
				$datagridview3.Rows.Clear()
				$datagridview3.Refresh()
				$datagridview4.Refresh()
				$datagridview4.Rows.Clear()
				$datagridview5.Rows.Clear()
				$datagridview5.Refresh()
				$datagridview6.Rows.Clear()
				$datagridview6.Refresh()
				$datagridview7.Rows.Clear()
				$datagridview7.Refresh()
				$datagridview8.Rows.Clear()
				$datagridview8.Refresh()
				$datagridview9.Rows.Clear()
				$datagridview9.Refresh()
				$datagridview10.Rows.Clear()
				$datagridview10.Refresh()
				$datagridview11.Rows.Clear()
				$datagridview11.Refresh()
				$datagridview12.Rows.Clear()
				$datagridview12.Refresh()
				$datagridview13.Rows.Clear()
				$datagridview13.Refresh()
				$datagridview14.Rows.Clear()
				$datagridview14.Refresh()
				$datagridview15.Rows.Clear()
				$datagridview15.Refresh()
				$datagridview16.Rows.Clear()
				$datagridview16.Refresh()
				$datagridview17.Rows.Clear()
				$datagridview17.Refresh()
				$sirda_status.Text = ""
				$sirda_status.Refresh()
				$buttonExecuteIncidentRespo.Text = '...Gathering Incident Data'
				$buttonExecuteIncidentRespo.Enabled = $false
				$currentdir = "C:\Program Files\Sirda\Collections"
				$LogFile = $logs + "\log-$(Get-Date -Format 'yyyyMMdd-HHmm').txt"
				$buttonExecuteIncidentRespo.Enabled = $false
				$Computer = $IR_Computers.Text
				$textbox3.Text = ""
				$textbox3.Refresh()
				$collections = "C:\Program Files\Sirda\collections\$Computer"
				$logs = "C:\Program Files\Sirda\logs\$computer"
				if (!(Test-Path -Path $collections))
				{ New-Item -ItemType directory -Path $collections }
				if (!(Test-Path -Path $logs))
				{ New-Item -ItemType directory -Path $logs }
		
		Function Update-Log
				{
					
					Param ([string]$logstring)
					$logstring = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss'): $logstring`n"
					$sirda_status.AppendText($logstring) = $logstring
					Add-content $LogFile -value $logstring
					$sirda_status.Refresh()
					[System.Windows.Forms.Application]::DoEvents()
				}
				
				#Initialize the Progress Bar
				$progressbar_audit.Maximum = 18
				$progressbar_audit.Step = 1
				$progressbar_audit.Value = 0
	
				If (Test-Connection -ComputerName $Computer -Quiet -Count 1)
		{
			try
			{
				Update-log "Verifying Remote RPC/WMI Connectivity on $computer"
				$TestConnect = Test-Connection -ComputerName $computer -Count 1 -WarningAction Stop -EA Stop
				$WMIConnect = Get-WmiObject Win32_ComputerSystem -computername $computer -EA Stop
				Update-log "Remote RPC/WMI connection successful!"
			}
			
			catch
			{
				
				Update-log "Remote RPC/WMI on server: $computer is unreachable."
				$LogMsgRpc = ("Error Connecting to RPC/WMI on " + $computer + " - " + (Get-Date))
				Write-Output $LogMsgRpc | Out-File -FilePath "C:\Program Files\Sirda\logs\" + $computer + "\Errorlog.txt" -Append
				
				
			}
			
			try
			{
				
				Update-log "Verifying Remote Event Log Connectivity on $computer"
				$EvtTestconnect = Test-Connection -ComputerName $computer -Count 1 -WarningAction Stop -EA Stop
				$EVTConnect = Get-WinEvent -ComputerName $computer -LogName application -MaxEvents 1 -ErrorAction Stop
				Update-log "Remote Event Log connection successful"
				$Connections = New-Object -Type PSObject -Property @{
					"Name" = $computer
				}
				$CompPlaceHolder += $Connections
			}
			catch
			{
				
				Update-log "$computer is unreachable. Unable to continue. Error connecting to remote event logs. Verify Remote Event Log Management is enabled"
				$LogMsgEvt = ("Error Connecting to Remote Event Logs on " + $computer + " - " + (Get-Date))
				Write-Output $LogMsgEvt | Out-File -FilePath "C:\Program Files\Sirda\logs\" + $computer + "\Errorlog.txt" -Append
				Write-Output "------------------------------------" | Out-File -FilePath "C:\Program Files\Sirda\logs\" + $computer + "\Errorlog.txt" -Append
				Write-Output "" | Out-File -FilePath "C:\Program Files\Sirda\logs\" + $computer + "\Errorlog.txt" -Append
				
			}
		}
		$computers = $CompPlaceHolder | Select -ExpandProperty Name #Use of $CompPlaceHolder.name doesn't work right in PS 2.0
		#endregion Remote Check
	
		Update-log "Connection tests passed. Proceeding with data collections..."
		
			$a = (get-wmiobject -ErrorAction 'Stop' -class win32_operatingsystem -computername $computer)
			$b = $a.version
			$textbox10.Text = $b
			$Networks = get-wmiobject -ErrorAction 'Stop' Win32_NetworkAdapterConfiguration -ComputerName $Computer | Where-Object {
				$_.IPEnabled
			}
			foreach ($Network in $Networks)
			{
				$IPAddress = $Network.IpAddress[0]
				$SubnetMask = $Network.IPSubnet[0]
				$DefaultGateway = $Network.DefaultIPGateway
				$dhcpserver = $Network.DHCPServer
				$MACAddress = $Network.MACAddress
				$DNSServers = $Network.DNSServerSearchOrder -split "`t "
				$IsDHCPEnabled = $false
				If ($network.DHCPEnabled)
				{
					$IsDHCPEnabled = $true
				}
			}
			$pridns = $DNSServers[0]
			$secdns = $DNSServers[1]
		$stringOutput = quser /server:$Computer 2>$null
		If (!$stringOutput) { Write-Warning "Unable to retrieve quser info for `"$Computer`"" }
		ForEach ($line in $stringOutput)
		{
			If ($line -match "logon time") { Continue }
			
			$idleStringValue = $line.SubString(54, 9).Trim().Replace('+', '.')
			If ($idleStringValue -eq "none") { $idle = $null }
			Else { $idle = [timespan]$idleStringValue }
			
			$line = @{ Username = $line.SubString(1, 20).Trim(); SessionName = $line.SubString(23, 17).Trim(); ID = $line.SubString(42, 2).Trim(); State = $line.SubString(46, 6).Trim(); IdleTime = $idle; LogonTime = [datetime]$line.SubString(65) }
			
			$textbox1.Text = $line.username
			$textbox12.Text = $line.logontime
			}
			$textbox3.Text = $IPAddress
			$textbox4.Text = $MACAddress
			$textbox5.Text = $Pridns
			$textbox6.Text = $Secdns
			$textbox7.Text = $dhcpserver
			$arc = (get-wmiobject -ErrorAction 'Stop' -Class Win32_OperatingSystem -computername $computer).OSArchitecture
			$textbox11.Text = $arc
			
						[System.Windows.Forms.Application]::DoEvents()
		Update-Log "Sirda is processing collections on $computer"
		
		#region Get-LocalAdmins
		function Get-Localadmins
		{
			Update-Log "Collecting Local Admin Members"
			$tableadmins = New-Object system.Data.DataTable "Tableadmins"
			$tableadmins.Columns.Add("Account Name")
			$datagridview13.DataSource = $tableadmins
			
			$sb = {
				& net localgroup administrators | Select-Object -Skip 6 | ? {
					$_ -and $_ -notmatch "The command completed successfully"
				} | % {
					$o = "" | Select-Object Account
					$o.Account = $_
					$o
				}
			}
			$localadmins = Invoke-Command -ComputerName $Computer -ScriptBlock $sb
			foreach ($o in $localadmins)
			{
				$tableadmins.Rows.add($o.account)
				$datagridview13.Refresh()
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\Local_Admin_Members.csv"
			$datagridview13.Rows | select -expand DataBoundItem | export-csv $file -NoType
			$datagridview2.Rows.Add("Local Admin Membership", "Security", "Completed")
			$progressbar_audit.PerformStep()
			[System.Windows.Forms.Application]::DoEvents()
			
		}
		Get-LocalAdmins
		
		#endregion
		#region Get-PSNET
		function Get-PSNET
		{
			$tableps = New-Object system.Data.DataTable "Tableps"
			$tableps.Columns.Add("PowerShell Version")
			$tableps.Columns.Add(".NET 1")
			$tableps.Columns.Add(".NET 2")
			$datagridview15.DataSource = $tableps
			
			$sb = {
				$obj = "" | Select-Object $($PSVersionTable.Keys)
				foreach ($item in $PSVersionTable.Keys)
				{
					$obj.$item = $($PSVersionTable[$item] -join ".")
				}
				
				$i = 1
				Get-ChildItem -Force "$($env:windir)\Microsoft.Net\Framework" -Include mscorlib.dll -Recurse | ForEach-Object {
					$obj | Add-Member NoteProperty .NET_$i $_.VersionInfo.ProductVersion
					$i++
				}
				
				$obj
			}
			$psnet = Invoke-Command -ComputerName $Computer -ScriptBlock $sb
			foreach ($o in $psnet)
			{
				$tableps.Rows.add($o.psversion, $o.'.NET_1', $o.'.NET_2')
				$datagridview15.Refresh()
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\PowerShell_NET_Versions.csv"
			$datagridview15.Rows | select -expand DataBoundItem | export-csv $file -NoType
			$datagridview2.Rows.Add("PowerShell/Net Versions", "General", "Completed")
			$progressbar_audit.PerformStep()
			[System.Windows.Forms.Application]::DoEvents()
			
		}
		Get-PSNET
		#endregion
		#region Get-SMBShares
		function Get-SMB
		{
			Update-Log "Collecting SMB Shares"
			$tablesmb = New-Object system.Data.DataTable "Tablesmb"
			$tablesmb.Columns.Add("Name")
			$tablesmb.Columns.Add("Path")
			$tablesmb.Columns.Add("Description")
			$datagridview17.DataSource = $tablesmb
			
			$sb = {
				if (Get-Command Get-SmbShare -ErrorAction SilentlyContinue)
				{
					Get-SmbShare
				}
			}
			$smb = Invoke-Command -ComputerName $Computer -ScriptBlock $sb
			foreach ($o in $smb)
			{
				$tablesmb.Rows.add($o.name, $o.path, $o.description)
				$datagridview17.Refresh()
				
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\SMB_Shares.csv"
			$datagridview17.Rows | select -expand DataBoundItem | export-csv $file -NoType
			$datagridview2.Rows.Add("SMB Shares", "General", "Completed")
			$progressbar_audit.PerformStep()
			[System.Windows.Forms.Application]::DoEvents()
			
		}
		Get-SMB
		#endregion
		#region NETSTAT
				Update-Log "Collecting NETSTAT Data"
				function Get-AddrPort
				{
					Param (
						[Parameter(Mandatory = $True, Position = 0)]
						[String]$AddrPort
					)
					write-verbose "Entering $($MyInvocation.MyCommand)"
					write-verbose "Processing $AddrPort"
					if ($AddrPort -match '[0-9a-f]*:[0-9a-f]*:[0-9a-f%]*\]:[0-9]+')
					{
						$Addr, $Port = $AddrPort -split "]:"
						$Addr += "]"
					}
					else
					{
						$Addr, $Port = $AddrPort -split ":"
					}
					$Addr, $Port
					write-verbose "Exiting $($MyInvocation.MyCommand)"
				}
				
				function Get-Netstat
				{
					$tablenetstat = New-Object system.Data.DataTable "Tablenetstat"
					$tablenetstat.Columns.Add("Protocol")
					$tablenetstat.Columns.Add("LocalAddress")
					$tablenetstat.Columns.Add("LocalPort")
					$tablenetstat.Columns.Add("ForeignAddress")
					$tablenetstat.Columns.Add("ForeignPort")
					$tablenetstat.Columns.Add("State")
					$tablenetstat.Columns.Add("ConPid")
					$tablenetstat.Columns.Add("Component")
					$tablenetstat.Columns.Add("Process")
					$datagridview1.DataSource = $tablenetstat
					
					if (([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))
					{
						
						# If run as admin, collect Component and Process names in addition to other data.
						$netstatScriptBlock = {
							& $env:windir\system32\netstat.exe -naob
						}
						$result = Invoke-Command -ComputerName $computer -ScriptBlock $netstatScriptBlock
						foreach ($line in $result)
						{
							if ($line.length -gt 1 -and $line -notmatch "Active |Proto ")
							{
								$line = $line.trim()
								if ($line.StartsWith("TCP"))
								{
									$Protocol, $LocalAddress, $ForeignAddress, $State, $ConPId = ($line -split '\s{2,}')
									$Component = $Process = $False
								}
								elseif ($line.StartsWith("UDP"))
								{
									$State = "STATELESS"
									$Protocol, $LocalAddress, $ForeignAddress, $ConPid = ($line -split '\s{2,}')
									$Component = $Process = $False
								}
								elseif ($line -match "^\[[-_a-zA-Z0-9.]+\.(exe|com|ps1)\]$")
								{
									$Process = $line
									if ($Component -eq $False)
									{
										# No Component given
										$Component = $Process
									}
								}
								elseif ($line -match "Can not obtain ownership information")
								{
									$Process = $Component = $line
								}
								else
								{
									# We have the $Component
									$Component = $line
								}
								if ($State -match "TIME_WAIT")
								{
									$Component = "Not provided"
									$Process = "Not provided"
								}
								if ($Component -and $Process)
								{
									$LocalAddress, $LocalPort = Get-AddrPort($LocalAddress)
									$ForeignAddress, $ForeignPort = Get-AddrPort($ForeignAddress)
									
									$o = "" | Select-Object Protocol, LocalAddress, LocalPort, ForeignAddress, ForeignPort, State, ConPId, Component, Process
									$o.Protocol, $o.LocalAddress, $o.LocalPort, $o.ForeignAddress, $o.ForeignPort, $o.State, $o.ConPId, $o.Component, $o.Process = `
									$Protocol, $LocalAddress, $LocalPort, $ForeignAddress, $ForeignPort, $State, $ConPid, $Component, $Process
									$o
								}
								$tablenetstat.Rows.add($Protocol, $LocalAddress, $LocalPort, $ForeignAddress, $ForeignPort, $State, $ConPid, $Component, $Process)
							$datagridview1.Refresh()
							[System.Windows.Forms.Application]::DoEvents()
							}
						}
					}
					else
					{
						$tablenetstat = New-Object system.Data.DataTable "Tablenetstat"
						$tablenetstat.Columns.Add("Protocol")
						$tablenetstat.Columns.Add("LocalAddress")
						$tablenetstat.Columns.Add("LocalPort")
						$tablenetstat.Columns.Add("ForeignAddress")
						$tablenetstat.Columns.Add("ForeignPort")
						$tablenetstat.Columns.Add("State")
						$tablenetstat.Columns.Add("ConPid")
						$datagridview1.DataSource = $tablenetstat
						# If run as non-admin, we can't grab Component and Process name.
						$netstatScriptBlock = {
							& $env:windir\system32\netstat.exe -nao
						}
						("Protocol", "LocalAddress", "LocalPort", "ForeignAddress", "ForeignPort", "State", "PId") -join "`t"
					$result = Invoke-Command -ComputerName $computer -ScriptBlock $netstatScriptBlock
					foreach ($line in $result){
							if ($line.length -gt 1 -and $line -notmatch "Active |Proto ")
							{
								$line = $line.trim()
								if ($line.StartsWith("TCP"))
								{
									$Protocol, $LocalAddress, $ForeignAddress, $State, $ConPId = ($line -split '\s{2,}')
								}
								elseif ($line.StartsWith("UDP"))
								{
									$State = "STATELESS"
									$Protocol, $LocalAddress, $ForeignAddress, $ConPId = ($line -split '\s{2,}')
								}
								$LocalAddress, $LocalPort = Get-AddrPort($LocalAddress)
								$ForeignAddress, $ForeignPort = Get-AddrPort($ForeignAddress)
								$o = "" | Select-Object Protocol, LocalAddress, LocalPort, ForeignAddress, ForeignPort, State, PId
								$o.Protocol, $o.LocalAddress, $o.LocalPort, $o.ForeignAddress, $o.ForeignPort, $o.State, $o.PId = `
								$Protocol, $LocalAddress, $LocalPort, $ForeignAddress, $ForeignPort, $State, $Pid
								$o
							}
							$tablenetstat.Rows.add($Protocol, $LocalAddress, $LocalPort, $ForeignAddress, $ForeignPort, $State, $ConPid)
							$datagridview1.Refresh()
						}
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\netstat.csv"
					$datagridview1.Rows | select -expand DataBoundItem | export-csv $file -NoType
				$datagridview2.Rows.Add("NetSTAT Data", "Network", "Completed")
				$progressbar_audit.PerformStep()
				[System.Windows.Forms.Application]::DoEvents()
		}
		Get-Netstat
		#endregion
		#region PREFETCH
			function Get-Prefetch
			{
				$tableprefetch = New-Object system.Data.DataTable "Tableprefetch"
				$tableprefetch.Columns.Add("FullName")
				$tableprefetch.Columns.Add("CreationTimeUTC")
				$tableprefetch.Columns.Add("LastAccessTimeUTC")
				$tableprefetch.Columns.Add("LastWriteTimeUTC")
				$datagridview3.DataSource = $tableprefetch
				$scriptblock = { (Get-ItemProperty "hklm:\system\currentcontrolset\control\session manager\memory management\prefetchparameters").EnablePrefetcher }
				$pfconf = Invoke-Command -ComputerName $Computer -ScriptBlock $scriptblock
				
				Update-Log "Collecting PreFetch Data"
				$scriptblockprefetch = {
					$o = "" | Select-Object FullName, CreationTimeUtc, LastAccessTimeUtc, LastWriteTimeUtc
					ls $env:windir\Prefetch\*.pf | % {
						$o.FullName = $_.FullName;
						$o.CreationTimeUtc = Get-Date($_.CreationTimeUtc) -format o;
						$o.LastAccesstimeUtc = Get-Date($_.LastAccessTimeUtc) -format o;
						$o.LastWriteTimeUtc = Get-Date($_.LastWriteTimeUtc) -format o;
						$o
					}
				}
				$resultprefetch = Invoke-Command -ComputerName $Computer -ScriptBlock $scriptblockprefetch
				foreach ($o in $resultprefetch)
				{
					$tableprefetch.Rows.add($o.FullName, $o.CreationTimeUtc, $o.LastAccesstimeUtc, $o.LastWriteTimeUtc)
					$datagridview3.Refresh()
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\prefetch.csv"
				$datagridview3.Rows | select -expand DataBoundItem | export-csv $file -NoType
				$datagridview2.Rows.Add("PreFetch Listing", "Process", "Completed")
				$progressbar_audit.PerformStep()
				[System.Windows.Forms.Application]::DoEvents()
		}
		Get-Prefetch
		#endregion
		#region ARP
			function Get-ARP
			{
				Update-Log "Collecting ARP Data"
				$tablearp = New-Object system.Data.DataTable "Tablearp"
				$tablearp.Columns.Add("Interface")
				$tablearp.Columns.Add("IP Address")
				$tablearp.Columns.Add("MAC Address")
				$tablearp.Columns.Add("State")
				$datagridview4.DataSource = $tablearp
				
				$scriptblockarp = { Get-NetNeighbor }
				$resultarp = Invoke-Command -Computer $Computer -ScriptBlock $scriptblockarp
				foreach ($o in $resultarp)
				{
					$tablearp.Rows.Add($o.ifIndex, $o.IpAddress, $o.LinkLayerAddress, $o.State)
					$datagridview4.Refresh()
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\arp.csv"
				$datagridview4.Rows | select -expand DataBoundItem | Export-Csv $file -NoType
				$datagridview2.Rows.Add("ARP Data", "Network", "Completed")
				$progressbar_audit.PerformStep()
				[System.Windows.Forms.Application]::DoEvents()
		}
		Get-arp
		#endregion
		#region Get-Processes
			function Get-Processes
			{
				$tableproc = New-Object system.Data.DataTable "Tableproc"
				$tableproc.Columns.Add("Handles")
				$tableproc.Columns.Add("NPM(K)")
				$tableproc.Columns.Add("PM(K)")
				$tableproc.Columns.Add("WS(K)")
				$tableproc.Columns.Add("CPU(s)")
				$tableproc.Columns.Add("ID")
				$tableproc.Columns.Add("SI")
				$tableproc.Columns.Add("Process Name")
			$datagridview5.DataSource = $tableproc
			Update-Log "Collecting Process Data"
				Update-TypeData -TypeName System.Diagnostics.Process -SerializationDepth 3 -Force
				$scriptblockpro = { Get-Process }
				$oo = Invoke-Command -ComputerName $Computer -ScriptBlock $scriptblockpro
				foreach ($o in $oo)
				{
					$tableproc.Rows.add($o.ProcessName, $o.Handles, $o.npm, $o.pm, $o.ws, $o.CPU, $o.Id, $o.SI)
					$datagridview5.Refresh()
				
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\processes.csv"
				$datagridview5.Rows | select -expand DataBoundItem | export-csv $file -NoType
				$datagridview2.Rows.Add("Process Data", "General", "Completed")
				$progressbar_audit.PerformStep()
				[System.Windows.Forms.Application]::DoEvents()
			}
			Get-Processes
			#endregion
		#region Get-Tasklist
		function Get-TaskList
		{
			$tabletasklist = New-Object system.Data.DataTable "Tabletasklist"
			$tabletasklist.Columns.Add("Image Name")
			$tabletasklist.Columns.Add("PID")
			$tabletasklist.Columns.Add("Session Name")
			$tabletasklist.Columns.Add("Session Number")
			$tabletasklist.Columns.Add("Memory Usage")
			$tabletasklist.Columns.Add("Status")
			$tabletasklist.Columns.Add("UserName")
			$tabletasklist.Columns.Add("CPU Time")
			$tabletasklist.Columns.Add("Windows Title")
			$datagridview6.DataSource = $tabletasklist
			Update-Log "Collecting TaskList Data"
			& $env:windir\system32\tasklist.exe /v /fo csv | Select-Object -Skip 1 | % {
				$o = "" | Select-Object ImageName, PID, SessionName, SessionNum, MemUsage, Status, UserName, CPUTime, WindowTitle
				$row = $_ -replace '(,)(?=(?:[^"]|"[^"]*")*$)', "`t" -replace "`""
				$o.ImageName,
				$o.PID,
				$o.SessionName,
				$o.SessionNum,
				$o.MemUsage,
				$o.Status,
				$o.UserName,
				$o.CPUTime,
				$o.WindowTitle = ($row -split "`t")
				$o
				$tabletasklist.Rows.add($o.ImageName, $o.PID, $o.SessionName, $o.SessionNum, $o.MemUsage, $o.Status, $o.UserName, $o.CPUTime, $o.WindowTitle)
				$datagridview6.Refresh()
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\Tasklist.csv"
			$datagridview6.Rows | select -expand DataBoundItem | export-csv $file -NoType
			$datagridview2.Rows.Add("TaskList Data", "Process", "Completed")
			$progressbar_audit.PerformStep()
			[System.Windows.Forms.Application]::DoEvents()
		}
		Get-TaskList
		#endregion	
		#region Get-ProcAdvanced
		function Get-ProAdv
		{
			$tableadvproc = New-Object system.Data.DataTable "Tableadvproc"
			$tableadvproc.Columns.Add("Hash")
			$tableadvproc.Columns.Add("User Name")
			$tableadvproc.Columns.Add("Caption")
			$tableadvproc.Columns.Add("Creation Date")
			$tableadvproc.Columns.Add("CSName")
			$tableadvproc.Columns.Add("Executable Path")
			$tableadvproc.Columns.Add("OS Name")
			$tableadvproc.Columns.Add("Process ID")
			$tableadvproc.Columns.Add("Command Line")
			$datagridview7.DataSource = $tableadvproc
			
			$hashtype = "MD5"
			Update-Log "Collecting Processes Advanced Data"
			function Compute-FileHash
			{
				Param (
					[Parameter(Mandatory = $true, Position = 1)]
					[string]$FilePath,
					[ValidateSet("MD5", "SHA1", "SHA256", "SHA384", "SHA512", "RIPEMD160")]
					[string]$HashType = "MD5"
				)
				
				switch ($HashType.ToUpper())
				{
					"MD5"       {
						$hash = [System.Security.Cryptography.MD5]::Create()
					}
					"SHA1"      {
						$hash = [System.Security.Cryptography.SHA1]::Create()
					}
					"SHA256"    {
						$hash = [System.Security.Cryptography.SHA256]::Create()
					}
					"SHA384"    {
						$hash = [System.Security.Cryptography.SHA384]::Create()
					}
					"SHA512"    {
						$hash = [System.Security.Cryptography.SHA512]::Create()
					}
					"RIPEMD160" {
						$hash = [System.Security.Cryptography.RIPEMD160]::Create()
					}
					default
					{
						"Invalid hash type selected."
					}
				}
				
				if (Test-Path $FilePath)
				{
					$FileName = Get-ChildItem -Force $FilePath | Select-Object -ExpandProperty Fullname
					$fileData = [System.IO.File]::ReadAllBytes($FileName)
					$HashBytes = $hash.ComputeHash($fileData)
					$PaddedHex = ""
					
					foreach ($Byte in $HashBytes)
					{
						$ByteInHex = [String]::Format("{0:X}", $Byte)
						$PaddedHex += $ByteInHex.PadLeft(2, "0")
					}
					$PaddedHex
					
				}
				else
				{
					"$FilePath is invalid or locked."
					Write-Error -Message "Invalid input file or path specified. $FilePath" -Category InvalidArgument
				}
			}
			
			foreach ($item in (Get-WmiObject -Query "Select * from win32_process"))
			{
				if ($item.ExecutablePath)
				{
					$hash = Compute-FileHash -FilePath $item.ExecutablePath -HashType $hashtype
				}
				else
				{
					$hash = "Get-WmiObject query returned no executable path."
				}
				Try
				{
					$domain = $item.GetOwner().domain
				}
				Catch
				{
					$domain = "Unobtainable"
				}
				Try
				{
					$username = $item.GetOwner().user
				}
				Catch
				{
					$username = "Unobtainable"
				}
				Try
				{
					$SId = $item.GetOwner().SId
				}
				Catch
				{
					$SId = "Unobtainable"
				}
				$username = ($domain + "\" + $username)
				$item | Add-Member -Type NoteProperty -Name "Hash" -Value $hash
				$item.CommandLine = $item.CommandLine -Replace "`n", " " -replace '\s\s*', ' '
				$item | Add-Member -Type NoteProperty -Name "Username" -Value $username
				$item | Add-Member -Type NoteProperty -Name "SID" -Value $SId
				$item
				$tableadvproc.Rows.add($item.Hash, $item.Username, $item.Caption, $item.CreationDate, $item.CSName, $item.ExecutablePath, $item.OSName, $item.ProcessID, $item.CommandLine)
				$datagridview7.Refresh()
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\AdvancedProcess.csv"
			$datagridview7.Rows | select -expand DataBoundItem | export-csv $file -NoType
			$datagridview2.Rows.Add("Advanced Process Data", "Process", "Completed")
			$progressbar_audit.PerformStep()
			[System.Windows.Forms.Application]::DoEvents()
			
			
		}
		Get-ProAdv
		#endregion
		#region Get-NetInterfaces
		function Get-NetInterfaces
		{
			$tableNetInterfaces = New-Object system.Data.DataTable "TableNetInterfaces"
			$tableNetInterfaces.Columns.Add("Interface")
			$tableNetInterfaces.Columns.Add("Address Family")
			$tableNetInterfaces.Columns.Add("nlMtu (Bytes)")
			$tableNetInterfaces.Columns.Add("DHCP")
			$tableNetInterfaces.Columns.Add("Connection Status")
			$datagridview8.DataSource = $tableNetInterfaces
			Update-Log "Collecting Network Interface Data"
			$oo = Get-NetIPInterface
			foreach ($o in $oo)
			{
				$tableNetInterfaces.Rows.Add($o.InterfaceAlias, $o.AddressFamily, $o.nlmtu, $o.dhcp, $o.connectionstate)
				$datagridview8.Refresh()
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\Network_Interfaces.csv"
			$datagridview8.Rows | select -expand DataBoundItem | Export-Csv $file -NoType
			$datagridview2.Rows.Add("Network Interface Data", "Network", "Completed")
			$progressbar_audit.PerformStep()
			[System.Windows.Forms.Application]::DoEvents()
		}
		Get-NetInterfaces
		#endregion
		#region Get-seceventlog
		function Get-seceventlog
		{
			$tableseceventlogs = New-Object system.Data.DataTable "Tableseceventlogs"
			$tableseceventlogs.Columns.Add("Time Created")
			$tableseceventlogs.Columns.Add("ID")
			$tableseceventlogs.Columns.Add("Category")
			$tableseceventlogs.Columns.Add("Message")
			$datagridview9.DataSource = $tableseceventlogs
			Update-Log "Collecting Security Event Logs"
			$sb = { Get-WinEvent -LogName security -MaxEvents 500 }
			$oo = Invoke-Command -ComputerName $Computer -ScriptBlock $sb
			foreach ($o in $oo)
			{
				$tableseceventlogs.Rows.Add($o.timecreated, $o.id, $o.leveldisplayname, $o.message)
				$datagridview9.Refresh()
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\Security_Event_Log.csv"
			$datagridview9.Rows | select -expand DataBoundItem | Export-Csv $file -NoType
			$datagridview2.Rows.Add("Security Event Logs", "Logs", "Completed")
			$progressbar_audit.PerformStep()
			[System.Windows.Forms.Application]::DoEvents()
			
		}
		
		Get-seceventlog
		#endregion
		#region Get-syseventlog
		function Get-syseventlog
		{
			$tablesyseventlogs = New-Object system.Data.DataTable "Tablesyseventlogs"
			$tablesyseventlogs.Columns.Add("Time Created")
			$tablesyseventlogs.Columns.Add("ID")
			$tablesyseventlogs.Columns.Add("Category")
			$tablesyseventlogs.Columns.Add("Message")
			$datagridview10.DataSource = $tablesyseventlogs
			Update-Log "Collecting System Event Logs"
			$sb = { Get-WinEvent -LogName system -MaxEvents 500 }
			$oo = Invoke-Command -ComputerName $Computer -ScriptBlock $sb
			foreach ($o in $oo)
			{
				$tablesyseventlogs.Rows.Add($o.timecreated, $o.id, $o.leveldisplayname, $o.message)
				$datagridview10.Refresh()
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\System_Event_Log.csv"
			$datagridview10.Rows | select -expand DataBoundItem | Export-Csv $file -NoType
			$datagridview2.Rows.Add("System Event Logs", "Logs", "Completed")
			$progressbar_audit.PerformStep()
			[System.Windows.Forms.Application]::DoEvents()
			
		}
		
		Get-syseventlog
		#endregion
		#region Get-svcTriggers
		function Get-svctriggers
		{
			$tablesvctriggers = New-Object system.Data.DataTable "Tablesvctriggers"
			$tablesvctriggers.Columns.Add("Service")
			$tablesvctriggers.Columns.Add("Action")
			$tablesvctriggers.Columns.Add("Type")
			$tablesvctriggers.Columns.Add("SubType")
			$tablesvctriggers.Columns.Add("Data")
			$datagridview11.DataSource = $tablesvctriggers
			$sb = {
				$svctrigs = & $env:windir\system32\sc.exe query | ForEach-Object {
					$svc = $_
					if ($svc -match "SERVICE_NAME:\s(.*)")
					{
						& $env:windir\system32\sc qtriggerinfo $($matches[1])
					}
				} | ?{
					$_.length -gt 1 -and $_ -notmatch "\[SC\] QueryServiceConfig2 SUCCESS|has not registered for any"
				}
				
				function Get-LogProviderHash
				{
					Write-Verbose "Entering $($MyInvocation.MyCommand)"
					$LogProviders = @{
					}
					& $env:windir\system32\logman.exe query providers | ForEach-Object {
						$provider = $_
						if ($provider -match "\{")
						{
							$LogName, $LogGuid = ($provider -split "{") -replace "}"
							$LogName = $LogName.Trim()
							$LogGuid = $LogGuid.Trim()
							if ($LogProviders.ContainsKey($LogGuid))
							{
							}
							else
							{
								Write-Verbose "Adding ${LogGuid}:${LogName} to `$LogProviders hash."
								$LogProviders.Add($LogGuid, $LogName)
							}
						}
					}
					$LogProviders
					Write-Verbose "Exiting $($MyInvocation.MyCommand)"
				}
				
				$LogProviders = Get-LogProviderHash
				$ServiceName = $Action = $Condition = $Data = $False
				$CondPattern = '(?<Desc>[-_ A-Za-z0-9]+)\s:\s(?<Guid>[-0-9a-fA-F]+)\s(?<Trailer>[-\[A-Za-z0-9 ]+\]*)'
				
				$svctrigs | ForEach-Object {
					$line = $_
					$line = $line.Trim()
					if ($line -match "SERVICE_NAME:\s(?<SvcName>[-_A-Za-z0-9]+)")
					{
						if ($ServiceName)
						{
							$oo = "" | Select-Object ServiceName, Action, Type, Subtype, Data
							$oo.ServiceName, $oo.Action, $oo.Type, $oo.Subtype, $oo.Data = (($ServiceName, $Action, $Type, $SubType, $Data) -replace "False", $null)
							$oo
						}
						$ServiceName = $matches['SvcName']
						$Action = $Condition = $Data = $False
					}
					elseif ($line -match "(START SERVICE|STOP SERVICE)")
					{
						if ($ServiceName -and $Action -and $Condition)
						{
							$oo = "" | Select-Object ServiceName, Action, Type, Subtype, Data
							$oo.ServiceName, $oo.Action, $oo.Type, $oo.Subtype, $oo.Data = (($ServiceName, $Action, $Type, $Subtype, $Data) -replace "False", $null)
							$oo
						}
						$Action = ($matches[1])
						$Condition = $Data = $False
					}
					elseif ($line -match "DATA\s+")
					{
						$Data = $line -replace "\s+" -replace "DATA:"
					}
					else
					{
						$Condition = $line -replace "\s+", " "
						if ($LogProviders)
						{
							$ProviderName = $False
							if ($Condition -match $CondPattern)
							{
								$Guid = $($matches['Guid']).ToUpper()
								$ProviderName = $LogProviders.$Guid
								if ($ProviderName)
								{
									$Type = $matches['Desc']
									$Subtype = $LogProviders.$Guid
								}
								else
								{
									$Type, $Subtype = ($Condition -split ":")
									$Subtype = $Subtype.Trim()
								}
							}
						}
						$Data = $False
					}
				}
		$oo = "" | Select-Object ServiceName, Action, Type, Subtype, Data
			$oo.ServiceName, $o.Action, $o.Type, $o.Subtype, $o.Data = (($ServiceName, $Action, $Type, $Subtype, $Data) -replace "False", $null)
			
			
		}
		$oo = Invoke-command -ComputerName $computer -ScriptBlock $sb
		foreach ($o in $oo)
		{
			$tablesvctriggers.Rows.Add($o.servicename, $o.action, $o.type, $o.subtype, $o.data)
			$datagridview11.Refresh()
		}
		$file = "C:\Program Files\Sirda\collections\" + $Computer + "\Service_Triggers.csv"
		$datagridview11.Rows | select -expand DataBoundItem | Export-Csv $file -NoType
	}
	
	Get-svctriggers
	#endregion
		#region Get-ScheduledTasks
		function Get-ScheduledTasks
		{
			Update-Log "Collecting Scheduled Tasks"
			$tabletasks = New-Object system.Data.DataTable "Tabletasks"
			$tabletasks.Columns.Add("TaskName")
			$tabletasks.Columns.Add("Next Run Time")
			$tabletasks.Columns.Add("Status")
			$tabletasks.Columns.Add("Last Run Time")
			$tabletasks.Columns.Add("Author")
			$tabletasks.Columns.Add("Task To Run")
			$tabletasks.Columns.Add("Comment")
			$datagridview12.DataSource = $tabletasks
			
			$sb = {
				schtasks /query /FO CSV /v | ConvertFrom-Csv
			}
			$tasks = Invoke-Command -ComputerName $Computer -ScriptBlock $sb
			foreach ($o in $tasks)
			{
				If ($o.taskname -ne 'taskname')
				{
					$tabletasks.Rows.add($o.taskname, $o.'Next Run Time', $o.status, $o.'Last Run Time', $o.author, $o.'Task To Run', $o.comment)
					$datagridview12.Refresh()
				}
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\Scheduled_Tasks.csv"
			$datagridview12.Rows | select -expand DataBoundItem | export-csv $file -NoType
			$datagridview2.Rows.Add("Scheduled Tasks Data", "System", "Completed")
			$progressbar_audit.PerformStep()
			[System.Windows.Forms.Application]::DoEvents()
				
		}
		Get-ScheduledTasks
	#endregion
		#region Get-Software
		function Get-Software
		{
			Update-Log "Collecting Installed Software"
			$tableapps = New-Object system.Data.DataTable "Tableapps"
			$tableapps.Columns.Add("Name")
			$tableapps.Columns.Add("Vendor")
			$tableapps.Columns.Add("Version")
			$tableapps.Columns.Add("Identifier")
			$datagridview14.DataSource = $tableapps
			$sb = {
				Get-WmiObject Win32_Product
			}
			$apps = Invoke-Command -ComputerName $Computer -ScriptBlock $sb
			foreach ($o in $apps)
			{
				$tableapps.Rows.add($o.name, $o.vendor, $o.version, $o.identifyingnumber)
				$datagridview14.Refresh()
				
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\Installed_Software.csv"
			$datagridview14.Rows | select -expand DataBoundItem | export-csv $file -NoType
			$datagridview2.Rows.Add("Installed Software", "General", "Completed")
			$progressbar_audit.PerformStep()
			[System.Windows.Forms.Application]::DoEvents()
			
			
		}
		Get-Software
	#endregion
		#region Get-Hotfix
		Function Get-Hotfix
		{
			Update-Log "Collecting Installed Hotfixes"
			$tablefix = New-Object system.Data.DataTable "Tablefix"
			$tablefix.Columns.Add("Hot Fix ID")
			$tablefix.Columns.Add("Category")
			$tablefix.Columns.Add("Installed On")
			$datagridview16.DataSource = $tablefix
			
			$sb = {
				Get-HotFix | Select-Object HotfixID, Description, InstalledOn
				
			}
			$fix = Invoke-Command -ComputerName $Computer -ScriptBlock $sb
			foreach ($o in $fix)
			{
				$tablefix.Rows.add($o.hotfixid, $o.description, $o.installedon)
				$datagridview16.Refresh()
				
			}
			$file = "C:\Program Files\Sirda\collections\" + $Computer + "\Installed_HotFixes.csv"
			$datagridview16.Rows | select -expand DataBoundItem | export-csv $file -NoType
			$datagridview2.Rows.Add("Installed HotFixes", "General", "Completed")
			$progressbar_audit.PerformStep()
			[System.Windows.Forms.Application]::DoEvents()
		
		}
		Get-Hotfix
		#endregion
	
		
		# --------------------------------------------------------------------------- Auditing -----------------------------------------------
		#* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		#Scriptblock to run as jobs
		$Scriptblock = {
			
			param ($computer)
			#region Variables and Arguments   
			$Timer = Get-Random -Maximum 300 -Minimum 100
			Start-Sleep -m $timer
			[System.Threading.Thread]::CurrentThread.Priority = 'BelowNormal'
			[int]$ProcessNumToFetch = 10
			$ListOfAttachments = @()
			$Report = @()
			$date = Get-Date -format g
			$version = "3.1" #<<<<<<CHANGE THIS ANYTIME MODIFIED!
			$SysEvtFilter = [xml]@'
<QueryList>
  <Query Id="0" Path="System">
    <Select Path="System">*[System[(Level=1  or Level=2 or Level=3) and TimeCreated[timediff(@SystemTime) &lt;= 86400000]]]</Select>
  </Query>
</QueryList>
'@
			$AppEvtFilter = [xml]@'
<QueryList>
  <Query Id="0" Path="Application">
    <Select Path="Application">*[System[(Level=2 or Level=3) and TimeCreated[timediff(@SystemTime) &lt;= 86400000]]]</Select>
  </Query>
</QueryList>
'@
			$RedBang = 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAA2FBMVEX///++MjLnalHTJyDVKy3veGf8p6Tpd2HWYl/UKiPvemncTU/leF3fWTf2kYjZPkDWLjDUXlnwhHXXOjTUSyrYaGf1iH7NS0ncYj/USy/eVjTPJxPMJwDMJwb1hnzYOz7ONAX8o6DVQxnhbG7NTE3QKhfZPkHWVS7SXlfic3XnbFTZU0P+/v7PVle1IiHMR0ieGwD1qqD3xLyzSTLLf3DPNBaQHwL99fTcalDjeHTCb2uOFQ7KJhL21MyGJxC3LhWoHQTvuKnkycKAHgjsrqb01tPmmYLSnpF1j2u3AAAAAXRSTlMAQObYZgAAAKxJREFUeF5lz0WWw0AMRVEXmZkdZmZmbNj/jlpKO6PcyT/1RioJkZyUI5FcB3KUF6LacQXEtvoqxPN1IeYLIXTfg0J6yoBSuh0tKR0oPSIR0yqA8+gCY5kQ0ga6P544KYRuDf38bnC6EMIS2q1mOCGErIzW1xtOBmHYLoKv7xNMewghCTTG2P5wZEwLEjxk6ric88mEu870/9SW0amCjtF6f2bcb4L+GN8f3/8DQgYUGINoSt8AAAAASUVORK5CYII='
			$RedBangHTML = "<img src=data:image/png;base64,$($RedBang) alt='Error' style='vertical-align:middle;padding-right:5px;'/>"
			$YellowBang = 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACdklEQVR42mVSTU8TURR9JCQsoJKIq0oUookpBkJnphqXtD+AX8BfcMOWD2PbtCaaYCKRIhRFi1q1Frvwk6ihKMFFi9ICg0BRISIFtbQKKe3xvjcd08LizH25953zzr13mNVqZS0tLQcw55TaVLcE1W3GvEtp0+/ZbDb9juCWkCghQOQKTt55XS8ghFxKhS7Co35mxcq6esyhdK8P1wGfmoCPTVgfrkfMLnVT7YBjPVFMbvh8uRHZD8eBGVkgO3lMtDJjlxr2t8qJJarc7s/Ro0C8GblcDvl8HtuTjdjw10K9JGO/C1bc16xDal2+ZiLrJ4A5CblsSohER05hc6wOiasmzDqV1uKZ6Q5EnCebmZdGIK4I7GxNCQf+C7X4GjqNdMhIGzGjRIA+hd6l89/66eXpBiJbgFipQCJA+XcmrPadRJzulmwhelGuWaD+dl/VAlEztdBM0yc3q0H8WHkvBNaCJhKg1ZILPqdpu1Lz/z+IO2TXhpesjzHgLWGcEGbILPViJTKAqSsMSR/lgoTHdO43IuZUXJzLB3eO97U3Wg48Z5rIG44y/H1RjRVfNZY8DNt3KfeQcJ9hz1cuNhInLqMfxPfbe0RTDxGeMk3oGcOftSB2kxEk+hjStyl3j8Cd3GH4df0w6J/xMepdKzzQ7GG0IPSEWljuxZfIoJjB1kCBzIVuEW6WgW+NcfsY0azBX7AZIDyiV4mw0MOg0gxSXv6yTmbIDzExTOEgM2BAZsiAtLcS6aEq7UxIDVYh6anEJiF1w0D3DiHDo4fqhO89dWCB9jPuiQ5ZDXdaFie6LIsiEsY7ZC12KovhLp7T60qhpqiB9rPuf+YeJOq16/K9AAAAAElFTkSuQmCC'
			$YellowBangHTML = "<img src=data:image/png;base64,$($YellowBang) alt='Warning' style='vertical-align:middle;padding-right:5px;'/>"
			#endregion Variables and Arguments
			[System.Threading.Thread]::CurrentThread.Priority = 'BelowNormal'
			#region Functions
			Function Get-SystemInformation
			{
				param (
					[string[]]$ComputerName = $env:computername
				)
				foreach ($computer in $ComputerName)
				{
					
					$CompInfo = Get-WmiObject -Query "Select Manufacturer,Model FROM Win32_ComputerSystem" -computername $computer
					$W32OS = Get-WmiObject Win32_OperatingSystem -computername $computer
					
					
					$LastBootUpTime = $W32OS.ConvertToDateTime($W32OS.LastBootUpTime)
					$Time = (Get-Date) - $LastBootUpTime
					'{0:00} Days, {1:00} Hours, {2:00} Minutes, {3:00} Seconds' -f $Time.Days, $Time.Hours, $Time.Minutes, $Time.Seconds | Set-Variable Uptime
					$OSPowerInfo = Get-WmiObject -Namespace root\cimv2\power -Class win32_PowerPlan -computername $computer | Where-Object { $_.IsActive -eq "True" } | Select ElementName
					$CpuInfo = Get-WmiObject -ComputerName $computer -Class win32_processor
					$CpuName = $CpuInfo | Select -First 1 -Expand Name
					$CpuAddr = $CpuInfo | Select -First 1 -Expand DataWidth
					$CpuCores = $CpuInfo | Select -expand NumberOfCores
					$CpuLogProc = $CpuInfo | select -Expand NumberOfLogicalProcessors
					$CpuUsage = $CpuInfo | Select Loadpercentage | Measure-Object LoadPercentage -Average | Select-Object -expand Average
					$BIOS = Get-WmiObject -computername $computer -Query "SELECT Manufacturer,SMBIOSBIOSVersion,ReleaseDate FROM Win32_Bios"
					
					$SystemInformation = New-Object -Type PSObject -Property @{
						"System Manufacturer" = $CompInfo.Manufacturer
						"System Model"	      = $CompInfo.Model
						"BIOS Vendor"		  = $BIOS.Manufacturer
						"BIOS Version"	      = $BIOS.SMBIOSBIOSVersion
						"BIOS Date"		      = ($BIOS.ConvertToDateTime($BIOS.ReleaseDate)).ToShortDateString()
						"CPU Name"		      = ($CpuName) + ' x' + ($CpuAddr)
						"Physical CPU Cores"  = $CpuCores | Measure -Sum | Select -ExpandProperty Sum
						"Logical CPU Cores"   = $CpuLogProc | Measure -Sum | select -ExpandProperty Sum
						"System Uptime"	      = $Uptime
						"Operating System"    = $W32OS.caption + ($W32OS.CSDVersion)
						"Power Plan"		  = if ($OSPowerInfo.ElementName -notlike "*Performance") { "$($OSPowerInfo.ElementName) (Recommended Plan: High Performance)" }
						else { $OSPowerInfo.ElementName }
						"CPU % Usage"		  = [string](-join $CpuUsage, "%") -replace " ", ""
						"Total RAM (GB)"	  = [Math]::Round(($W32OS.TotalVisibleMemorySize/1MB), 2)
						"Free RAM (GB)"	      = [Math]::Round(($W32OS.FreePhysicalMemory/1MB), 2)
						"Free RAM %"		  = [Math]::Round((($W32OS.FreePhysicalMemory/$W32OS.TotalVisibleMemorySize) * 100), 2)
					}
					
					$SystemInformation
				}
				
			}
			Function Create-ProcBarChart
			{
				param ($ComputerName = $env:computername,
					[int32]$ProcessNumber
				)
				[void][Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
				[void][Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms.DataVisualization")
				
				# chart object
				try
				{
					$chart1 = New-object System.Windows.Forms.DataVisualization.Charting.Chart
					$chart1.Width = 400
					$chart1.Height = 200
					$chart1.BackColor = [System.Drawing.Color]::White
					
					# title
					#[void]$chart1.Titles.Add("Top $ProcessNumber - Memory Usage")
					#$chart1.Titles[0].Font = "Arial,11pt"
					#$chart1.Titles[0].Alignment = "topLeft"
					
					# chart area
					$chartarea = New-Object System.Windows.Forms.DataVisualization.Charting.ChartArea
					$chartarea.Name = "ChartArea1"
					$Chartarea.AxisX.MajorGrid.LineWidth = 0
					$Chartarea.AxisY.MajorGrid.LineWidth = 0
					$chartarea.AxisY.Title = "Memory (MB)"
					$chartarea.AxisX.Title = "Process Name"
					$chartarea.AxisY.IsLogarithmic = $true
					#$chartarea.AxisY.Interval = 100
					$chartarea.AxisX.Interval = 1
					$chart1.ChartAreas.Add($chartarea)
					
					# legend
					$legend = New-Object system.Windows.Forms.DataVisualization.Charting.Legend
					$legend.name = "Legend1"
					$legend.font = "Arial"
					$Legend.docking = "Top"
					$Legend.title = "Processes"
					$Legend.TitleFont = "Arial"
					$legend.alignment = "center"
					$Legend.Istextautofit = $true
					$chart1.Legends.Add($legend)
					
					
					# data source
					$datasource = Get-WmiObject -ComputerName $computer -Query "SELECT Description,ProcessID,WorkingSetSize FROM Win32_Process" | Select Description, ProcessID, WorkingSetSize | sort WorkingSetSize -Descending | Select-Object -First $ProcessNumber
					
					# data series
					[void]$chart1.Series.Add("WSMem")
					$chart1.Series["WSMem"].ChartType = "Column"
					$chart1.Series["WSMem"].IsVisibleInLegend = $false
					#$chart1.Series["WSMem"].IsVisibleInLegend = $true
					$chart1.Series["WSMem"].BorderWidth = 3
					$chart1.Series["WSMem"].chartarea = "ChartArea1"
					$chart1.Series["WSMem"].Legend = "Legend1"
					$chart1.Series["WSMem"].Palette = "SemiTransparent"
					$Chart1.Series["WSMem"]["DrawingStyle"] = "Cylinder"
					$datasource | ForEach-Object { $chart1.Series["WSMem"].Points.addxy(("PID " + $_.ProcessID + " " + ([Math]::Round($_.WorkingSetSize / 1mb)) + " MB"), ([Math]::Round($_.WorkingSetSize / 1mb))) }
					
					
					# save chart
					$chart1.SaveImage($env:tmp + "\ProcBar-" + $computername + ".png", "png")
				}
				catch
				{
					"Error creating chart. Verify Microsoft Chart Controls for Microsoft .NET Framework 3.5 is installed"
				}
			}
			Function Create-RAMPieChart
			{
				param ($ComputerName = $env:computername
				)
				
				[void][Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
				[void][Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms.DataVisualization")
				
				#Gather RAM Data
				$SystemInfo = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $ComputerName | Select-Object Name, TotalVisibleMemorySize, FreePhysicalMemory
				$TotalRAM = $SystemInfo.TotalVisibleMemorySize/1MB
				$FreeRAM = $SystemInfo.FreePhysicalMemory/1MB
				$UsedRAM = $TotalRAM - $FreeRAM
				$RAMPercentFree = ($FreeRAM / $TotalRAM) * 100
				$Free = [Math]::Round($FreeRAM, 2)
				$Used = [Math]::Round($UsedRAM, 2)
				
				
				#Create our chart object
				try
				{
					$Chart = New-object System.Windows.Forms.DataVisualization.Charting.Chart
					$Chart.Width = 200
					$Chart.Height = 200
					$Chart.Left = 10
					$Chart.Top = 10
					
					#Create a chartarea to draw on and add this to the chart
					$ChartArea = New-Object System.Windows.Forms.DataVisualization.Charting.ChartArea
					$Chart.ChartAreas.Add($ChartArea)
					[void]$Chart.Series.Add("Data")
					#Add a datapoint for each value specified in the arguments (args)
					$datapoint = new-object System.Windows.Forms.DataVisualization.Charting.DataPoint(0, $Used)
					$datapoint.AxisLabel = "$used GB Used"
					$datapoint.Color = "FireBrick"
					$Chart.Series["Data"].Points.Add($datapoint)
					$datapoint1 = new-object System.Windows.Forms.DataVisualization.Charting.DataPoint(0, $Free)
					$datapoint1.AxisLabel = "$Free GB Free"
					$datapoint1.Color = "DodgerBlue"
					$Chart.Series["Data"].Points.Add($datapoint1)
					$Chart.Series["Data"].ChartType = [System.Windows.Forms.DataVisualization.Charting.SeriesChartType]::Doughnut
					$Chart.Series["Data"]["PieLabelStyle"] = "Outside"
					$Chart.Series["Data"]["PieLineColor"] = "Black"
					$Chart.Series["Data"]["PieDrawingStyle"] = "Concave"
					($Chart.Series["Data"].Points.FindMaxByValue())["Exploded"] = $true
					$Chart.Series["Data"].Font = "Arial"
					
					# Create chart legend
					$legend = New-Object system.Windows.Forms.DataVisualization.Charting.Legend
					$legend.name = "Legend1"
					$legend.font = "Arial"
					$Legend.docking = "Top"
					$Legend.title = "RAM Usage"
					$Legend.TitleFont = "Arial"
					$legend.alignment = "center"
					$Legend.Istextautofit = $true
					
					
					# Add chart legend to chart object
					$chart.legends.add($legend)
					
					#Set the title of the Chart to the current date and time
					$Title = new-object System.Windows.Forms.DataVisualization.Charting.Title
					#$Chart.Titles.Add($Title)
					#$Chart.Titles[0].Text = "RAM Usage"
					#$Chart.Titles[0].Font = "Arial"
					#Save the chart to a file
					$Chart.SaveImage($env:temp + "\RAM-" + $computername + ".png", "png")
					
				}
				catch
				{
					#
				}
			}
			Function Create-CPUPieChart
			{
				param ($ComputerName = $env:computername
				)
				
				[void][Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms")
				[void][Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms.DataVisualization")
				
				#Get CPU Data
				$CpuInfo = Get-WmiObject -ComputerName $computername -Class win32_processor
				$CpuName = $CpuInfo | Select -First 1 -Expand Name
				$CpuAddr = $CpuInfo | Select -First 1 -Expand DataWidth
				$CpuCores = $CpuInfo | Select -expand NumberOfCores
				$CpuUsage = $CpuInfo | Select Loadpercentage | Measure-Object LoadPercentage -Average | Select-Object -expand Average
				$CpuFree = 100 - [int]$CpuUsage
				
				
				#Create our chart object
				try
				{
					$Chart = New-object System.Windows.Forms.DataVisualization.Charting.Chart
					$Chart.Width = 200
					$Chart.Height = 200
					$Chart.Left = 10
					$Chart.Top = 10
					
					#Create a chartarea to draw on and add this to the chart
					$ChartArea = New-Object System.Windows.Forms.DataVisualization.Charting.ChartArea
					$Chart.ChartAreas.Add($ChartArea)
					[void]$Chart.Series.Add("Data")
					#Add a datapoint for each value specified in the arguments (args)
					$datapoint = new-object System.Windows.Forms.DataVisualization.Charting.DataPoint(0, $CpuUsage)
					$datapoint.AxisLabel = "$CpuUsage% Used"
					$datapoint.Color = "FireBrick"
					$Chart.Series["Data"].Points.Add($datapoint)
					$datapoint1 = new-object System.Windows.Forms.DataVisualization.Charting.DataPoint(0, $CpuFree)
					$datapoint1.AxisLabel = "$CPUFree% Free"
					$datapoint1.Color = "DodgerBlue"
					$Chart.Series["Data"].Points.Add($datapoint1)
					
					
					$Chart.Series["Data"].ChartType = [System.Windows.Forms.DataVisualization.Charting.SeriesChartType]::Doughnut
					$Chart.Series["Data"]["PieLabelStyle"] = "Outside"
					$Chart.Series["Data"]["PieLineColor"] = "Black"
					$Chart.Series["Data"]["PieDrawingStyle"] = "Concave"
					($Chart.Series["Data"].Points.FindMaxByValue())["Exploded"] = $true
					$Chart.Series["Data"].Font = "Arial"
					
					# Create chart legend
					$legend = New-Object system.Windows.Forms.DataVisualization.Charting.Legend
					$legend.name = "Legend1"
					$legend.font = "Arial"
					$Legend.docking = "Top"
					$Legend.title = "CPU Usage"
					$Legend.TitleFont = "Arial"
					$legend.alignment = "center"
					$Legend.Istextautofit = $true
					
					
					# Add chart legend to chart object
					$chart.legends.add($legend)
					
					#Save the chart to a file
					$Chart.SaveImage($env:tmp + "\CPU-" + $computername + ".png", "png")
				}
				catch
				{
					#
				}
			}
			Function Get-RemoteRouteTable
			{
	    <#
	    .SYNOPSIS
	       Gathers remote system route entries.
	    .DESCRIPTION
	       Gathers remote system route entries, including persistent routes. Utilizes multiple runspaces and
	       alternate credentials if desired.
	    .PARAMETER ComputerName
	       Specifies the target computer for data query.
	    .PARAMETER ThrottleLimit
	       Specifies the maximum number of systems to inventory simultaneously
	    .PARAMETER Timeout
	       Specifies the maximum time in second command can run in background before terminating this thread.
	    .PARAMETER ShowProgress
	       Show progress bar information
	    .EXAMPLE
	       PS > Get-RemoteRouteTable
	       <output>
	      
	       Description
	       -----------
	       <Placeholder>
	    .NOTES
	       Author: Zachary Loeber
	       Site: http://www.the-little-things.net/
	       Requires: Powershell 2.0
	       Version History
	       1.0.0 - 08/31/2013
	        - Initial release
	    #>
				[CmdletBinding()]
				PARAM
				(
					[Parameter(HelpMessage = "Computer or computers to gather information from",
							   ValueFromPipeline = $true,
							   ValueFromPipelineByPropertyName = $true,
							   Position = 0)]
					[ValidateNotNullOrEmpty()]
					[Alias('DNSHostName', 'PSComputerName')]
					[string[]]$ComputerName = $env:computername,
					[Parameter(HelpMessage = "Maximum number of concurrent threads")]
					[ValidateRange(1, 65535)]
					[int32]$ThrottleLimit = 32,
					[Parameter(HelpMessage = "Timeout before a thread stops trying to gather the information")]
					[ValidateRange(1, 65535)]
					[int32]$Timeout = 120,
					[Parameter(HelpMessage = "Display progress of function")]
					[switch]$ShowProgress,
					[Parameter(HelpMessage = "Set this if you want the function to prompt for alternate credentials")]
					[switch]$PromptForCredential,
					[Parameter(HelpMessage = "Set this if you want to provide your own alternate credentials")]
					[System.Management.Automation.Credential()]
					$Credential = [System.Management.Automation.PSCredential]::Empty
				)
				BEGIN
				{
					# Gather possible local host names and IPs to prevent credential utilization in some cases
					$IPAddresses = [net.dns]::GetHostAddresses($env:COMPUTERNAME) | Select-Object -ExpandProperty IpAddressToString
					$HostNames = $IPAddresses | ForEach-Object {
						try
						{
							[net.dns]::GetHostByAddress($_)
						}
						catch
						{
							# We do not care about errors here...
						}
					} | Select-Object -ExpandProperty HostName -Unique
					$LocalHost = @('', '.', 'localhost', $env:COMPUTERNAME, '::1', '127.0.0.1') + $IPAddresses + $HostNames
					$runspacetimers = [HashTable]::Synchronized(@{ })
					$runspaces = New-Object -TypeName System.Collections.ArrayList
					$bgRunspaceCounter = 0
					
					if ($PromptForCredential)
					{
						$Credential = Get-Credential
					}
					$iss = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()
					foreach ($ExternalVariable in ('runspacetimers', 'Credential', 'LocalHost'))
					{
						$iss.Variables.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList $ExternalVariable, (Get-Variable -Name $ExternalVariable -ValueOnly), ''))
					}
					$rp = [System.Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, $ThrottleLimit, $iss, $Host)
					$rp.ApartmentState = 'STA'
					$rp.Open()
					
					# This is the actual code called for each computer
					$ScriptBlock = {
						[CmdletBinding()]
						Param
						(
							[Parameter(Position = 0)]
							[string]$ComputerName,
							[Parameter(Position = 1)]
							[int]$bgRunspaceID
						)
						$runspacetimers.$bgRunspaceID = Get-Date
						
						try
						{
							$WMIHast = @{
								ComputerName = $ComputerName
								ErrorAction  = 'Stop'
							}
							if (($LocalHost -notcontains $ComputerName) -and ($Credential -ne $null))
							{
								$WMIHast.Credential = $Credential
							}
							# General variables
							$ResultSet = @()
							$PSDateTime = Get-Date
							$RouteType = @('Unknown', 'Other', 'Invalid', 'Direct', 'Indirect')
							$Routes = @()
							
							#region Routes
							write-verbose ('Remote Route Table: Runspace {0}: Route table information' -f $ComputerName)
							# Modify this variable to change your default set of display properties
							$defaultProperties = @('ComputerName', 'Routes')
							
							# WMI data
							$wmi_routes = Get-WmiObject @WMIHast -Class win32_ip4RouteTable
							$wmi_persistedroutes = Get-WmiObject @WMIHast -Class win32_IP4PersistedRouteTable
							foreach ($iproute in $wmi_routes)
							{
								$Persistant = $false
								foreach ($piproute in $wmi_persistedroutes)
								{
									if (($iproute.Destination -eq $piproute.Destination) -and
										($iproute.Mask -eq $piproute.Mask) -and
										($iproute.NextHop -eq $piproute.NextHop))
									{
										$Persistant = $true
									}
								}
								$RouteProperty = @{
									'InterfaceIndex' = $iproute.InterfaceIndex
									'Destination'    = $iproute.Destination
									'Mask'		     = $iproute.Mask
									'NextHop'	     = $iproute.NextHop
									'Metric'		 = $iproute.Metric1
									'Persistent'	 = $Persistant
									'Type'		     = $RouteType[[int]$iproute.Type]
								}
								$Routes += New-Object -TypeName PSObject -Property $RouteProperty
							}
							# Setup the default properties for output
							$ResultObject = New-Object PSObject -Property @{
								'PSComputerName' = $ComputerName
								'ComputerName'   = $ComputerName
								'PSDateTime'	 = $PSDateTime
								'Routes'		 = $Routes
							}
							$ResultObject.PSObject.TypeNames.Insert(0, 'My.RouteTable.Info')
							$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet', [string[]]$defaultProperties)
							$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)
							$ResultObject | Add-Member MemberSet PSStandardMembers $PSStandardMembers
							#endregion Routes
							Write-Output -InputObject $ResultObject
						}
						catch
						{
							Write-Warning -Message ('Remote Route Table: {0}: {1}' -f $ComputerName, $_.Exception.Message)
						}
					}
					
					Function Get-Result
					{
						[CmdletBinding()]
						Param
						(
							[switch]$Wait
						)
						do
						{
							$More = $false
							foreach ($runspace in $runspaces)
							{
								$StartTime = $runspacetimers[$runspace.ID]
								if ($runspace.Handle.isCompleted)
								{
									$runspace.PowerShell.EndInvoke($runspace.Handle)
									$runspace.PowerShell.Dispose()
									$runspace.PowerShell = $null
									$runspace.Handle = $null
								}
								elseif ($runspace.Handle -ne $null)
								{
									$More = $true
								}
								if ($Timeout -and $StartTime)
								{
									if ((New-TimeSpan -Start $StartTime).TotalSeconds -ge $Timeout -and $runspace.PowerShell)
									{
										Write-Warning -Message ('Timeout {0}' -f $runspace.IObject)
										$runspace.PowerShell.Dispose()
										$runspace.PowerShell = $null
										$runspace.Handle = $null
									}
								}
							}
							if ($More -and $PSBoundParameters['Wait'])
							{
								Start-Sleep -Milliseconds 100
							}
							foreach ($threat in $runspaces.Clone())
							{
								if (-not $threat.handle)
								{
									$runspaces.Remove($threat)
								}
							}
							if ($ShowProgress)
							{
								$ProgressSplatting = @{
									Activity = 'Remote Route Table: Getting info'
									Status   = 'Remote Route Table: {0} of {1} total threads done' -f ($bgRunspaceCounter - $runspaces.Count), $bgRunspaceCounter
									PercentComplete = ($bgRunspaceCounter - $runspaces.Count) / $bgRunspaceCounter * 100
								}
								Write-Progress @ProgressSplatting
							}
						}
						while ($More -and $PSBoundParameters['Wait'])
					}
				}
				PROCESS
				{
					foreach ($Computer in $ComputerName)
					{
						$bgRunspaceCounter++
						$psCMD = [System.Management.Automation.PowerShell]::Create().AddScript($ScriptBlock)
						$null = $psCMD.AddParameter('bgRunspaceID', $bgRunspaceCounter)
						$null = $psCMD.AddParameter('ComputerName', $Computer)
						$null = $psCMD.AddParameter('Verbose', $VerbosePreference)
						$psCMD.RunspacePool = $rp
						[void]$runspaces.Add(@{
								Handle = $psCMD.BeginInvoke()
								PowerShell = $psCMD
								IObject = $Computer
								ID	   = $bgRunspaceCounter
							})
						Get-Result
					}
				}
				END
				{
					Get-Result -Wait
					if ($ShowProgress)
					{
						Write-Progress -Activity 'Remote Route Table: Getting route table information' -Status 'Done' -Completed
					}
					$rp.Close()
					$rp.Dispose()
				}
			}
			Function Get-RemoteScheduledTasks
			{
	    <#
	    .SYNOPSIS
	        Gather scheduled task information from a remote system or systems.
	    .DESCRIPTION
	        Gather scheduled task information from a remote system or systems. If remote credentials
	        are provided PSremoting will be utilized.
	    .PARAMETER ComputerName
	        Specifies the target computer or computers for data query.
	    .PARAMETER UseRemoting
	        Override defaults and use PSRemoting. If an alternate credential is specified PSRemoting is assumed.
	    .PARAMETER ThrottleLimit
	        Specifies the maximum number of systems to inventory simultaneously
	    .PARAMETER Timeout
	        Specifies the maximum time in second command can run in background before terminating this thread.
	    .PARAMETER ShowProgress
	        Show progress bar information
	    .EXAMPLE
	        PS > (Get-RemoteScheduledTasks).Tasks |
	             Where {(!$_.Hidden) -and ($_.Enabled) -and ($_.NextRunTime -ne 'None')} |
	             Select Name,Enabled,NextRunTime,Author
	        Name                     Enabled   NextRunTime               Author                      
	        ----                     -------   -----------               ------                  
	        Adobe Flash Player Upd...True      10/4/2013 10:24:00 PM     Adobe
	      
	        Description
	        -----------
	        Gathers all scheduled tasks then filters out all which are enabled, has a next
	        run time, and is not hidden and displays the result in a table.
	    .EXAMPLE
	        PS > $cred = Get-Credential
	        PS > $Servers = @('SERVER1','SERVER2')
	        PS > $a = Get-RemoteScheduledTasks -Credential $cred -ComputerName $Servers
	        Description
	        -----------
	        Using an alternate credential (and thus PSremoting), $a gets assigned all of the
	        scheduled tasks from SERVER1 and SERVER2.
	       
	    .NOTES
	        Author: Zachary Loeber
	        Site: http://www.the-little-things.net/
	        Requires: Powershell 2.0
	        Version History
	        1.0.0 - 10/04/2013
	        - Initial release
	       
	        Note:
	       
	        I used code from a few sources to create this script;
	            - http://p0w3rsh3ll.wordpress.com/2012/10/22/working-with-scheduled-tasks/
	            - http://gallery.technet.microsoft.com/Get-Scheduled-tasks-from-3a377294
	       
	        I was unable to find several of the Task last exit codes. A good number of them
	        from the following source have been included tough;
	            - http://msdn.microsoft.com/en-us/library/windows/desktop/aa383604(v=vs.85).aspx
	    #>
				[cmdletbinding()]
				PARAM
				(
					[Parameter(HelpMessage = "Computer or computers to gather information from",
							   ValueFromPipeline = $true,
							   ValueFromPipelineByPropertyName = $true,
							   Position = 0)]
					[ValidateNotNullOrEmpty()]
					[Alias('DNSHostName', 'PSComputerName')]
					[string[]]$ComputerName = $env:computername,
					[Parameter(HelpMessage = "Override defaults and use PSRemoting. If an alternate credential is specified PSRemoting is assumed.")]
					[switch]$UseRemoting,
					[Parameter(HelpMessage = "Maximum number of concurrent threads")]
					[ValidateRange(1, 65535)]
					[int32]$ThrottleLimit = 32,
					[Parameter(HelpMessage = "Timeout before a thread stops trying to gather the information")]
					[ValidateRange(1, 65535)]
					[int32]$Timeout = 120,
					[Parameter(HelpMessage = "Display progress of function")]
					[switch]$ShowProgress,
					[Parameter(HelpMessage = "Set this if you want the function to prompt for alternate credentials")]
					[switch]$PromptForCredential,
					[Parameter(HelpMessage = "Set this if you want to provide your own alternate credentials")]
					[System.Management.Automation.Credential()]
					$Credential = [System.Management.Automation.PSCredential]::Empty
				)
				BEGIN
				{
					$ProcessWithPSRemoting = $UseRemoting
					$ComputerNames = @()
					
					# Gather possible local host names and IPs to prevent credential utilization in some cases
					$IPAddresses = [net.dns]::GetHostAddresses($env:COMPUTERNAME) | Select-Object -ExpandProperty IpAddressToString
					$HostNames = $IPAddresses | ForEach-Object {
						try
						{
							[net.dns]::GetHostByAddress($_)
						}
						catch
						{
							# We do not care about errors here...
						}
					} | Select-Object -ExpandProperty HostName -Unique
					$LocalHost = @('', '.', 'localhost', $env:COMPUTERNAME, '::1', '127.0.0.1') + $IPAddresses + $HostNames
					$runspacetimers = [HashTable]::Synchronized(@{ })
					$runspaces = New-Object -TypeName System.Collections.ArrayList
					$bgRunspaceCounter = 0
					
					if ($PromptForCredential)
					{
						$Credential = Get-Credential
						$ProcessWithPSRemoting = $true
					}
					$iss = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()
					foreach ($ExternalVariable in ('runspacetimers', 'Credential', 'LocalHost'))
					{
						$iss.Variables.Add((New-Object -TypeName System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList $ExternalVariable, (Get-Variable -Name $ExternalVariable -ValueOnly), ''))
					}
					$rp = [System.Management.Automation.Runspaces.RunspaceFactory]::CreateRunspacePool(1, $ThrottleLimit, $iss, $Host)
					$rp.ApartmentState = 'STA'
					$rp.Open()
					
					# This is the actual code called for each computer
					$ScriptBlock =
					{
						Param
						(
							[Parameter(Position = 0)]
							[string]$ComputerName,
							[Parameter(Position = 1)]
							[int]$bgRunspaceID,
							[Parameter()]
							[switch]$UseRemoting
						)
						$runspacetimers.$bgRunspaceID = Get-Date
						$GetScheduledTask = {
							param (
								$computername = "localhost"
							)
							Function Get-TaskSubFolders
							{
								param (
									[string]$folder = '\',
									[switch]$recurse
								)
								$folder
								if ($recurse)
								{
									$TaskService.GetFolder($folder).GetFolders(0) |
									ForEach-Object {
										Get-TaskSubFolders $_.Path -Recurse
									}
								}
								else
								{
									$TaskService.GetFolder($folder).GetFolders(0)
								}
							}
							try
							{
								$TaskService = new-object -com ("Schedule.Service")
								$TaskService.connect($ComputerName)
								$AllFolders = Get-TaskSubFolders -Recurse
								$TaskResults = @()
								foreach ($Folder in $AllFolders)
								{
									$TaskService.GetFolder($Folder).GetTasks(1) |
									Foreach-Object {
										switch ([int]$_.State)
										{
											0 { $State = 'Unknown' }
											1 { $State = 'Disabled' }
											2 { $State = 'Queued' }
											3 { $State = 'Ready' }
											4 { $State = 'Running' }
											default { $State = $_ }
										}
										
										switch ($_.NextRunTime)
										{
											(Get-Date -Year 1899 -Month 12 -Day 30 -Minute 00 -Hour 00 -Second 00) { $NextRunTime = "None" }
											default { $NextRunTime = $_ }
										}
										
										switch ($_.LastRunTime)
										{
											(Get-Date -Year 1899 -Month 12 -Day 30 -Minute 00 -Hour 00 -Second 00) { $LastRunTime = "Never" }
											default { $LastRunTime = $_ }
										}
										switch (([xml]$_.XML).Task.RegistrationInfo.Author)
										{
											'$(@%ProgramFiles%\Windows Media Player\wmpnscfg.exe,-1001)'   { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\acproxy.dll,-101)'                   { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\aepdu.dll,-701)'                     { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\aitagent.exe,-701)'                  { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\appidsvc.dll,-201)'                  { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\appidsvc.dll,-301)'                  { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\System32\AuxiliaryDisplayServices.dll,-1001)' { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\bfe.dll,-2001)'                      { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\BthUdTask.exe,-1002)'                { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\cscui.dll,-5001)'                    { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\System32\DFDTS.dll,-101)'                     { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\dimsjob.dll,-101)'                   { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\dps.dll,-600)'                       { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\drivers\tcpip.sys,-10000)'           { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\defragsvc.dll,-801)'                 { $Author = 'Microsoft Corporation' }
											'$(@%systemRoot%\system32\energy.dll,-103)'                    { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\HotStartUserAgent.dll,-502)'         { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\kernelceip.dll,-600)'                { $Author = 'Microsoft Corporation' }
											'$(@%systemRoot%\System32\lpremove.exe,-100)'                  { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\memdiag.dll,-230)'                   { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\mscms.dll,-201)'                     { $Author = 'Microsoft Corporation' }
											'$(@%systemRoot%\System32\msdrm.dll,-6001)'                    { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\msra.exe,-686)'                      { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\nettrace.dll,-6911)'                 { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\osppc.dll,-200)'                     { $Author = 'Microsoft Corporation' }
											'$(@%systemRoot%\System32\perftrack.dll,-2003)'                { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\PortableDeviceApi.dll,-102)'         { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\profsvc,-500)'                       { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\RacEngn.dll,-501)'                   { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\rasmbmgr.dll,-201)'                  { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\regidle.dll,-600)'                   { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\sdclt.exe,-2193)'                    { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\sdiagschd.dll,-101)'                 { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\sppc.dll,-200)'                      { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\srrstr.dll,-321)'                    { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\upnphost.dll,-215)'                  { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\usbceip.dll,-600)'                   { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\w32time.dll,-202)'                   { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\wdc.dll,-10041)'                     { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\wer.dll,-293)'                       { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\System32\wpcmig.dll,-301)'                    { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\System32\wpcumi.dll,-301)'                    { $Author = 'Microsoft Corporation' }
											'$(@%systemroot%\system32\winsatapi.dll,-112)'                 { $Author = 'Microsoft Corporation' }
											'$(@%SystemRoot%\system32\wat\WatUX.exe,-702)'                 { $Author = 'Microsoft Corporation' }
											default { $Author = $_ }
										}
										switch (([xml]$_.XML).Task.RegistrationInfo.Date)
										{
											''      { $Created = 'Unknown' }
											default { $Created = Get-Date -Date $_ }
										}
										Switch (([xml]$_.XML).Task.Settings.Hidden)
										{
											false { $Hidden = $false }
											true  { $Hidden = $true }
											default { $Hidden = $false }
										}
										Switch (([xml]$_.xml).Task.Principals.Principal.UserID)
										{
											'S-1-5-18' { $userid = 'Local System' }
											'S-1-5-19' { $userid = 'Local Service' }
											'S-1-5-20' { $userid = 'Network Service' }
											default { $userid = $_ }
										}
										Switch ($_.lasttaskresult)
										{
											'0' { $LastTaskDetails = 'The operation completed successfully.' }
											'1' { $LastTaskDetails = 'Incorrect function called or unknown function called.' }
											'2' { $LastTaskDetails = 'File not found.' }
											'10' { $LastTaskDetails = 'The environment is incorrect.' }
											'267008' { $LastTaskDetails = 'Task is ready to run at its next scheduled time.' }
											'267009' { $LastTaskDetails = 'Task is currently running.' }
											'267010' { $LastTaskDetails = 'The task will not run at the scheduled times because it has been disabled.' }
											'267011' { $LastTaskDetails = 'Task has not yet run.' }
											'267012' { $LastTaskDetails = 'There are no more runs scheduled for this task.' }
											'267013' { $LastTaskDetails = 'One or more of the properties that are needed to run this task on a schedule have not been set.' }
											'267014' { $LastTaskDetails = 'The last run of the task was terminated by the user.' }
											'267015' { $LastTaskDetails = 'Either the task has no triggers or the existing triggers are disabled or not set.' }
											'2147750671' { $LastTaskDetails = 'Credentials became corrupted.' }
											'2147750687' { $LastTaskDetails = 'An instance of this task is already running.' }
											'2147943645' { $LastTaskDetails = 'The service is not available (is "Run only when an user is logged on" checked?).' }
											'3221225786' { $LastTaskDetails = 'The application terminated as a result of a CTRL+C.' }
											'3228369022' { $LastTaskDetails = 'Unknown software exception.' }
											default { $LastTaskDetails = $_ }
										}
										$TaskProps = @{
											'Name' = $_.name
											'Path' = $_.path
											'State' = $State
											'Created' = $Created
											'Enabled' = $_.enabled
											'Hidden' = $Hidden
											'LastRunTime' = $LastRunTime
											'LastTaskResult' = $_.lasttaskresult
											'LastTaskDetails' = $LastTaskDetails
											'NumberOfMissedRuns' = $_.numberofmissedruns
											'NextRunTime' = $NextRunTime
											'Author' = $Author
											'UserId' = $UserID
											'Description' = ([xml]$_.xml).Task.RegistrationInfo.Description
										}
										$TaskResults += New-Object PSCustomObject -Property $TaskProps
									}
								}
								Write-Output -InputObject $TaskResults
							}
							catch
							{
								Write-Warning -Message ('Scheduled Tasks: {0}: {1}' -f $ComputerName, $_.Exception.Message)
							}
						}
						try
						{
							$RemoteSplat = @{
								ComputerName = $ComputerName
								ErrorAction  = 'Stop'
							}
							$ProcessWithPSRemoting = $UseRemoting
							if (($LocalHost -notcontains $ComputerName) -and
								($Credential -ne [System.Management.Automation.PSCredential]::Empty))
							{
								$RemoteSplat.Credential = $Credential
								$ProcessWithPSRemoting = $true
							}
							$PSDateTime = Get-Date
							$defaultProperties = @('ComputerName', 'Tasks')
							if ($ProcessWithPSRemoting)
							{
								$Results = @(Invoke-Command  @RemoteSplat `
															-ScriptBlock $GetScheduledTask `
															-ArgumentList 'localhost')
								$PSConnection = 'PSRemoting'
							}
							else
							{
								$Results = @(&$GetScheduledTask -ComputerName $ComputerName)
								$PSConnection = 'Direct'
							}
							
							$ResultProperty = @{
								'PSComputerName' = $ComputerName
								'PSDateTime'	 = $PSDateTime
								'PSConnection'   = $PSConnection
								'ComputerName'   = $ComputerName
								'Tasks'		     = $Results
							}
							$ResultObject = New-Object -TypeName PSObject -Property $ResultProperty
							
							# Setup the default properties for output
							$ResultObject.PSObject.TypeNames.Insert(0, 'My.ScheduledTask.Info')
							$defaultDisplayPropertySet = New-Object System.Management.Automation.PSPropertySet('DefaultDisplayPropertySet', [string[]]$defaultProperties)
							$PSStandardMembers = [System.Management.Automation.PSMemberInfo[]]@($defaultDisplayPropertySet)
							$ResultObject | Add-Member MemberSet PSStandardMembers $PSStandardMembers
							Write-Output -InputObject $ResultObject
						}
						catch
						{
							Write-Warning -Message ('Scheduled Tasks: {0}: {1}' -f $ComputerName, $_.Exception.Message)
						}
					}
					
					Function Get-Result
					{
						[CmdletBinding()]
						Param
						(
							[switch]$Wait
						)
						do
						{
							$More = $false
							foreach ($runspace in $runspaces)
							{
								$StartTime = $runspacetimers.($runspace.ID)
								if ($runspace.Handle.isCompleted)
								{
									$runspace.PowerShell.EndInvoke($runspace.Handle)
									$runspace.PowerShell.Dispose()
									$runspace.PowerShell = $null
									$runspace.Handle = $null
								}
								elseif ($runspace.Handle -ne $null)
								{
									$More = $true
								}
								if ($Timeout -and $StartTime)
								{
									if ((New-TimeSpan -Start $StartTime).TotalSeconds -ge $Timeout -and $runspace.PowerShell)
									{
										Write-Warning -Message ('Timeout {0}' -f $runspace.IObject)
										$runspace.PowerShell.Dispose()
										$runspace.PowerShell = $null
										$runspace.Handle = $null
									}
								}
							}
							if ($More -and $PSBoundParameters['Wait'])
							{
								Start-Sleep -Milliseconds 100
							}
							foreach ($threat in $runspaces.Clone())
							{
								if (-not $threat.handle)
								{
									$runspaces.Remove($threat)
								}
							}
							if ($ShowProgress)
							{
								$ProgressSplatting = @{
									Activity = 'Scheduled Tasks: Getting info'
									Status   = 'Scheduled Tasks: {0} of {1} total threads done' -f ($bgRunspaceCounter - $runspaces.Count), $bgRunspaceCounter
									PercentComplete = ($bgRunspaceCounter - $runspaces.Count) / $bgRunspaceCounter * 100
								}
								Write-Progress @ProgressSplatting
							}
						}
						while ($More -and $PSBoundParameters['Wait'])
					}
				}
				PROCESS
				{
					$ComputerNames += $ComputerName
				}
				END
				{
					foreach ($Computer in $ComputerName)
					{
						$bgRunspaceCounter++
						$psCMD = [System.Management.Automation.PowerShell]::Create().AddScript($ScriptBlock)
						$null = $psCMD.AddParameter('bgRunspaceID', $bgRunspaceCounter)
						$null = $psCMD.AddParameter('ComputerName', $Computer)
						$null = $psCMD.AddParameter('UseRemoting', $UseRemoting)
						$null = $psCMD.AddParameter('Verbose', $VerbosePreference)
						$psCMD.RunspacePool = $rp
						[void]$runspaces.Add(@{
								Handle = $psCMD.BeginInvoke()
								PowerShell = $psCMD
								IObject = $Computer
								ID	   = $bgRunspaceCounter
							})
						Get-Result
					}
					
					Get-Result -Wait
					if ($ShowProgress)
					{
					}
					$rp.Close()
					$rp.Dispose()
				}
			}
			Function Get-Startup
			{
				param (
					[string]$ComputerName = $env:COMPUTERNAME
				)
				$GetStartup = gwmi -ComputerName $ComputerName Win32_StartupCommand |
				Select Name, Command, Location, User
				Return $GetStartup
			}
			Function Get-MSHotfix
			{
				param (
					[string]$ComputerName = $env:COMPUTERNAME
				)
				$GetMSHotFix = gwmi -ComputerName $ComputerName -Query "SELECT HotFixID,Caption,Description,InstalledOn,InstalledBy FROM win32_quickfixengineering" |
				Sort InstalledOn -Descending |
				Select HotFixID, Caption, Description, InstalledOn, InstalledBy
				Return $GetMSHotFix
			}
			Function Get-NicInfo
			{
				param ([string]$ComputerName = $env:COMPUTERNAME)
				foreach ($Adapter in (gwmi Win32_NetworkAdapter -ComputerName $ComputerName -Filter "NetEnabled='True'"))
				{
					$Config = gwmi Win32_NetworkAdapterConfiguration -ComputerName $ComputerName -Filter "Index = '$($Adapter.Index)'"
					$Obj = New-Object -Type PSObject -Property @{
						Hostname = $Adapter.SystemName
						Name	 = $Adapter.name
						"Network" = $Adapter.NetConnectionID
						"MAC Address" = $Config.MACAddress
						"IP Address" = $Config.IPAddress -join "; "
						"DHCP Server" = if ($Config.DHCPServer -eq $null) { "DHCP Disabled" }
						else { $Config.DHCPServer }
						"DHCP Enabled" = $Config.DHCPEnabled
						"DHCP Lease Obtained" = if ($Config.DHCPLeaseObtained -eq $null) { "DHCP Disabled" }
						else { [management.managementDateTimeConverter]::ToDateTime($Config.DHCPLeaseObtained) }
						"DHCP Lease Expires" = if ($Config.DHCPLeaseExpires -eq $null) { "DHCP Disabled" }
						else { [management.managementDateTimeConverter]::ToDateTime($Config.DHCPLeaseExpires) }
						"Subnet Mask" = $Config.IPSubnet -join "; "
						"Default Gateway" = $Config.DefaultIPGateway -join "; "
						"DNS Suffix" = $Config.DNSDomain
						"DNS Servers" = $Config.DNSServerSearchOrder -join "; "
						"Up Time" = [management.managementDateTimeConverter]::ToDateTime($Adapter.TimeOfLastReset)
						"Link Speed" = if ($Adapter.Speed -gt 999999999)
						{
							-join (($Adapter.Speed/1000000000), " ", "Gb/s")
						}
						
						else {
							-join (($Adapter.Speed/1000000), " ", "Mb/s")
						}
						
					}
					$Obj | Select "Hostname",
								  "Name",
								  "Network",
								  "Link Speed",
								  "Up Time",
								  "MAC Address",
								  "IP Address",
								  "DHCP Server",
								  "DHCP Enabled",
								  "DHCP Lease Obtained",
								  "DHCP Lease Expires",
								  "Subnet Mask",
								  "Default Gateway",
								  "DNS Suffix",
								  "DNS Servers"
				}
			}
			Function Get-MemoryStats
			{
				param (
					[string]$ComputerName = $env:COMPUTERNAME
				)
				function get-WmiMemoryFormFactor
				{
					param ([uint16]$char)
					If ($char -ge 0 -and $char -le 22)
					{
						switch ($char)
						{
							0     { "Unknown" }
							1     { "Other" }
							2     { "SiP" }
							3     { "DIP" }
							4     { "ZIP" }
							5     { "SOJ" }
							6     { "Proprietary" }
							7     { "SIMM" }
							8     { "DIMM" }
							9     { "TSOPO" }
							10     { "PGA" }
							11     { "RIM" }
							12     { "SODIMM" }
							13     { "SRIMM" }
							14     { "SMD" }
							15     { "SSMP" }
							16     { "QFP" }
							17     { "TQFP" }
							18     { "SOIC" }
							19     { "LCC" }
							20     { "PLCC" }
							21     { "FPGA" }
							22     { "LGA" }
						}
					}
					
					else
					{
						"{0} - undefined value" -f $char
					}
					
					Return
				}
				
				# Helper function to return memory Interleave  Position
				
				function get-WmiInterleavePosition
				{
					param ([uint32]$char)
					
					If ($char -ge 0 -and $char -le 2)
					{
						
						switch ($char)
						{
							0     { "Non-Interleaved" }
							1     { "First Position" }
							2     { "Second Position" }
						}
					}
					
					else
					{
						"{0} - undefined value" -f $char
					}
					
					Return
				}
				
				
				# Helper function to return Memory Type
				function get-WmiMemoryType
				{
					param ([uint16]$char)
					
					If ($char -ge 0 -and $char -le 24)
					{
						
						switch ($char)
						{
							0     { "Unknown" }
							1     { "Other" }
							2     { "DRAM" }
							3     { "Synchronous DRAM" }
							4     { "Cache DRAM" }
							5     { "EDO" }
							6     { "EDRAM" }
							7     { "VRAM" }
							8     { "SRAM" }
							9     { "ROM" }
							10     { "ROM" }
							11     { "FLASH" }
							12     { "EEPROM" }
							13     { "FEPROM" }
							14     { "EPROM" }
							15     { "CDRAM" }
							16     { "3DRAM" }
							17     { "SDRAM" }
							18     { "SGRAM" }
							19     { "RDRAM" }
							20     { "DDR" }
							21     { "DDR2" }
							22     { "DDR2 FB-DIMM" }
							24     { "DDR3" }
						}
						
					}
					
					else
					{
						"{0} - undefined value" -f $char
					}
					
					Return
				}
				
				
				# Get the object
				$memory = Get-WMIObject -ComputerName $ComputerName Win32_PhysicalMemory
				
				
				
				Foreach ($stick in $memory)
				{
					
					# Do some conversions
					$cap = $stick.capacity/1gb
					$ff = get-WmiMemoryFormFactor($stick.FormFactor)
					$ilp = get-WmiInterleavePosition($stick.InterleavePosition)
					$mt = get-WMIMemoryType($stick.MemoryType)
					
					# print details of each stick
					$object = New-Object -type psobject -Property @{
						
						"Bank" = $stick.DeviceLocator
						"Capacity (GB)" = $cap
						"Data Width" = $stick.DataWidth
						"Description" = $stick.Description
						"Form Factor" = $ff
						"InterleaveDataDepth" = $stick.InterleaveDataDepth
						"InterleavePosition" = $ilp
						"Manufacturer" = if ($stick.Manufacturer -eq $null)
						{
							"Null - Possibly VM"
						}
						else { $stick.Manufacturer }
						"Memory Type" = $mt
						"Part Number" = $stick.PartNumber
						"Serial Number" = $stick.SerialNumber
						"Speed" = $stick.Speed
						
					}
					$object #|select Bank,Manufacturer,"Capacity (GB)","Speed","Part Number","Serial Number","Data Width","Form Factor","Memory Type"
				}
				
			}
			Function Get-WindowsDriver
			{
	<#
	    .SYNOPSIS
	        Gather running driver information from a remote or local system.
	       
	    .PARAMETER ComputerName
	        Specifies the target computer for data query.
	   
	    .EXAMPLE
	        PS > Get-WindowsDriver -ComputerName localhost |select Name,Version,Date,Path,Type,State -First 1|ft
	            
	        Name                          Version                              Date                                 Path                                 Type                                 State                              
	        ----                          -------                              ----                                 ----                                 ----                                 -----                              
	        Microsoft ACPI Driver         6.1.7600.16385 (win7_rtm.090713-1... 11/20/2010 10:23:47 PM               C:\Windows\system32\drivers\ACPI.sys Kernel Driver                        Running                            
	      
	        Description
	        -----------
	        Gathers one running driver loaded on current system.
	    #>
				param ([string]$ComputerName = $env:COMPUTERNAME)
				Invoke-Command -ComputerName $ComputerName -ScriptBlock {
					foreach ($driver in (gwmi -Query "Select Name,State,Description,DisplayName,PathName,ServiceType,StartMode FROM win32_systemdriver WHERE State='Running'" | select Name, State, Description, DisplayName, PathName, ServiceType, StartMode))
					{
						
						$Driver.Pathname = ($driver.pathname.Replace("\??\", ""))
						$Path = Get-ChildItem -Path $Driver.Pathname -ErrorAction SilentlyContinue | Select FullName, LastWriteTime, @{ Label = 'FileVersion'; Expression = { $_.VersionInfo.FileVersion } }
						
						
						$Obj = New-Object -Type PSObject -Property @{
							Name = $Driver.Description
							Path = $Driver.Pathname
							Date = $Path.LastWriteTime
							Version = $Path.FileVersion
							State = $Driver.State
							Type = $Driver.ServiceType
						}
						$Obj | Where { $_.Version -notlike "*(win*" }
					}
				}
			}
			
			function Get-NetFrameworkVersion
			{
				[CmdletBinding()]
				param ($ComputerName = $env:COMPUTERNAME)
				$dotNetRegistry = 'SOFTWARE\Microsoft\NET Framework Setup\NDP'
				$dotNet4Registry = 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full'
				$dotNet4Builds = @{
					30319 = '.NET Framework 4.0'
					378389 = '.NET Framework 4.5'
					378675 = '.NET Framework 4.5.1 (8.1/2012R2)'
					378758 = '.NET Framework 4.5.1 (8/7 SP1/Vista SP2)'
					379893 = '.NET Framework 4.5.2'
					380042 = '.NET Framework 4.5 and later with KB3168275 rollup'
					393295 = '.NET Framework 4.6 (Windows 10)'
					393297 = '.NET Framework 4.6 (NON Windows 10)'
					394254 = '.NET Framework 4.6.1 (Windows 10)'
					394271 = '.NET Framework 4.6.1 (NON Windows 10)'
					394802 = '.NET Framework 4.6.2 (Windows 10 Anniversary Update)'
					394806 = '.NET Framework 4.6.2 (NON Windows 10)'
					460798 = '.NET Framework 4.7 (Windows 10 Creators Update)'
					460805 = '.NET Framework 4.7 (NON Windows 10)'
				}
				foreach ($Computer in $ComputerName)
				{
					try
					{
						Test-Connection -ComputerName $Computer -Count 1 -ErrorAction Stop | Out-Null
						$builtInWinFeature = Get-WmiObject -ComputerName $Computer -query "SELECT Caption,Version FROM Win32_OperatingSystem" -ErrorAction Stop
					}
					
					catch
					{
						#Write-Warning ("$($Computer)- WMI: " + $_.Exception.Message)
						#$builtInWinFeature = $null
					}
					
					#Check if computer is running 2012 or higher. Checking for built-in .NET 4.x installs, since they don't register as the other installable versions.  
					if (($builtInWinFeature.Caption -like "*server*") -and ($builtInWinFeature.Caption -notlike "*200*"))
					{
						$netCollection = @()
						
						#handle errors if Get-WinFeature is not found on machine running script, but $computer is a Server 2012 or greater system
						try
						{
							$serverDotNet = Get-WindowsFeature -ComputerName $Computer -Name NET* -ErrorAction Stop | Select * | Where { $_.Installed -eq $true -and $_.Parent -eq $null } | Select DisplayName, Installed
						}
						catch
						{
							#"Error loading Get-WindowsFeature. Server $($Computer) integrated .NET installs will not be shown"
							#$serverDotNet = $null
						}
						foreach ($feature in $serverDotNet)
						{
							$obj = New-Object -Type PSObject -Property @{
								ComputerName = $Computer
								NetFXVersion = $feature.Displayname
								NetFxBuild   = ($builtInWinFeature.Caption -replace "Microsoft ", "") + " (Integrated)"
							}
						}
						
						#Only write to netCollection if Get-WindowsFeature worked
						if ($serverDotNet) { $netCollection += $obj }
						
						#loop through registry
						if ($regKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $Computer))
						{
							if ($netRegKey = $regKey.OpenSubKey("$dotNetRegistry"))
							{
								foreach ($versionKeyName in $netRegKey.GetSubKeyNames())
								{
									if ($versionKeyName -match '^v[123]')
									{
										$versionKey = $netRegKey.OpenSubKey($versionKeyName)
										$version = Invoke-Command -scriptblock {
											$erroractionpreference = "SilentlyContinue"
											[version]($versionKey.GetValue('Version', ''))
										}
										$objnet = New-Object -TypeName PSObject -Property @{
											ComputerName = $Computer
											NetFXBuild   = $version.Build
											NetFXVersion = '.NET Framework ' + $version.Major + '.' + $version.Minor
										}
										if ($objnet.NetFXBuild -ne $null)
										{
											#added to prevent null entries and errors from 2016 and greater O/S without .NET 3.x reg values
											$netCollection += $objnet
										} #end if netfxbuild $null check
										
									} #endif versionkeyname foreach
								} #end foreach $versionKeyName
							} #endIf $netRegKey
							if ($net4RegKey = $regKey.OpenSubKey("$dotNet4Registry"))
							{
								if (-not ($net4Release = $net4RegKey.GetValue('Release')))
								{
									$net4Release = 30319
								}
								$objnet4 = New-Object -TypeName PSObject -Property @{
									ComputerName			   = $Computer
									NetFXBuild				   = $net4Release
									NetFXVersion			   = $dotNet4Builds[$net4Release]
								}
								
								$netCollection += $objnet4
								
							} #end if $dotNet4RegKey
						} #end if $regkey
						$netCollection | select ComputerName, NetFXVersion, NetFXBuild
					} #end 2012 or greater 'if' loop
					else
					{
						
						try
						{
							Test-Connection -ComputerName $Computer -Count 1 -ErrorAction Stop | Out-Null
							if ($regKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $Computer))
							{
								if ($netRegKey = $regKey.OpenSubKey("$dotNetRegistry"))
								{
									foreach ($versionKeyName in $netRegKey.GetSubKeyNames())
									{
										if ($versionKeyName -match '^v[123]')
										{
											$versionKey = $netRegKey.OpenSubKey($versionKeyName)
											$version = [version]($versionKey.GetValue('Version', ''))
											New-Object -TypeName PSObject -Property @{
												ComputerName = $Computer
												NetFXBuild   = $version.Build
												NetFXVersion = '.NET Framework ' + $version.Major + '.' + $version.Minor
											} | Select-Object ComputerName, NetFXVersion, NetFXBuild
										}
									}
								}
								if ($net4RegKey = $regKey.OpenSubKey("$dotNet4Registry"))
								{
									if (-not ($net4Release = $net4RegKey.GetValue('Release')))
									{
										$net4Release = 30319
									}
									New-Object -TypeName PSObject -Property @{
										ComputerName = $Computer
										NetFXBuild   = $net4Release
										NetFXVersion = $dotNet4Builds[$net4Release]
									} | Select-Object ComputerName, NetFXVersion, NetFXBuild
								}
							}
						}
						catch
						{
							#Write-Warning ("$($Computer)- Registry: " + $_.Exception.Message)
						}
						
					} #endElse
				} #end foreach
			} #end function    
			
			#endregion Functions
			#region System Info
			Create-RAMPieChart -ComputerName $computer
			$RAMImgBits = [convert]::ToBase64String((Get-Content ($env:tmp + "\RAM-" + $computer + ".png") -Encoding Byte))
			$RAMImgHTML = "<img src=data:image/png;base64,$($RAMImgBits) alt='RAM' />"
			Remove-Item -Path ($env:tmp + "\RAM-" + $computer + ".png")
			
			Create-CPUPieChart -ComputerName $computer
			$CPUImgBits = [convert]::ToBase64String((Get-Content ($env:tmp + "\CPU-" + $computer + ".png") -Encoding Byte))
			$CPUImgHTML = "<img src=data:image/png;base64,$($CPUImgBits) alt='CPU' />"
			Remove-Item -Path ($env:tmp + "\CPU-" + $computer + ".png")
			
			
			$CompInfo = Get-WmiObject Win32_ComputerSystem -computername $computer
			$SysMan = $CompInfo.Manufacturer
			
			$SystemInfoTable = if (($SysMan -like "*Vmware*") -or ($SysMan -like "*Microsoft*") -or ($SysMan -like "*Xen"))
			{
				Get-SystemInformation -ComputerName $computer |
				ConvertTo-Html "System Manufacturer",
							   "System Model",
							   "CPU Name",
							   "Physical CPU Cores",
							   "Logical CPU Cores",
							   "System Uptime",
							   "Operating System",
							   "Power Plan",
							   "CPU % Usage",
							   "Total RAM (GB)",
							   "Free RAM (GB)",
							   "Free RAM %"`
							   -As List -Fragment | ForEach {
					$_ -replace "<table>", "<table class=`"list`">"
				}
			}
			
			else
			{
				
				Get-SystemInformation -ComputerName $computer |
				ConvertTo-Html "System Manufacturer",
							   "System Model",
							   "BIOS Vendor",
							   "BIOS Version",
							   "BIOS Date",
							   "CPU Name",
							   "Physical CPU Cores",
							   "Logical CPU Cores",
							   "System Uptime",
							   "Operating System",
							   "Power Plan",
							   "CPU % Usage",
							   "Total RAM (GB)",
							   "Free RAM (GB)",
							   "Free RAM %"`
							   -As List -Fragment | ForEach {
					$_ -replace "<table>", "<table class=`"list`">"
				}
				
			}
			
			
			$GetMemoryStats = if (($SysMan -like "*Vmware*") -or ($SysMan -like "*Microsoft*") -or ($SysMan -like "*Xen"))
			{
				$Virtual = "True"
				Get-MemoryStats -ComputerName $Computer | select @{ l = "Virtual"; e = { $Virtual } }, Bank, "Capacity (GB)", "Data Width", "Form Factor", "Memory Type" |
				ConvertTo-Html -Fragment | ForEach {
					$_ -replace "<table>", "<table class=`"disks`">"
				}
			}
			
			else
			{
				Get-MemoryStats -ComputerName $Computer | select Bank, Manufacturer, "Capacity (GB)", "Speed", "Part Number", "Serial Number", "Data Width", "Form Factor", "Memory Type" |
				ConvertTo-Html -Fragment | ForEach {
					$_ -replace "<table>", "<table class=`"disks`">"
				}
			}
			
			#Disks
			$PhysicalDiskInfo = Get-WmiObject -ComputerName $computer -query "SELECT Model,DeviceID,Size,Status FROM Win32_DiskDrive" |
			Select-Object Model, DeviceID, @{ n = 'Size (GB)'; e = { "{0:n2}" -f ($_.size/1gb) } } |
			ConvertTo-Html -Fragment | ForEach {
				$_ -replace "<table>", "<table class=`"disks`">"
			}
			
			$LogicalDiskInfo = Get-WMIObject -ComputerName $computer -Query "Select SystemName,VolumeName,Name,Size,FreeSpace FROM Win32_LogicalDisk Where DriveType=3" |
			Select-Object SystemName, VolumeName, Name, @{ n = 'Size (GB)'; e = { "{0:n2}" -f ($_.size/1gb) } }, @{ n = 'FreeSpace (GB)'; e = { "{0:n2}" -f ($_.freespace/1gb) } }, @{ n = 'PercentFree'; e = { "{0:n2}" -f ($_.freespace/$_.size * 100) } } |
			ConvertTo-HTML -Fragment | ForEach {
				$_ -replace "<table>", "<table class=`"disks`">"
			}
			
			$PhysicalDiskPerf = Get-WmiObject -ComputerName $computer Win32_PerfFormattedData_PerfDisk_PhysicalDisk -Filter "NOT Name LIKE '_Total'" |
			Select @{ Expression = { $_.Name }; Label = "Disk# Name" }, AvgDiskQueueLength, @{ Expression = { $_.PercentIdleTime }; Label = "% Idle Time" }, @{ Expression = { $_.PercentDiskReadTime }; Label = "% Read Time" }, @{ Expression = { $_.PercentDiskWriteTime }; Label = "% Write Time" }, @{ Expression = { $_.DiskWritesPersec * 1 }; Label = "Write IOPS" }, @{ Expression = { $_.DiskReadsPersec * 1 }; Label = "Read IOPS" } |
			ConvertTo-Html -Fragment | ForEach {
				$_ -replace "<table>", "<table class=`"disks`">"
			}
			
			#endregion System Info
			
			#region Proc&Services
			try
			{
				$owners = @{ }
				gwmi -ComputerName $computer -Query "SELECT Handle FROM win32_process" | % { $owners[$_.handle] = $_.getowner().user }
			}
			catch
			{
				Update-log "Unable to retrieve process owners. Top 10 Process Report - Owners column may be inaccurate"
			}
			Start-Sleep -Milliseconds 50
			
			#create Process bar chart
			Create-ProcBarChart -ComputerName $computer -ProcessNumber $ProcessNumToFetch | Out-Null
			$ProcBarImgBits = [convert]::ToBase64String((Get-Content ($env:tmp + "\ProcBar-" + $computer + ".png") -Encoding Byte))
			$ProcBarImgHTML = "<img src=data:image/png;base64,$($ProcBarImgBits) alt='TopProcesses' />"
			Remove-Item -Path ($env:tmp + "\ProcBar-" + $computer + ".png")
			
			$TopProcesses = Get-WmiObject -ComputerName $computer -Query "SELECT Description,ProcessID,WorkingSetSize FROM Win32_Process" | Sort WorkingSetSize -Descending | Select @{ l = "Name"; e = { $_.Description } }, @{ L = "PID"; e = { $_.ProcessID } }, @{ L = "WS (MB)"; E = { [int64]($_.WorkingSetSize/1MB) } }, @{ label = "Owner"; e = { $owners[$_.Processid.tostring()] } } -first $ProcessNumToFetch | ConvertTo-Html -Fragment
			
			$StoppedServicesReport = @()
			$StoppedServices = Get-WmiObject -ComputerName $computer -Query "SELECT Name,State,StartMode FROM Win32_Service WHERE StartMode='Auto' AND State='Stopped'"
			foreach ($StoppedService in $StoppedServices)
			{
				$row = New-Object -Type PSObject -Property @{
					Name = $StoppedService.Name
					Status = $StoppedService.State
					"Start Mode" = $StoppedService.StartMode
				}
				
				$StoppedServicesReport += $row
				
			}
			
			$StoppedServicesReport = $StoppedServicesReport | ConvertTo-Html -Fragment | ForEach {
				$_ -replace "<table>", "<table class=`"disks`">"
			}
			
			$NsServicesReport = @()
			$NsServices = Get-WmiObject -ComputerName $computer -Query "Select StartName,Name,State,Startmode FROM Win32_Service WHERE NOT StartName LIKE '%NT Authority%' AND NOT StartName LIKE '%localsystem%'"
			
			foreach ($NsService in $NsServices)
			{
				$row = New-Object -Type PSObject -Property @{
					"Service Account" = $NsService.StartName
					Name			  = $NsService.Name
					Status		      = $NsService.State
					StartMode		  = $NsService.StartMode
					
				}
				
				$NsServicesReport += $row
				
			}
			
			$NsServicesReport = $NsServicesReport |
			ConvertTo-Html "Service Account", Name, StartMode, Status -Fragment | ForEach {
				$_ -replace "<table>", "<table class=`"disks`">"
			}
			try
			{
				$Connect = Invoke-Command -ComputerName $computer { 1 } -ErrorAction Stop
				
				$NonWinServices = Invoke-Command -ComputerName $computer -ScriptBlock {
					Get-ItemProperty HKLM:\System\CurrentControlSet\Services\* |
					where { ($_.DisplayName -notlike "*Microsoft*" -and $_.ImagePath -ne $null -and $_.ObjectName -ne $null -and $_.Description -ne $null -and $_.Description -notlike "*@*" -and $_.DisplayName -notlike "*@*") }
				} |
				select @{ E = { $_.DisplayName }; L = "Service" }, Description, @{ L = "Command"; E = { $_.ImagePath } }, @{ E = { $_.ObjectName }; L = "Account" } |
				Sort Service |
				ConvertTo-Html -Fragment | ForEach {
					$_ -replace "<table>", "<table class=`"services`">"
				}
			}
			catch
			{
				$NonWinServices = '<p style="color:red;">No PS remote connectivity</p>'
				
			}
			$EnvVariables = Get-WMIObject -ComputerName $computer -Query "SELECT VariableValue,Name,UserName,SystemVariable FROM Win32_Environment" |
			select Name, @{ e = { $_.VariableValue }; l = "Variable" }, @{ e = { $_.UserName.Trim("<", ">") }; l = "User Account" } |
			ConvertTo-Html -Fragment | ForEach {
				$_ -replace "<table>", "<table class=`"disks`">"
			}
			
			#endregion Proc&Services
			
			#region Tasks
			$tasks = (Get-RemoteScheduledTasks -ComputerName $computer).Tasks |
			where {
				($_.State -ne 'Disabled') -and `
				($_.Enabled) -and `
				($_.NextRunTime -ne 'None') -and `
				(!$_.Hidden) -and `
				($_.Author -ne 'Microsoft Corporation')
			} |
			Select Name, Author, Description, @{ Label = "Last Run"; Expression = { $_.LastRunTime } }, @{ Label = "Next Run"; expression = { $_.NextRunTime } }, @{ Label = "Last Result"; expression = { $_.LastTaskDetails } }
			$tasks = $tasks | ConvertTo-Html -Fragment | ForEach {
				$_ -replace "<table>", "<table class=`"disks`">"
			}
			#endregion Tasks
			
			#region Startup
			$Startup = Get-Startup -ComputerName $computer |
			ConvertTo-Html -Fragment | ForEach {
				$_ -replace "<table>", "<table class=`"disks`">"
			}
			#endregion Startup
			
			#region Event Logs Report
			$SystemEventsReport = @()
			$SystemEvents = Get-winevent -ComputerName $computer -FilterXml $SysEvtFilter | Sort-Object timecreated -Descending
			foreach ($event in $SystemEvents)
			{
				$row = New-Object -Type PSObject -Property @{
					TimeGenerated = $event.TimeCreated
					EntryType	  = $event.LevelDisplayName
					Source	      = $event.ProviderName
					ID		      = $event.Id
					Message	      = $event.Message
				}
				$SystemEventsReport += $row
			}
			
			$SystemEventsReport = $SystemEventsReport | ConvertTo-Html EntryType, ID, Message, Source, TimeGenerated -Fragment
			$SystemEventsReport = $SystemEventsReport | ForEach {
				$_ -replace "<td>Warning</td>", "<td style=`"padding-left:5px;padding-right:10px;white-space:nowrap;background-color:#FBD95B`">$YellowBangHTML Warning</td>"
			}
			
			$SystemEventsReport = $SystemEventsReport | ForEach {
				$_ -replace "<td>Error</td>", "<td style=`"padding-left:5px;padding-right:10px;white-space:nowrap;background-color:#FB7171`">$RedBangHTML Error</td>"
			}
			
			$ApplicationEventsReport = @()
			$ApplicationEvents = Get-winevent -ComputerName $computer -FilterXml $AppEvtFilter | Sort-Object timecreated -Descending
			foreach ($event in $ApplicationEvents)
			{
				$row = New-Object -Type PSObject -Property @{
					TimeGenerated = $event.TimeCreated
					EntryType	  = $event.LevelDisplayName
					Source	      = $event.ProviderName
					ID		      = $event.Id
					Message	      = $event.Message
				}
				$ApplicationEventsReport += $row
			}
			
			$ApplicationEventsReport = $ApplicationEventsReport | ConvertTo-Html EntryType, ID, Message, Source, TimeGenerated -Fragment
			
			$ApplicationEventsReport = $ApplicationEventsReport | ForEach {
				$_ -replace "<td>Warning</td>", "<td style=`"padding-left:5px;padding-right:10px;white-space:nowrap;background-color:#FBD95B`">$YellowBangHTML Warning</td>"
			}
			
			$ApplicationEventsReport = $ApplicationEventsReport | ForEach {
				$_ -replace "<td>Error</td>", "<td style=`"padding-left:5px;padding-right:10px;white-space:nowrap;background-color:#FB7171`">$RedBangHTML Error</td>"
			}
			
			#endregion Event Logs Report
			
			#region network
			$NICS = Get-NicInfo -ComputerName $computer | Select "Hostname",
																 "Name",
																 "Network",
																 "Link Speed",
																 "Up Time",
																 "MAC Address",
																 "IP Address",
																 "DHCP Server",
																 "Subnet Mask",
																 "Default Gateway",
																 "DNS Suffix",
																 "DNS Servers" | ConvertTo-Html -As List -Fragment | ForEach {
				$_ -replace "<table>", "<table class=`"list`">"
			}
			
			$Routes = (Get-RemoteRouteTable -computername $computer).Routes | select Destination, Mask, NextHop, Persistent, Metric, @{ l = "Int. Index"; e = { $_.InterfaceIndex } }, Type |
			Sort-Object -Property Metric | ConvertTo-Html -Fragment | ForEach {
				$_ -replace "<table>", "<table class=`"services`">"
			}
			#endregion network
			
			
			#region updates/software   
			$NETinfo = Get-NetFrameworkVersion -ComputerName $computer
			
			$NETinfoHtml = $NETinfo | ConvertTo-Html -Fragment | ForEach {
				$_ -replace "<table>", "<table class=`"disks`">"
			}
			
			try
			{
				
				$Connect = Invoke-Command -ComputerName $computer { 1 } -ErrorAction Stop
				
				$64Prog = Invoke-Command -cn $computer -ScriptBlock {
					Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall |
					Get-ItemProperty | Where { $_.DisplayName -ne $null } |
					Sort-Object -Property DisplayName |
					Select-Object -Property DisplayName, DisplayVersion, Publisher, InstallDate
				}
				$32Prog = Invoke-Command -cn $computer -ScriptBlock {
					Get-ChildItem -Path HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall |
					Get-ItemProperty | Where { $_.DisplayName -ne $null } |
					Sort-Object -Property DisplayName |
					Select-Object -Property DisplayName, DisplayVersion, Publisher, InstallDate
				}
				$SoftwareReport = @()
				$Software = $64Prog + $32Prog
				foreach ($Soft in $Software)
				{
					$row = New-Object -Type PSObject -Property @{
						Name = $Soft.DisplayName
						Publisher = $Soft.Publisher
						Version = $Soft.DisplayVersion
						InstallDate = $Soft.InstallDate
					}
					$SoftwareReport += $row
				}
				$InstalledSoftware = $SoftwareReport | Where { $_.Name -ne $null } | Sort-Object Name |
				Select-Object Name, Version, Publisher, @{ Label = "Installed On"; Expression = { [DateTime]::ParseExact($_.InstallDate, 'yyyyMMdd', $null) } } |
				ConvertTo-Html -Fragment | ForEach {
					$_ -replace "<table>", "<table class=`"disks`">"
				}
				
				$Drivers = Get-WindowsDriver -ComputerName $computer | Select Name, Version, Date, Path, Type, State | Sort Name | ConvertTo-Html -Fragment | ForEach {
					$_ -replace "<table>", "<table class=`"disks`">"
				}
			}
			catch
			{
				$InstalledSoftware = '<p style="color:red;">No PS remote connectivity</p>'
				$Drivers = '<p style="color:red;">No PS remote connectivity</p>'
			}
			
			$Updates = Get-MSHotfix -ComputerName $computer | Sort-Object InstalledOn -descending
			$HTMLUpdates = $Updates | Select @{ L = "KB ID"; E = { $_.HotFixID } }, @{ n = 'KB Link'; e = { "<a href='$($_.Caption)'>$($_.Caption)</a>" } }, Description, @{ L = "Install Date"; E = { $_.InstalledOn } }, @{ L = "Installed By User"; E = { $_.InstalledBy } } |
			Sort-Object { $_."Install Date" -as [datetime] } -Descending |
			ConvertTo-Html -Fragment | ForEach {
				$_ -replace "<table>", "<table class=`"disks`">"
			}
			Add-Type -AssemblyName System.Web
			[System.Web.HttpUtility]::HtmlDecode($HTMLUpdates) | Set-Variable -Name HTMLClickUpdates
			
			#endregion updates/software
			
			
			# Create HTML Report for the current System being looped through
			$CurrentSystemHTML = @"
       
       
    <h1>$computer Audit Report</h1>
    <p><i>Systems Report Tool version $version</i></p>
       <hr size=1 width="40%">
    <div style="width:50%; margin-left: auto; margin-right: auto;">
    <div class="square" style="float: left; width: 50%;">
    $SystemInfoTable
    </div>
    <div class="square" style="float: right; width:50%;">
       $CPUImgHTML
    $RAMImgHTML
       </div>
    </div>
   
   
   
   <label for="identifier-$computer-1"> Disk & Memory Information- $computer </label> 
       <div>
    <h3>Memory Module Information</h3>
    $GetMemoryStats
    <br>
    <br>
    <h3>Disk Information and Performance</h3>
    <p>Physical Disks</p>
    $PhysicalDiskInfo
    <p>Physical Disk Performance Data</p>
    $PhysicalDiskPerf
       <p>Logical Disks</p>
       $LogicalDiskInfo
    <br>
    <br>
   
    </div>
          
          
   <label for="identifier-$computer-2"> System Processes and Services - $computer</label> 
       <div>
   
    <h3>System Processes - Top $ProcessNumToFetch Highest Memory Usage</h3>
    <p>The following $ProcessNumToFetch processes are consuming the highest Working Set Memory* on $computer</p>
    <div style="width:50%; margin-left: auto; margin-right: auto;">
   
   
    <div class="square" style="float: left; width:50%;">
       
    $TopProcesses
    <p class="small"><font size=1><i>*Number reflects Working Set KB (see Resource Monitor) converted to MB</i></font></p>
       </div>  
   
    <div class="square" style="float: right; width:50%;">
       $ProcBarImgHTML
    </div>
    </div>
   
    <h3>System Services - Stopped</h3>
       <p>The following services are set to Automatic startup, yet are currently stopped on $computer</p>
       $StoppedServicesReport
    <br>
    <br>
   
    <h3>Startup Entries</h3>
    <p>Startup Entries registered on $computer</p>
    $Startup
    <br>
    <br>
   
    <h3>Non-Windows Services</h3>
    <p>The following services on $computer do not come standard with Windows</p>
    $NonWinServices
    <br>
    <br>
    <h3>Non-Standard Service Accounts</h3>
       <p>The following service accounts on $computer do not come standard with Windows</p>
       $NsServicesReport
       <br>
    <br>
       
    <h3>Scheduled Tasks Added to Windows</h3>
    <p>The following scheduled tasks on $computer do not come standard with Windows.</p>
    $tasks   
    <br>
    <br>
   
    <h3>Environment Variables</h3>
    <p>Environment Variables from $computer</p>
    $EnvVariables
    <br>
    <br>
   
       </div>
   
       
   <label for="identifier-$computer-3"> Networking Information - $computer</label> 
       <div>
   
    <h3>Network Adapter Information</h3>
    <p>Configuration information of all active network adapters on $computer</p>
    $NICS
    <br> 
    <br>
       
    <h3>Route Tables</h3>
    <p>Routing table from $computer</p>
    $Routes
    <br>
    <br>
   
    </div>
   
   
   <label for="identifier-$computer-4"> Event Log Report - $computer</label> 
       <div>
   
       <div class="square" style="float: left; width: 49%">
    <h3>System Log</h3>
    <p>List of System log events that had an Event Type of either Warning, Error, or Critical on $computer within 24 hours</p>
       $SystemEventsReport
    </div>
   
    <div class="square" style="float: right; width: 49%">
    <h3>Application Log</h3>
    <p>List of Application log events that had an Event Type of either Warning or Error on $computer within 24 hours</p>
       $ApplicationEventsReport
    </div>
   
    <br>
    <br>
    </div>
 
     
    <label for="identifier-$computer-5"> Software Information - $computer</label> 
       <div>
   
   
   
    <label for="identifier-$computer-6"> Installed Programs - $computer</label> 
              <div>
   
   <p>List .NET Framework Installations on $computer</p>
    $NETinfoHtml
   
    <p>List of installed software on $computer.</p>
    $InstalledSoftware
   
              </div>
   
   
   <label for="identifier-$computer-7"> Installed Windows Updates - $computer</label>
              <div>
   
    <p>This lists all the Windows <i>(only)</i> Updates installed on $computer.<p>
    $HTMLClickUpdates
   
              </div>
   
   <label for="identifier-$computer-8"> Loaded Windows Drivers - $computer</label>
              <div>
   
    <p>This lists all third-party kernel drivers currently running on $computer.<p>
    $Drivers
   
              </div>
   
    <br>
    <br>
     
   
    </div> 
 <br>
 <br>
"@
			$CurrentSystemHTML
		}
		$computer | % { Start-Job -Scriptblock $scriptblock -ArgumentList $_ | Out-Null }
		""
		Update-log "Waiting for jobs to finish...."
		$HTMLMiddle = Get-Job | Wait-Job | Receive-Job
		""
		Update-log "Gathering job results..."
		#region Assemble the HTML Header and CSS for Report
		$HTMLHeader = @"
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">
<html><head><title>Sirda System Audit Report</title>
<style type="text/css">
<!--
body
       {
              font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
              text-align: center;
       }
 
table
       {
        margin-left:auto;
              margin-right:auto;
        border: 1px solid rgb(190, 190, 190);
        border-radius: 2px;
              border-spacing: 0px;
        font-Family: Tahoma, Helvetica, Arial;
        font-Size: 8pt;
        text-align: left;
    }
th
    {
        Text-Align: Left;
              background-color: #F3F3F3;
        Padding: 4px;
              font-weight: normal;
              border-bottom: 1px solid rgb(190, 190, 190);
    }
   
tr:hover td
    {
        background-color: DodgerBlue ;
        Color: #F5FFFA;
           }
tr:nth-child(odd)
       {
              background-color:#F9F9F9;
       }      
td
    {
        Vertical-Align: middle;
        Padding: 4px;
    }
h1
       {
              clear: both;
              font-size: 30px;
              font-weight: 300;
              font-family: Verdana, Helvetica, Arial;
       }
h2
       {
              clear: both;  
              font-size: 22px;
              font-weight: 300;
              margin-bottom: 10px;
              margin-top: 30px;
              background-color: #E5E5E5;
              width: 75%;
              margin: auto;
              margin-bottom: 15px;
              border:2px solid #CCCCCC;
              padding: 10px;
       }
h3
       {
              clear: both;
              border-radius: 10px;
              font-family: Verdana, Arial;
              font-size: 17px;
              font-weight: 300;
              margin-bottom: 10px;
              margin-top: 10px;
              width: 40%;
              margin: auto;
              margin-bottom: 10px;   
              padding: 10px;
       }
p
       {
              margin-top: 10px;
              margin-left: 0px;
              font-size: 12px;
              font-weight: 300;    
              text-align: center;
              margin-bottom: 5px;
       }
p.small
       {
              width: 175px;
              margin: auto;
              margin-top: 0px;
              font-size: 12px;
              text-align: center;
              margin-bottom: 10px;
    }
       
table.disks
       {
              table-layout:fixed;
              min-width:50%;
              max-width: 50%;
       }
table.services
       {
              table-layout:fixed;
              min-width:60%;
              max-width: 60%;
       }
table.list
       {
              float: center;
       }
table.list tr:nth-child(odd)
       {
              background-color:#F9F9F9;
       }
table.list td:nth-child(1)
       {
              font-weight: 600;
              border-right: 1px solid rgb(190, 190, 190);
              text-align: right;
       }
.square
       {
              width:100%;
              height:auto;
              margin-bottom: 15px;
              margin-top: 15px;
              text-align:center;
       }
.toggle-box
       {
              display: none;
       }
.toggle-box + label
       {
              cursor: pointer;
              display: block;
              clear: both;  
              font-size: 18px;
              font-weight: 300;
              margin-bottom: 15px;
              margin-top: 15px;
              background-color: #f3f3f3;
              width: 50%;
              margin-left: 25%;
              text-align:left;
              border-radius: 5px;
              box-shadow: 1px 1px #CCCCCC;
              padding: 10px;
       }
.toggle-box + label + div
       {
              display: none;
              margin-bottom: 10px;
              margin-left:auto;
              margin-right:auto;
       }
.toggle-box:checked + label + div
       {
              display: block;
              margin-left:18px;
              margin-right:auto;
       }
.toggle-box + label:before
       {
              content: "+";
              display: block;
              float: left;
              font-weight: 300;
              font-size:17px;
              line-height: auto;
              margin-right: 5px;
              margin-left:auto;
              text-align: center;
              width: 23px;
              height: 23px;
       }
.toggle-box:checked + label:before
       {
              content: "\2212";
       }
.toggle-boxin
       {
              display: none;
       }
.toggle-boxin + label
       {
              cursor: pointer;
              display: block;
              clear:both;
              font-size:16px;
              font-weight: 300;
              margin-bottom: 10px;
              margin-top: 10px;
              background-color:#F9F9F9;
              width: 35%;
              margin-left: 30%;
              text-align:left;
              border-radius: 5px;
              box-shadow: 1px 1px #CCCCCC;
              padding: 10px;
       }
.toggle-boxin + label + div
       {
              display: none;
              margin-bottom: 10px;
              margin-left:auto;
              margin-right:auto;
       }
.toggle-boxin:checked + label + div
       {
              display: block;
       }
.toggle-boxin + label:before
       {
              content: "+";
              display: block;
              float: left;
              font-weight: 300;
              font-size:15px;
              line-height: auto;
              margin-right: 5px;
              margin-left:auto;
              text-align: center;
              width: 21px;
              height: 21px;
       }
.toggle-boxin:checked + label:before
       {
              content: "\2212";
       }
-->
</style>
</head>
<body>
"@
		#endregion Assemble the HTML Header and CSS for Report
		# Assemble the closing HTML for our report.
		$HTMLEnd = @"
</body>
</html>
"@
		# Assemble the final report from all our HTML sections
		Update-log "Assembling HTML for audit report..."
		$HTMLmessage = $HTMLHeader + $HTMLMiddle + $HTMLEnd
		# Save the report out to a file in the current path
		Add-Type -AssemblyName System.Web
		$outfile = "C:\Program Files\Sirda\collections\" + $Computer + "\Advanced_Audit.html"
		[System.Web.HttpUtility]::HtmlDecode($HTMLmessage) | Out-File $outfile
		Update-log "Audit Report Complete!"
		$url = "C:\Program Files\Sirda\collections\" + $Computer + "\Advanced_Audit.html"
		$webBrowser1.URL = $url
		$webbrowser1.Navigate($url)
		
				
		$buttonExecuteIncidentRespo.Text = 'Execute Incident Response'
		$buttonExecuteIncidentRespo.Enabled = $true
		$datagridview2.Rows.Add("Advanced Audit Report", "Reports", "Completed")
		$progressbar_audit.Value = 18
			
			
			
		}
		
	$exitToolStripMenuItem_Click={
		$MainForm.close()
		
	}
	
	
	$buttonOpenReportsFolder_Click={
		Invoke-Item 'C:\Program Files\Sirda\Collections\'
		
	}
	
	$buttonHistoricalLogs_Click={
		Invoke-Item 'C:\Program Files\Sirda\Logs\'
		
	}
	
	$sirda_status_TextChanged={
		$sirda_status.SelectionStart = $sirda_status.TextLength;
		$sirda_status.ScrollToCaret()
		$sirda_status.Focus()
		
	}
	
	$IR_Computers_TextChanged={
		$buttonExecuteIncidentRespo.Enabled = $IR_Computers.Text -ne ""
		$buttonProcesses.Enabled = $IR_Computers.Text -ne ""
		$buttonServices.Enabled = $IR_Computers.Text -ne ""
		$buttonUpdatesHotfixes.Enabled = $IR_Computers.Text -ne ""
		$buttonScheduledTasks.Enabled = $IR_Computers.Text -ne ""
		$buttonMonitors.Enabled = $IR_Computers.Text -ne ""
		$buttonUSBPorts.Enabled = $IR_Computers.Text -ne ""
		$buttonDrivers.Enabled = $IR_Computers.Text -ne ""
		$buttonRemoteDesktop.Enabled = $IR_Computers.Text -ne ""
		$buttonManagement.Enabled = $IR_Computers.Text -ne ""
		$buttonRebootHistory.Enabled = $IR_Computers.Text -ne ""
		$buttonTraceroute.Enabled = $IR_Computers.Text -ne ""
		$buttonRestartNow.Enabled = $IR_Computers.Text -ne ""
		$buttonSystemLog.Enabled = $IR_Computers.Text -ne ""
		$buttonApplicationLog.Enabled = $IR_Computers.Text -ne ""
		$buttonWindowsUpdate.Enabled = $IR_Computers.Text -ne ""
		$buttonGroupPolicyLog.Enabled = $IR_Computers.Text -ne ""
		$buttonSCCMLogs.Enabled = $IR_Computers.Text -ne ""
		
	}
	
	$Audit_Custom_Computers_Leave={
		if ($IR_Computers.Text -eq "")
		{
			$buttonExecuteIncidentRespo.Enabled = $false
		}
		
	}
	
	
	$buttonSystemLog_Click={
		Try
		{
			$buttonSystemLog.Enabled = $false
			$buttonSystemLog.Text = "Retrieving"
			$Computer = $IR_Computers.text
			get-winevent -LogName system -ComputerName $computer -maxevents 500 | Out-GridView -Title "Last 500 System Events on $computer"
			[System.Windows.Forms.Application]::DoEvents()
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to get System Log", "Error Message")
			
		}
		finally
		{
			$buttonSystemLog.Enabled = $true
			$buttonSystemLog.Text = "System Log"
		}
		
	}
	
	$buttonApplicationLog_Click={
		Try
		{
			$buttonApplicationLog.Enabled = $false
			$buttonApplicationLog.Text = "Retrieving"
			$Computer = $IR_Computers.Text
			get-winevent -LogName application -ComputerName $computer -maxevents 500 | Out-GridView -Title "Last 500 Application Events on $computer"
			[System.Windows.Forms.Application]::DoEvents()
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to get Application Log", "Error Message")
			
		}
		finally
		{
			$buttonApplicationLog.Enabled = $true
			$buttonApplicationLog.Text = "Application Log"
		}
		
	}
	
	$buttonWindowsUpdate_Click={
		Try
		{
			$buttonWindowsUpdate.Enabled = $false
			$buttonWindowsUpdate.Text = "Retrieving"
			$Computer = $IR_Computers.text
			$a = (get-wmiobject -ErrorAction 'Stop' -class win32_operatingsystem -computername $computer)
			$b = $a.version
			$os_version = $b.Substring(0, $b.IndexOf('.'))
			If ($os_version -eq "10")
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Not Available for Windows 10 Systems", "Error Message")
			}
			else
			{
				
				$Computer = $IR_Computers.text
				Invoke-Item \\$computer\c$\windows\windowsupdate.log -ErrorAction 'Stop'
				[System.Windows.Forms.Application]::DoEvents()
			}
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to getting Windows Update Log", "Error Message")
			
		}
		finally
		{
			$buttonWindowsUpdate.Enabled = $true
			$buttonWindowsUpdate.Text = "Windows Update"
		}
		
	}
	
	$buttonGroupPolicyLog_Click={
		$buttonGroupPolicyLog.enabled = $false
		$buttonGroupPolicyLog.Text = "Retrieving"
		Try
		{
			$Computer = $IR_Computers.Text
			get-winevent -LogName grouppolicy -ComputerName $computer -maxevents 500 | Out-GridView -Title "Last 500 Group Policy Events on $computer"
		}
		catch
		{
			Write-Debug ($_ | Out-String)
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Group Policy Log does not exist", "Error Message")
		}
		finally
		{
			$buttonGroupPolicyLog.enabled = $true
			$buttonGroupPolicyLog.Text = "Group Policy Log"
		}
		
	}
	
	$buttonSCCMLogs_Click={
		$buttonSCCMLogs.Enabled = $false
		$buttonSCCMLogs.Text = "Retrieving"
		
		Try
		{
			$Computer = $IR_Computers.text
			function GetSys
			{
				$global:syst = get-wmiobject -computer $computer win32_computersystem
				$global:systarch = $syst.systemtype
			}
			getsys
			if ($systarch -eq 'x64-based PC')
			{
				Invoke-Item \\$computer\c$\windows\syswow64\ccm\logs
				[System.Windows.Forms.Application]::DoEvents()
			}
			else
			{
				Invoke-Item \\$computer\c$\windows\system32\ccm\logs -ErrorAction 'Stop'
				[System.Windows.Forms.Application]::DoEvents()
			}
			
		}
		catch
		{
			Write-Debug ($_ | Out-String)
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("SCCM Log Folder does not exist", "Error Message")
			
		}
		finally
		{
			$buttonSCCMLogs.Enabled = $true
			$buttonSCCMLogs.Text = "SCCM Logs"
		}
		
	}
	
	
	$buttonRebootHistory_Click={
		Try
		{
			$computer = $IR_Computers.text
			get-winevent -LogName system -ComputerName $computer -maxevents 500 | Where-Object source -Match 'user32' | Out-GridView -Title "Reboot History for $computer"
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to get Reboot History", "Error Message")
			
		}
		finally
		{
	
		}
		
	}
	
	$buttonRestartNow_Click={
		if ([System.Windows.Forms.MessageBox]::Show("This will force reboot the computer!!", "Are you sure?", [System.Windows.Forms.MessageBoxButtons]::OKCancel) -eq "OK")
		{
			Try
			{
				$computer = $IR_Computers
				Restart-Computer -ComputerName $computer -Force -ErrorAction 'Stop'
				$sirda_status.Text = ""
				$sirda_status.AppendText("$computer is now restarting `n")
				$sirda_status.AppendText("----------------------------------------------- `n")
			}
			catch
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Failed to restart", "Error Message")
			}
			finally
			{
			}
		}
		
	}
	
	$buttonTraceroute_Click={
		Try
		{
			$computer = $IR_Computers.text
			$buttonTraceroute.Enabled = $false
			$buttonTraceroute.Text = "Tracing.."
			$traceresults = TRACERT -d $computer
			$sirda_status.Text = ""
			foreach ($line in $traceresults)
			{
				$sirda_status.AppendText($line + [char]13 + [char]10)
			}
			$sirda_status.AppendText("----------------------------------------------- `n")
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to TraceRoute", "Error Message")
		}
		finally
		{
			$buttonTraceroute.Enabled = $true
			$buttonTraceroute.Text = "Traceroute"
		}
		
	}
	
	$buttonProcesses_Click={
		Try
		{
			$Computer = $IR_Computers.text
			Show-Processes_psf -computer $Computer
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to get processes", "Error Message")
		}
		finally
		{
			
		}
		
	}
	
	$buttonServices_Click={
		Try
		{
			$buttonServices.enabled = $false
			$buttonServices.Text = "Retrieving"
			$Computer = $IR_Computers.text
			get-service -ErrorAction 'Stop' -computer $computer | Select-Object name, displayname, status, requiredservices, dependentservices | out-gridview -title "Services on $computer"
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to get services", "Error Message")
		}
		finally
		{
			$buttonServices.enabled = $true
			$buttonServices.Text = "Services"
			[System.Windows.Forms.Application]::DoEvents()
		}
		
	}
	
	$buttonUpdatesHotfixes_Click={
		Try
		{
			$buttonUpdatesHotfixes.Enabled = $false
			$buttonUpdatesHotfixes.Text = "Retrieving"
			$Computer = $IR_Computers.text
			get-hotfix -ErrorAction 'Stop' -computer $computer | out-gridview -title "$computer System Updates"
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to get HotFixes", "Error Message")
			
		}
		finally
		{
			$buttonUpdatesHotfixes.Enabled = $true
			$buttonUpdatesHotfixes.Text = "Updates/Hotfixes"
			[System.Windows.Forms.Application]::DoEvents()
		}
		
	}
	
	$buttonScheduledTasks_Click={
		Try
		{
			$buttonScheduledTasks.Enabled = $false
			$buttonScheduledTasks.Text = "Retrieving"
			$Computer = $IR_Computers.Text
			schtasks.exe /s $computer /query /fo csv | ConvertFrom-Csv | Where-Object {
				$_.TaskName -ne 'TaskName' -and $_."Next Run Time" -ne 'N/A' -and $_."next run time" -ne 'disabled'
			} | Out-GridView -Title 'All scheduled tasks'
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to get Scheduled Tasks", "Error Message")
			
		}
		finally
		{
			$buttonScheduledTasks.Enabled = $true
			$buttonScheduledTasks.Text = "Scheduled Tasks"
			[System.Windows.Forms.Application]::DoEvents()
		}
		
	}
	
	$buttonRemoteDesktop_Click={
		Try
		{
			$Computer = $IR_Computers.Text
			mstsc /v:$computer
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to open Remote Desktop", "Error Message")
			
		}
		finally
		{
			
		}
		
	}
	
	$buttonManagement_Click={
		Try
		{
			$Computer = $IR_Computers.Text
			compmgmt.msc /computer = \\$comp
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to open Computer Management", "Error Message")
			
		}
		finally
		{
		
		}
		
	}
	
	$buttonMonitors_Click={
		Try
		{
			$buttonMonitors.Enabled = $false
			$buttonMonitors.Text = "Retrieving"
			$Computer = $IR_Computers.Text
			
			$ActiveMonitors = Get-WmiObject -Namespace "ROOT\WMI" -ComputerName $computer -Query "SELECT * FROM WmiMonitorID WHERE Active='True'" -ErrorAction 'Stop'
			$monitorInfo = @()
			
			foreach ($monitor in $ActiveMonitors)
			{
				[System.Windows.Forms.Application]::DoEvents()
				$mon = New-Object PSObject
				$manufacturer = $null
				$product = $null
				$serial = $null
				$name = $null
				$week = $null
				$year = $null
				
				# These are returned as ascii values, '00' padded.
				# We don't want the padding because we can't .Trim() it.
				foreach ($ch in $monitor.ManufacturerName)
				{
					if ($ch -ne '00')
					{
						$manufacturer += [char]$ch
					}
				}
				foreach ($ch in $monitor.ProductCodeID)
				{
					if ($ch -ne '00')
					{
						$product += [char]$ch
					}
				}
				foreach ($ch in $monitor.SerialNumberID)
				{
					if ($ch -ne '00')
					{
						$serial += [char]$ch
					}
				}
				foreach ($ch in $monitor.UserFriendlyName)
				{
					if ($ch -ne '00')
					{
						$name += [char]$ch
					}
				}
				
				$mon | Add-Member NoteProperty Name $name
				$mon | Add-Member NoteProperty SerialNumber $serial
				$mon | Add-Member NoteProperty Year $monitor.YearOfManufacture
				
				$monitorInfo += $mon
			}
			$monitorInfo | Out-GridView -Title "Monitors connected to $Computer"
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to get Monitors", "Error Message")
			
		}
		finally
		{
			$buttonMonitors.Enabled = $true
			$buttonMonitors.Text = "Monitors"
		}
		
	}
	
	$buttonUSBPorts_Click={
		Try
		{
			$buttonUSBPorts.Enabled = $false
			$buttonUSBPorts.Text = "Retrieving"
			$Computer = $IR_Computers.Text
			Get-WmiObject -computer $computer Win32_USBControllerDevice -ErrorAction 'Stop' | ForEach-Object{
				[wmi]($_.Dependent)
			} | Select-Object Caption, Manufacturer, DeviceID | Out-GridView -title "$Computer USB Controllers"
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to get USB Ports", "Error Message")
			
		}
		finally
		{
			$buttonUSBPorts.Enabled = $true
			$buttonUSBPorts.Text = "USB Ports"
		}
		
	}
	
	$buttonDrivers_Click={
		Try
		{
			$buttonDrivers.Enabled = $false
			$buttonDrivers.Text = "Retrieving"
			$Computer = $IR_Computers.Text
			Get-WmiObject -Computer $Computer Win32_SystemDriver -ErrorAction 'Stop' | Where-Object state -eq 'running' | Select-Object displayname | Out-GridView -Title "$Computer System Drivers"
			
		}
		catch
		{
			#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[void][System.Windows.Forms.MessageBox]::Show("Failed to get drivers", "Error Message")
			
		}
		finally
		{
			$buttonDrivers.Enabled = $true
			$buttonDrivers.Text = "Drivers"
		}
		
		
	}
	$buttonLockdownSecureSystem_Click={
		$computer = $IR_Computers.Text
		if ([System.Windows.Forms.MessageBox]::Show("This will force log off all users and disable ALL network adapters", "Are you sure?", [System.Windows.Forms.MessageBoxButtons]::OKCancel) -eq "OK")
		{
			Invoke-CimMethod -ClassName Win32_Operatingsystem -ComputerName $computer -MethodName Win32Shutdown -Arguments @{
				Flags = 4
			}
					$Networks = Get-WmiObject Win32_NetworkAdapter -ComputerName $Computer | ? {
						$_.NetConnectionID -match $ConnectionName
					}
					foreach ($Network in $Networks)
					{
						$retval = $Network.Disable()
						if ($retval.returnValue -eq 0)
						{
							Update-Log "Successfully disabled `"$($network.NetConnectionID)`" on $Computer"
						}
						else
						{
							Update-Log "Failed to disable `"$($network.NetConnectionID)`" on $Computer"
						}
					}
					
		}
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_datagridview17 = $datagridview17.SelectedCells
		if ($datagridview17.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview17_SelectedObjects = $datagridview17.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview17_SelectedObjects = $datagridview17.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview17.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview15 = $datagridview15.SelectedCells
		if ($datagridview15.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview15_SelectedObjects = $datagridview15.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview15_SelectedObjects = $datagridview15.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview15.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview13 = $datagridview13.SelectedCells
		if ($datagridview13.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview13_SelectedObjects = $datagridview13.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview13_SelectedObjects = $datagridview13.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview13.Rows[$_].DataBoundItem } } }
		$script:MainForm_IR_Computers = $IR_Computers.Text
		$script:MainForm_datagridview2 = $datagridview2.SelectedCells
		if ($datagridview2.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview2_SelectedObjects = $datagridview2.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview2_SelectedObjects = $datagridview2.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview2.Rows[$_].DataBoundItem } } }
		$script:MainForm_richtextbox1 = $richtextbox1.Text
		$script:MainForm_textbox11 = $textbox11.Text
		$script:MainForm_textbox10 = $textbox10.Text
		$script:MainForm_textbox7 = $textbox7.Text
		$script:MainForm_textbox6 = $textbox6.Text
		$script:MainForm_textbox5 = $textbox5.Text
		$script:MainForm_textbox4 = $textbox4.Text
		$script:MainForm_textbox3 = $textbox3.Text
		$script:MainForm_sirda_status = $sirda_status.Text
		$script:MainForm_textbox1 = $textbox1.Text
		$script:MainForm_textbox12 = $textbox12.Text
		$script:MainForm_datagridview8 = $datagridview8.SelectedCells
		if ($datagridview8.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview8_SelectedObjects = $datagridview8.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview8_SelectedObjects = $datagridview8.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview8.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview1 = $datagridview1.SelectedCells
		if ($datagridview1.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview1_SelectedObjects = $datagridview1.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview1_SelectedObjects = $datagridview1.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview1.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview3 = $datagridview3.SelectedCells
		if ($datagridview3.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview3_SelectedObjects = $datagridview3.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview3_SelectedObjects = $datagridview3.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview3.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview4 = $datagridview4.SelectedCells
		if ($datagridview4.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview4_SelectedObjects = $datagridview4.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview4_SelectedObjects = $datagridview4.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview4.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview5 = $datagridview5.SelectedCells
		if ($datagridview5.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview5_SelectedObjects = $datagridview5.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview5_SelectedObjects = $datagridview5.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview5.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview7 = $datagridview7.SelectedCells
		if ($datagridview7.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview7_SelectedObjects = $datagridview7.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview7_SelectedObjects = $datagridview7.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview7.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview6 = $datagridview6.SelectedCells
		if ($datagridview6.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview6_SelectedObjects = $datagridview6.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview6_SelectedObjects = $datagridview6.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview6.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview9 = $datagridview9.SelectedCells
		if ($datagridview9.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview9_SelectedObjects = $datagridview9.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview9_SelectedObjects = $datagridview9.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview9.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview10 = $datagridview10.SelectedCells
		if ($datagridview10.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview10_SelectedObjects = $datagridview10.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview10_SelectedObjects = $datagridview10.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview10.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview11 = $datagridview11.SelectedCells
		if ($datagridview11.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview11_SelectedObjects = $datagridview11.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview11_SelectedObjects = $datagridview11.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview11.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview12 = $datagridview12.SelectedCells
		if ($datagridview12.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview12_SelectedObjects = $datagridview12.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview12_SelectedObjects = $datagridview12.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview12.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview14 = $datagridview14.SelectedCells
		if ($datagridview14.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview14_SelectedObjects = $datagridview14.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview14_SelectedObjects = $datagridview14.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview14.Rows[$_].DataBoundItem } } }
		$script:MainForm_datagridview16 = $datagridview16.SelectedCells
		if ($datagridview16.SelectionMode -eq 'FullRowSelect')
		{ $script:MainForm_datagridview16_SelectedObjects = $datagridview16.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
		else { $script:MainForm_datagridview16_SelectedObjects = $datagridview16.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview16.Rows[$_].DataBoundItem } } }
		$script:MainForm_textbox2 = $textbox2.Text
		$script:MainForm_textboxFile = $textboxFile.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonRestartNow.remove_Click($buttonRestartNow_Click)
			$buttonTraceroute.remove_Click($buttonTraceroute_Click)
			$buttonManagement.remove_Click($buttonManagement_Click)
			$buttonRemoteDesktop.remove_Click($buttonRemoteDesktop_Click)
			$buttonDrivers.remove_Click($buttonDrivers_Click)
			$buttonMonitors.remove_Click($buttonMonitors_Click)
			$buttonUSBPorts.remove_Click($buttonUSBPorts_Click)
			$buttonApplicationLog.remove_Click($buttonApplicationLog_Click)
			$buttonSystemLog.remove_Click($buttonSystemLog_Click)
			$buttonWindowsUpdate.remove_Click($buttonWindowsUpdate_Click)
			$buttonSCCMLogs.remove_Click($buttonSCCMLogs_Click)
			$buttonScheduledTasks.remove_Click($buttonScheduledTasks_Click)
			$buttonUpdatesHotfixes.remove_Click($buttonUpdatesHotfixes_Click)
			$buttonServices.remove_Click($buttonServices_Click)
			$buttonProcesses.remove_Click($buttonProcesses_Click)
			$IR_Computers.remove_TextChanged($IR_Computers_TextChanged)
			$buttonHistoricalLogs.remove_Click($buttonHistoricalLogs_Click)
			$buttonOpenReportsFolder.remove_Click($buttonOpenReportsFolder_Click)
			$buttonExecuteIncidentRespo.remove_Click($buttonExecuteIncidentRespo_Click)
			$sirda_status.remove_TextChanged($sirda_status_TextChanged)
			$buttonLockdownSecureSystem.remove_Click($buttonLockdownSecureSystem_Click)
			$MainForm.remove_Load($OnLoadFormEvent)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$tabpage1.SuspendLayout()
	$groupbox5.SuspendLayout()
	$groupbox6.SuspendLayout()
	$groupbox8.SuspendLayout()
	$groupbox7.SuspendLayout()
	$tabpage9.SuspendLayout()
	$tabpage2.SuspendLayout()
	$tabpage3.SuspendLayout()
	$tabpage4.SuspendLayout()
	$tabpage5.SuspendLayout()
	$tabpage8.SuspendLayout()
	$tabpage7.SuspendLayout()
	$tabpage10.SuspendLayout()
	$tabpage11.SuspendLayout()
	$tabpage12.SuspendLayout()
	$tabpage13.SuspendLayout()
	$tabpage14.SuspendLayout()
	$tabpage15.SuspendLayout()
	$tabpage6.SuspendLayout()
	$statusstrip1.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($tabcontrol1)
	$MainForm.Controls.Add($textbox2)
	$MainForm.Controls.Add($buttonLockdownSecureSystem)
	$MainForm.Controls.Add($statusstrip1)
	$MainForm.Controls.Add($picturebox1)
	$MainForm.AutoScaleDimensions = '6, 13'
	$MainForm.AutoScaleMode = 'Font'
	$MainForm.BackColor = 'WhiteSmoke'
	$MainForm.ClientSize = '1475, 799'
	$MainForm.FormBorderStyle = 'FixedSingle'
	#region Binary Data
	$MainForm.Icon = [System.Convert]::FromBase64String('
AAABAAEAQE4AAAEAIACYUAAAFgAAACgAAABAAAAAnAAAAAEAIAAAAAAAcFAAABMLAAATCwAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8vn9AgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALTn+Tbv/P8PAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAvs/qa6PT/UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALbj7wHjN/KwAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAF/J+rQIpvz/3u3/CgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlyvyoAJn7/4rS/WQA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAO7v70QCe+/9Iv/rSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2vD9FRmw+vYDqf3/B6j7/8Pn
/lEAAAAA8//8AfT++wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAALrn/UIOrfr/Eaz9/wCh+/9jyfe2AAAAAAAAAAD1//4BAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB81PqMAKP7/xiv/v8Mq/3/Eq/5
/8fr/DIAAAAA8f//AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAPrz72gCn/P8Yr/3/GrD+/wCh/f9pyP2eAAAAAAAAAADz//8BAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArt//WAeq+v8Trf3/F6/9/xev/f8Gqvz/
HrT6+OH1/h8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAC61/dAAp/3/G6/9/xev/f8Xr/3/GrD8/wCk+f+E1P6LAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA+/31Ae/+/gUAAAAAAAAAAH/V9Z8Apvr/Fa7+/xav/f8Xr/3/Fq/9/xqv/P8A
pvr/Nrr44vr+/goAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7fn7B1rF/qoA
o/z/Dav9/xmx+v8Yr/z/F6/9/xev/f8Xr/z/Eq37/wCp+v+n4/xSAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAADI8vsSn939eSy2+/EAp/z/Eaz8/xqw/P8XsPz/Fq/8/xev/f8Yr/3/Fa7//xix
+v8Aovv/e9D8kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ3f/jNWyPunIbL6/gCh+/8Dp/z/F7D9/xiw
/f8Xr/3/Fq/9/xev/f8Xr/3/F6/9/xiu/v8Ysfr/AKf8/07B+8MAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAk9n9UWTL
+8oTr/n/AKb6/wWo/f8Xr/3/GbD+/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xav/f8Zrv3/GLD8
/wOr/f80uvvgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAPP9/g1YxPxqH7P74Qir/P8Ao/r/DKz8/xqv/f8Xr/z/F6/9/xiw/v8YsP7/F6/9
/xev/f8Xr/3/F6/9/xev/f8Xr/3/F7D9/xiw/P8Oqvv/LrX+6GXE/wQAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAD///YCAAAAAAAAAAAAAAAAuOX8MF/H+5ontfn8B6j6/wOq/P8Srv3/GLD+
/xeu/v8Zr/3/GLD8/xew/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xau/f8br/r/
Ba76/zK3/eF5yP8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH0f9NU8P9
vw+u+f8Cp/z/Ban6/xmw/P8Zr/7/F6/9/xev/f8Xr/3/Fq/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/
F6/9/xev/f8Xr/3/F6/9/xav/f8Zr/3/FbH8/wCm/P9XxPqvAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAA6Pr6E3fN/3A5u/vgCKv7/wCj/f8Orfz/GbL6/xaw+v8Vr/3/F6/9/xev/f8Xr/3/
F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F679/xOv/P8A
n/z/pN36cgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACz5PopZMn+lye1/PcCpvz/AKb+/xOv+/8bsfv/
F6/9/xSw/P8Ur/7/F6/+/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8X
r/3/F6/9/xav/f8Xrvz/Fq/9/xaw/P8Apvv/KLH76Oz1/A8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9P/6Av//9AEAAAAAAAAAAJvf+0xax/vB
FbH6/wCj+/8Cp/r/FLH3/xmv/f8Xr/3/F6/+/xev/f8Yr/3/GK/9/xev/f8Xr/3/F6/9/xev/f8X
r/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xrvz/F6/8/xix/f8Jq/z/AKH7/5/f
/GQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAq+D8Tj+8+9wGqfn/AKT8/wys/P8ZsPv/GLD8/xeu/v8Xr/3/F6/9/xev/f8X
r/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xav/f8Xr/7/F6/+/xev
/f8Xr/3/G6/9/xmx/f8BqP3/AKT6/4/V/YoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADc8PoEZcj+qgGo+v8Apf3/Faz8/xuv/f8V
r/z/GK/9/xev/f8Zr/z/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev
/f8Xr/3/Fq/8/xaw/f8arv7/FbD6/xix+/8Yr/v/FLD8/wyr/f8Apv3/Cqr8/3bM/3UAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADy//8B7v/+AQAAAADj
9fsVP7/31gCg/P8NrP3/GrH9/xev/f8Xr/3/GK/9/xev/f8Xr/3/Fq/9/xev/f8Xr/3/F6/9/xev
/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xav/f8Zsf3/Gq/8/xut/f8Yrf3/Bqj9
/wKn+/8SrPz/TL/7qcbq9BoAAAAAAAAAAAAAAAD///gBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASL36xACe+/8ZsPv/GrH5/xau/f8Xr/3/F6/9/xev
/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/GK/9/xev/f8Xr/7/F6/9
/xiv/f8UsP7/G7D9/xCt/P8Ao/z/BKf9/ym3++tfy/qI0O77HQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAh9n7ggCh
+P8WrP//GbD7/xiw+v8Xrv7/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9
/xev/f8Xr/3/F7D8/xOx/f8Wr/3/GLD7/xmw/P8ar/7/CKv5/wCj+/8Hpv//R8P30n3S+2Ci2/0F
AAAAAAAAAAAAAAAAAAAAAAAAAADA5/4ri9P5Zj6w9o5BtPSYasLykYbM+Ges3f8gAAAAAAAAAAD7
//cBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAA7/f8CiWz+uIAp/3/Ga/9/xav/v8Xr/7/F6/9/xev/f8Xr/3/F6/9
/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xSv/v8Yr/z/G6/8/xWu+/8Cqfr/
AKb7/xuu+f9Nw/uzuOX8QAAAAAAAAAAAAAAAAAAAAAAAAAAA2fT7EH/V/X4stPnZF6n3/wme+v8H
ofP/CZ/0/wiX8v8HlfH/H5zz/2u/86fl7vsVAAAAAPD//wHx/v8BAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMXl/EMApvr/Eq/8
/xeu/v8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/
F6/9/xiv/f8Zsfz/Ea77/wCl+f8Gqvv/MLf871jG+Y7F6v4dAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAy/X9MR2w9/8AnPr/BKD3/wqj9P8ao/P/HKD2/xig8/8ZnvD/Gpzv/wyT6/8Ahez/Hpbw9bHU
+DcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAB3z/x8A6j6/xWu/P8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/
F6/9/xev/f8Xrv3/F63//xmv/v8XsPz/F6/+/xmv/v8KrP3/AKj4/wGo/P9Pv/3bVcP+ZLDk/QUA
AAAAAAAAAAAAAADx//4D7///AQAAAAAAAAAAAAAAAPn/9Q9Atv3iAJ72/xyo8/8YovP/GKLz/xyg
8/8bnPP/GZvx/xia8f8amuz/IJjr/wCE6v8Ykuf94On5NAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUMT7lAur+/8Yr/z/
F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F7D8/xiw+f8YsPv/FLD7/weq+/8A
pfz/B6j7/0vA/rqY2f9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6//+AvD//wEAAAAAAAAAAAAA
AAAAAAAAsN/1XgCZ+P8XofT/GqH1/xqe9f8anPL/G5vy/xyZ8f8clvD/G5Tv/xqV6/8hkuz/AHvm
/zyb7dAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAHDM+nsEq/r/FbD8/xev/v8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8X
r/3/F6/9/xuw/P8Qrvz/AKb7/wCk+/8wt/v1as/7mKbd/iMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANvs/AY1rPjjApjx/xuf9P8anvH/GZvw
/xmY8P8al+//HJbu/xuT7P8bkez/Go/r/xmN6v8AfOP/oc7xaAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACn3/1SBar7/xWv/f8Y
r/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/GbD9/xaw/v8ApP3/AKb7/0S/+t1zyf1rgND/CgAA
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
/f8Wr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Wr/7/Ea38/wSo+//C6/VAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA0On7MxCd8P8NnfH/GaLy/xqj9f8Ypfb/Gqb5/wCi+v8DpfX/tuH8YgAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ/b/VRQwfvHE677/wCm+/8Irfv/F7H//xiv
/P8Xrvz/F6/9/xav/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9
/xev/f8Xr/3/F7D8/wCm/P8ss/zi5vb6CwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkvvWzAJL0/xum9f8c
pvj/GKf5/wCg+P8Ipfj/odr8YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5/v4EXMf9aCe1
/OcGqvn/AKT7/xKs/f8esvv/FLD7/xau/P8Yrvz/Ga/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9
/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xiv/f8Yrv3/F7D9/xmx/f8AoPv/iNb7hAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAtN34TAKc9v8Op/b/BqH5/wCh+v9Bvvrr1/L8RwAAAAAAAAAA8/3/AgAA
AAAAAAAAAAAAALzo/hxyz/uMM7f57QCm+/8Fqfz/Ea39/xmw/P8YsPz/Ga/9/xWu/f8Xrvz/F6/9
/xiv/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/
FrH6/xWx+/8Aovz/Obf63/f9+g8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFu/TRAJb3/xqw
+uxjxvlqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0O75Jl/K+rIhsvr/AKH9/wOn/v8YsP7/GK/9
/xev/v8Xr/3/F6/9/xav/f8Yr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/
F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/7/FrH7/xeu/f8AoPz/H7L48NXx+CkAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAPL7/wMAAAAAqOX8VYLT+Yq05PUJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjdT7
iwqq/P8Aovj/Bqn8/xey+/8Wsfn/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/
F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/GK/9/xav/f8asP3/Fa79/wOn/v8A
ovz/S8T4zd3z/RsAAAAA8/79AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADx//4B9f/5Atr2+gEAAAAAAAAA
AAAAAAAAAAAA8v//AQAAAADK6P4ISML6xQCi+/8Lqf3/HrD6/xev/P8Vsfz/GK/7/xev/f8Xr/3/
F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8X
r/3/F7D8/xWx/f8QrP3/AKX9/wCm/v80uPzjktj5XQAAAAAAAAAA9P/+AvD9/gEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7v7/AQAAAAAAAAAAYsT7rQCg+f8Prf3/
GbD9/xev/v8Xr/3/F679/xev/v8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8X
r/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/GrD9/w6s/f8ApPv/CKr4/0fA+9KN2Pxc3fX3AgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAs+T3YACi/f8Orv7/GbD9/xau/P8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8X
r/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Wr/3/F6/9/xev/f8Yr/3/Fq/+/xiv/f8ZsP3/Bqn+/wCm
+f8Wr/v/Xcj7v7fk/T4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6Pn8Azu8/NgApPn/G7H8/xiu/f8X
r/3/GLD+/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xWw+/8WsP3/Ga/+/xiv
/P8Xr/3/FrD9/xew/P8Bpvz/AKL9/ya0/fdpzfmghtf3KAAAAAAAAAAAAAAAAPP//wH1//8BAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAALPi/TkKqPz/D677/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev
/f8Xr/3/F6/9/xev/f8Yrv3/GLD9/xiv+v8WsPr/Eq/8/wCl+v8Epvn/Pb799mfK/YCt4fkOAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACw4vtMA6r5/xOu//8Yrv7/F6/9/xev
/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xev/f8Wr/7/GrD8/yCw+v8HrPv/Aaj7
/wer/P9KwfnejNP8Ztj0/wcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAgdT9bAWq+f8Vr/r/F6/+/xev/f8Xr/3/F6/9/xev/f8Xr/3/F6/9/xiv/P8Xr/z/FbD7
/xeu/v8Xr/7/GLD9/wqs+f8Ao/z/B6r8/zC799KM2PxQAAAAAAAAAAAAAAAAAAAAAP//9gH3/v8B
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIrW/GMIqfr/F678/xiv/P8Xr/3/F6/9
/xev/f8Xr/3/F6/9/xiv/f8Xrv3/FbD9/xmv+/8Yrfz/C6n7/wCk+f8VrP3/Wsb6srXg+jYAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAC+5vtDB6v4/w+t/f8Yr/z/F6/9/xev/f8Xr/3/F6/9/xev/f8Xr/z/GLD6/xSu/f8Bp/3/
AKT4/yGx+/xyzvqby/D9IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAy+z9Lhmt+/8Lq/z/GbD8/xev/f8Wr/3/
GLD9/xWw/f8Zr///E677/wCn+P8Cpfz/Lrf77ofV/Huy4fsPAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAA3vfrQAKP6/xev/f8Zrvz/GK/7/xiw/f8PrP3/AKj6/wmr+v9CvvzglNz7YNry/QQA
AAAAAAAAAAAAAAAAAAAA8//7AfH//gEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAh9n5ggCh/P8ar/z/F7D8/w2t+/8A
pvn/FKv7/1fH+cN0zvhHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAN3w+SgUrvv/AKH8/wCn+f8Hqvr/VML7q7Pk/DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAacv7sAys9/9hx/uYqOL5HwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AADv/f8BAAAAAM3w+x/R7vkkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////3////////////////////5//////////n//////
///+f/////////4//////////j/////////+P/////////wT/////////Bv////////8C///////
//wN////////+Af////////4B////////zAD////////wAP///////8AA////////AAD///////w
AAP//////4AAAf/////uAAAB//////gAAAP/////wAAAA/////8AAAAD////zAAAAAf////wAAAA
D////8AAAAAf///8gAAAADv///+AAAAA/////wAAAAPgN//+AAAAHwAJ//4AAAB+AAf//gAAAc4A
A//+AAAPzwAD//4AAD//AAH//gAA//+AAf/+AAff/4AA//8ADP//wAD//QAg///AAH/9gED//+AA
f/6AgP//4AB//4AAf//gAD//wABf//AAP//AAD//8AAf/+AAP//4AB//4AA///gAH//gAB///AQP
//AAH//8CA//0AAP//wYB//4AA///jAH//gAD//9wAf//AAP//8AA//8AA//fAAD//wAD//gAAP/
9gAP/4AAA//6AB/+AAAD//8AH7gAAAP//wA/4AAAA///gH8AAAAH//+A3AAAAAf//8PwAAAAD///
R+AAAAAX//8egAAAAGf///2AAAAA/////wAAAAf////+AAAAHP////4AAAB//////gAAAf/////+
AAAPP/////4AAD///////gAA///////+AAP///////8ADz///////wB/////////Af////////+H
/////////p////////////////8=')
	#endregion
	$MainForm.Name = 'MainForm'
	$MainForm.SizeGripStyle = 'Hide'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'SIRDA - Security Incident Response and Data Acqusition'
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage1)
	$tabcontrol1.Controls.Add($tabpage9)
	$tabcontrol1.Controls.Add($tabpage2)
	$tabcontrol1.Controls.Add($tabpage3)
	$tabcontrol1.Controls.Add($tabpage4)
	$tabcontrol1.Controls.Add($tabpage5)
	$tabcontrol1.Controls.Add($tabpage8)
	$tabcontrol1.Controls.Add($tabpage7)
	$tabcontrol1.Controls.Add($tabpage10)
	$tabcontrol1.Controls.Add($tabpage11)
	$tabcontrol1.Controls.Add($tabpage12)
	$tabcontrol1.Controls.Add($tabpage13)
	$tabcontrol1.Controls.Add($tabpage14)
	$tabcontrol1.Controls.Add($tabpage15)
	$tabcontrol1.Controls.Add($tabpage6)
	$tabcontrol1.Anchor = 'Top, Bottom, Left, Right'
	$tabcontrol1.Location = '0, 81'
	$tabcontrol1.Name = 'tabcontrol1'
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '1485, 693'
	$tabcontrol1.TabIndex = 107
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($groupbox5)
	$tabpage1.Controls.Add($groupbox6)
	$tabpage1.Controls.Add($groupbox8)
	$tabpage1.Controls.Add($groupbox7)
	$tabpage1.Controls.Add($labelSMBShares)
	$tabpage1.Controls.Add($datagridview17)
	$tabpage1.Controls.Add($labelPowerShellNETVersion)
	$tabpage1.Controls.Add($datagridview15)
	$tabpage1.Controls.Add($labelLocalAdminMembers)
	$tabpage1.Controls.Add($datagridview13)
	$tabpage1.Controls.Add($labelEnterComputerName)
	$tabpage1.Controls.Add($IR_Computers)
	$tabpage1.Controls.Add($labelCollectionStatus)
	$tabpage1.Controls.Add($datagridview2)
	$tabpage1.Controls.Add($buttonHistoricalLogs)
	$tabpage1.Controls.Add($buttonOpenReportsFolder)
	$tabpage1.Controls.Add($progressbar_audit)
	$tabpage1.Controls.Add($richtextbox1)
	$tabpage1.Controls.Add($labelArchitecture)
	$tabpage1.Controls.Add($textbox11)
	$tabpage1.Controls.Add($textbox10)
	$tabpage1.Controls.Add($labelWindowsOS)
	$tabpage1.Controls.Add($textbox7)
	$tabpage1.Controls.Add($textbox6)
	$tabpage1.Controls.Add($textbox5)
	$tabpage1.Controls.Add($labelDHCPServer)
	$tabpage1.Controls.Add($labelSecDNS)
	$tabpage1.Controls.Add($labelPrimaryDNS)
	$tabpage1.Controls.Add($textbox4)
	$tabpage1.Controls.Add($textbox3)
	$tabpage1.Controls.Add($labelMACAddress)
	$tabpage1.Controls.Add($labelIPAddress)
	$tabpage1.Controls.Add($buttonExecuteIncidentRespo)
	$tabpage1.Controls.Add($sirda_status)
	$tabpage1.Controls.Add($labelCurrentUser)
	$tabpage1.Controls.Add($textbox1)
	$tabpage1.Controls.Add($labelLogonTime)
	$tabpage1.Controls.Add($textbox12)
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '1477, 667'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'Main'
	$tabpage1.UseVisualStyleBackColor = $True
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($buttonRestartNow)
	$groupbox5.Controls.Add($buttonTraceroute)
	$groupbox5.Controls.Add($buttonManagement)
	$groupbox5.Controls.Add($buttonRemoteDesktop)
	$groupbox5.Anchor = 'Top, Right'
	$groupbox5.Location = '665, 316'
	$groupbox5.Name = 'groupbox5'
	$groupbox5.Size = '200, 169'
	$groupbox5.TabIndex = 157
	$groupbox5.TabStop = $False
	$groupbox5.Text = 'Management'
	$groupbox5.UseCompatibleTextRendering = $True
	#
	# buttonRestartNow
	#
	$buttonRestartNow.BackColor = 'AliceBlue'
	$buttonRestartNow.Enabled = $False
	$buttonRestartNow.FlatStyle = 'Popup'
	#region Binary Data
	$buttonRestartNow.Image = [System.Convert]::FromBase64String('
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
gg==')
	#endregion
	$buttonRestartNow.ImageAlign = 'MiddleLeft'
	$buttonRestartNow.Location = '23, 128'
	$buttonRestartNow.Name = 'buttonRestartNow'
	$buttonRestartNow.Size = '158, 23'
	$buttonRestartNow.TabIndex = 21
	$buttonRestartNow.Text = 'Restart Now!'
	$buttonRestartNow.UseCompatibleTextRendering = $True
	$buttonRestartNow.UseVisualStyleBackColor = $False
	$buttonRestartNow.add_Click($buttonRestartNow_Click)
	#
	# buttonTraceroute
	#
	$buttonTraceroute.BackColor = 'AliceBlue'
	$buttonTraceroute.Enabled = $False
	$buttonTraceroute.FlatStyle = 'Popup'
	#region Binary Data
	$buttonTraceroute.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAE7SURBVDhPpZA/S8NQFMX7GfwkjuJXENwF
cczimCkOCsFNBTWCoJWiliAY4z+0WEwVXQRtpWiHogilagZBRHBxOb5zIcpLXw3i8Lt5ybnn5HFy
AP6FjNv6NUrHFZxWIhyVDr6pVa+UbDYmyLipXsCOPrDShMDzSPiO8uGuks3GBBn3jfrnaNCCe/Im
8Dy49ortjXUlm40JMhgwnG/ACmJhqNhGn/cEf7WgZLMxQQYDBmYuxdTvtdE71ULPxCPmF/NKNhsT
ZDzcNV/cpX1MFs+xsHmG5a0IhaAMb24WWQVLQBw/T+/thCDu+Jgs0EBzVsHadXgT27YRhqGY+S2r
YM3MPzuOA4b4vi8LWQVrNyCWZanHz3tWwZqZpAN+K5i6ZibpALbdrWDqmpkwIA2XTQWTjgAT3Qom
Hct/A7kvnxj9K5Yf5Q8AAAAASUVORK5CYII=')
	#endregion
	$buttonTraceroute.ImageAlign = 'MiddleLeft'
	$buttonTraceroute.Location = '23, 95'
	$buttonTraceroute.Name = 'buttonTraceroute'
	$buttonTraceroute.Size = '158, 23'
	$buttonTraceroute.TabIndex = 22
	$buttonTraceroute.Text = 'Traceroute'
	$buttonTraceroute.UseCompatibleTextRendering = $True
	$buttonTraceroute.UseVisualStyleBackColor = $False
	$buttonTraceroute.add_Click($buttonTraceroute_Click)
	#
	# buttonManagement
	#
	$buttonManagement.BackColor = 'AliceBlue'
	$buttonManagement.Enabled = $False
	$buttonManagement.FlatStyle = 'Popup'
	#region Binary Data
	$buttonManagement.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAN0AAADdABEGw9BwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAF7SURB
VDhPY/j//z9FGKsgMrZIKt1nGJPviU0OhLEKImOg5v9OWdXfjGILIrHJYwigY5ABlx+++O+eX//d
JL4wG10ehYMNgwx48PbT/4sPn//3LW75ZppQXIcsz2CVUt5oHFf4G6QQG3bOqf1+7fm7/wdvP/1/
5v6z/yGVnd/MEksmA+UYwQaANB++8fD/uYcvseIzD17+33X14f/VZ2793375/v+jtx7/j6zr+2qe
WLIMaAgz2Il7rz38P+/wZaLw8pPX/2+/ePd/dOPEb8AYWgs2YPXp6/8n7T5NFJ554Nz/pccu/w+u
7vlmDjIAGD2/+zYf+T99zxmseNruM//7tp3437bxyP+ercf/T9h27L9bQdMXYGBCvAAMkEaQISCX
YMOWKeXfG9bu/1+7eu//iqXb/9ukV301iS9CBCJylGDDIENyF2z5nzpt1X+zpNKvwEBHjUZkDjYM
MiCie9F/k4RiUGokLyEZxxV9A9LkJWWjuELKMhN+/J8BADM2xjH0qkxdAAAAAElFTkSuQmCC')
	#endregion
	$buttonManagement.ImageAlign = 'MiddleLeft'
	$buttonManagement.Location = '23, 61'
	$buttonManagement.Name = 'buttonManagement'
	$buttonManagement.Size = '158, 24'
	$buttonManagement.TabIndex = 158
	$buttonManagement.Text = 'Management'
	$buttonManagement.UseCompatibleTextRendering = $True
	$buttonManagement.UseVisualStyleBackColor = $False
	$buttonManagement.add_Click($buttonManagement_Click)
	#
	# buttonRemoteDesktop
	#
	$buttonRemoteDesktop.BackColor = 'AliceBlue'
	$buttonRemoteDesktop.Enabled = $False
	$buttonRemoteDesktop.FlatStyle = 'Popup'
	#region Binary Data
	$buttonRemoteDesktop.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAN0AAADdABEGw9BwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAF7SURB
VDhPY/j//z9FGKsgMrZIKt1nGJPviU0OhLEKImOg5v9OWdXfjGILIrHJYwigY5ABlx+++O+eX//d
JL4wG10ehYMNgwx48PbT/4sPn//3LW75ZppQXIcsz2CVUt5oHFf4G6QQG3bOqf1+7fm7/wdvP/1/
5v6z/yGVnd/MEksmA+UYwQaANB++8fD/uYcvseIzD17+33X14f/VZ2793375/v+jtx7/j6zr+2qe
WLIMaAgz2Il7rz38P+/wZaLw8pPX/2+/ePd/dOPEb8AYWgs2YPXp6/8n7T5NFJ554Nz/pccu/w+u
7vlmDjIAGD2/+zYf+T99zxmseNruM//7tp3437bxyP+ercf/T9h27L9bQdMXYGBCvAAMkEaQISCX
YMOWKeXfG9bu/1+7eu//iqXb/9ukV301iS9CBCJylGDDIENyF2z5nzpt1X+zpNKvwEBHjUZkDjYM
MiCie9F/k4RiUGokLyEZxxV9A9LkJWWjuELKMhN+/J8BADM2xjH0qkxdAAAAAElFTkSuQmCC')
	#endregion
	$buttonRemoteDesktop.ImageAlign = 'MiddleLeft'
	$buttonRemoteDesktop.Location = '23, 28'
	$buttonRemoteDesktop.Name = 'buttonRemoteDesktop'
	$buttonRemoteDesktop.Size = '158, 23'
	$buttonRemoteDesktop.TabIndex = 157
	$buttonRemoteDesktop.Text = 'Remote Desktop'
	$buttonRemoteDesktop.UseCompatibleTextRendering = $True
	$buttonRemoteDesktop.UseVisualStyleBackColor = $False
	$buttonRemoteDesktop.add_Click($buttonRemoteDesktop_Click)
	#
	# groupbox6
	#
	$groupbox6.Controls.Add($buttonDrivers)
	$groupbox6.Controls.Add($buttonMonitors)
	$groupbox6.Controls.Add($buttonUSBPorts)
	$groupbox6.Anchor = 'Top, Right'
	$groupbox6.Location = '665, 194'
	$groupbox6.Name = 'groupbox6'
	$groupbox6.Size = '200, 114'
	$groupbox6.TabIndex = 156
	$groupbox6.TabStop = $False
	$groupbox6.Text = 'Hardware'
	$groupbox6.UseCompatibleTextRendering = $True
	#
	# buttonDrivers
	#
	$buttonDrivers.BackColor = 'AliceBlue'
	$buttonDrivers.Enabled = $False
	$buttonDrivers.FlatStyle = 'Popup'
	#region Binary Data
	$buttonDrivers.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAGSSURBVDhPbZI9S8NQFIb7GxwdBMHBUeji
4KibdNJJ/AO6CTq6iLNbJycRBHEQRcShDoJmEAMiYkW0tRWhIrFBSf3kmOeYky8beMnNved9znsu
KYjIP42tVmV0oyGTW00Va/bydSjzQeHcbk1Or9ri3r5Js/UhT+1vfSPO8qB4wQEFh2deV0DL++Lt
5CEZ877rxYDqfeBjNoAfiNQe3/Wb2uGVc4UogI0d51kBxxcv2v36Iainu3uvP6ooiUIUUFxy1NwN
EIok2r3zKTGAJIwztHgiMcDiA8DMHl0sHZA0gBoFlMpunAAz89M5iqgPa2IDYCwDFOcrCcDiY+4G
wGjzMxaXrIDB2T2lcUARXYibHyHsWicdTRgV4VUAh8SiAxAuDAhrFHX104CjMLECwoSF0nJFIRQC
wYxszUjExoyR98jCAdP9/QcDM9sSQbQbJkvESJitO4DLm0B6pzcTAGIDiKWgyG4dAP8GgLQ5A0AG
uWt0tJC7iOZXALF7JtbC0sSTAZgA9Y+XpW9qXcU63TWRFH4BXLlOiBVnbc8AAAAASUVORK5CYII=')
	#endregion
	$buttonDrivers.ImageAlign = 'MiddleLeft'
	$buttonDrivers.Location = '22, 82'
	$buttonDrivers.Name = 'buttonDrivers'
	$buttonDrivers.Size = '158, 23'
	$buttonDrivers.TabIndex = 14
	$buttonDrivers.Text = 'Drivers'
	$buttonDrivers.UseCompatibleTextRendering = $True
	$buttonDrivers.UseVisualStyleBackColor = $False
	$buttonDrivers.add_Click($buttonDrivers_Click)
	#
	# buttonMonitors
	#
	$buttonMonitors.BackColor = 'AliceBlue'
	$buttonMonitors.Enabled = $False
	$buttonMonitors.FlatStyle = 'Popup'
	#region Binary Data
	$buttonMonitors.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAEqSURBVDhPnZK/SsNQFMbvU5gaW/e+Qlyy
CUIolIL4EjqlcbWg4ugUIZtD8iTuGpMsGSQK7eLiExzPd3tjT24Lai78uLlfvvOD/FG8jpjjnmBW
nVDPhVktqKqK9u7e/gVmuoLwmQ4fv/4EulIQaMH8hUYPn2tiCytD1wgCCCY4OPOcRvcrGlq0Gfb2
Gl0jmEAw1YIop+H1+5qbDwY7cyuukfN9dI1g+iMYXL7SwWLFLM0uQWa4WuruDkGhb0pc69xm6ErB
TAvOn2j/YsPAIDOJEcwgOMWhD5iFAJ/izCbLMpLs6jCBwh9p4/t+GEURSTzPC1m01d0KgOu6izRN
SYLsVwEvJ45jquua8jzXFEVBZVlS0zSUJAlKTmemc1BqzODNAvt523y8mSH1DXnrQCJxlH62AAAA
AElFTkSuQmCC')
	#endregion
	$buttonMonitors.ImageAlign = 'MiddleLeft'
	$buttonMonitors.Location = '22, 18'
	$buttonMonitors.Name = 'buttonMonitors'
	$buttonMonitors.Size = '158, 23'
	$buttonMonitors.TabIndex = 12
	$buttonMonitors.Text = 'Monitors'
	$buttonMonitors.UseCompatibleTextRendering = $True
	$buttonMonitors.UseVisualStyleBackColor = $False
	$buttonMonitors.add_Click($buttonMonitors_Click)
	#
	# buttonUSBPorts
	#
	$buttonUSBPorts.BackColor = 'AliceBlue'
	$buttonUSBPorts.Enabled = $False
	$buttonUSBPorts.FlatStyle = 'Popup'
	#region Binary Data
	$buttonUSBPorts.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFOSURBVDhPjZOhjoNAEIb7GjwIBlmBQxRH
alBNMKQJDnOGl0BV9QGw1NzlUsMboEhwFYgmh57jmwuXXfaSHsnPZP7595/dgd2JiIWu66RtWwfw
Wy1wiKZp5PF4vI3j+GECfqsFDnG9XqWua+n7/ut+/9TO5PBbLXCIqqp00e32bgF+qwVWgiiOY8nz
3AH8XyZWsorKspTL5bJQopF8NUdnwkoQIKYjzzIHjUVRKP/SIIoiFWZZJkmSyDzPGs/ns/LUTT2w
kjAMtdvpdFJggBkRnrqpB1ayGjyfT0nTVCNnJ/7LYL/f6/mnadLvTgTrXKibemAlCNgy3Za/UcHg
2A38S4MgCPTsLGJgyy8sx+NRAU/d1AMr8X3/14ALhAGRLwFP3dQDfS1T9rhAbJHFLOAYwzBo5Ajw
1NGhtwyWQR3WS0MXz/McwFNHh8mPgey+ARISxJwwA4RuAAAAAElFTkSuQmCC')
	#endregion
	$buttonUSBPorts.ImageAlign = 'MiddleLeft'
	$buttonUSBPorts.Location = '22, 50'
	$buttonUSBPorts.Name = 'buttonUSBPorts'
	$buttonUSBPorts.Size = '158, 23'
	$buttonUSBPorts.TabIndex = 13
	$buttonUSBPorts.Text = 'USB Ports'
	$buttonUSBPorts.UseCompatibleTextRendering = $True
	$buttonUSBPorts.UseVisualStyleBackColor = $False
	$buttonUSBPorts.add_Click($buttonUSBPorts_Click)
	#
	# groupbox8
	#
	$groupbox8.Controls.Add($buttonApplicationLog)
	$groupbox8.Controls.Add($buttonSystemLog)
	$groupbox8.Controls.Add($buttonWindowsUpdate)
	$groupbox8.Controls.Add($buttonSCCMLogs)
	$groupbox8.Anchor = 'Top, Right'
	$groupbox8.Location = '665, 492'
	$groupbox8.Name = 'groupbox8'
	$groupbox8.Size = '200, 167'
	$groupbox8.TabIndex = 155
	$groupbox8.TabStop = $False
	$groupbox8.Text = 'Log Files'
	$groupbox8.UseCompatibleTextRendering = $True
	#
	# buttonApplicationLog
	#
	$buttonApplicationLog.BackColor = 'AliceBlue'
	$buttonApplicationLog.Enabled = $False
	$buttonApplicationLog.FlatStyle = 'Popup'
	#region Binary Data
	$buttonApplicationLog.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAahJREFU
OE+NkE0oBGEch+fuJDdujk64UUS5cJKT5MBBVvnKgZRELnJQDj7aSJJIJCtRNlpaUlop7MHH7tpm
dy12Z3bG7rAz87PveIXeV3nq6Z2a//95pxG+sDmjepszKtv2MmZO8kzsPHhKdB/G1cu42UJH+TRv
i3hOprnadkPocMW0Ow11dJylyRGwhnkMHUaQNkx0uaPyo2mW05Xf1K/eIqLyA317QStAHHSH/TpQ
SNe+qV30Ipx4oyu/KZvyoH7pyrJ3N2BJ176pnr2AKPMDP5FSaVTZL9hA5eQZREmjY5+Y9PwJCdTY
PWygdPwEQSlFx1hIjEgC1TNnbKB41AXfS9IaFhrmuRJCsoaKiWM2UDDshPdRhZb508q7wTWlm7iP
pVAy5mID+f07OBcVSO9/f0H8zcR1NImiEScbyO3ZxEkggUjSRFDRuYZfDXhCKgoGdthATvsaDu4k
+BWDezvRl9Bx/KAgv9fBBrJalrF/L8OvAjeywdWXeecOqsjrXmcDQuMCpo8esOWNYePyGRtXrA7v
C+ZORWS3rnACdXb824Z543NJED4AyS9eYYKUEvcAAAAASUVORK5CYII=')
	#endregion
	$buttonApplicationLog.ImageAlign = 'MiddleLeft'
	$buttonApplicationLog.Location = '19, 59'
	$buttonApplicationLog.Name = 'buttonApplicationLog'
	$buttonApplicationLog.Size = '160, 23'
	$buttonApplicationLog.TabIndex = 10
	$buttonApplicationLog.Text = 'Application Log'
	$buttonApplicationLog.UseCompatibleTextRendering = $True
	$buttonApplicationLog.UseVisualStyleBackColor = $False
	$buttonApplicationLog.add_Click($buttonApplicationLog_Click)
	#
	# buttonSystemLog
	#
	$buttonSystemLog.BackColor = 'AliceBlue'
	$buttonSystemLog.Enabled = $False
	$buttonSystemLog.FlatStyle = 'Popup'
	#region Binary Data
	$buttonSystemLog.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAahJREFU
OE+NkE0oBGEch+fuJDdujk64UUS5cJKT5MBBVvnKgZRELnJQDj7aSJJIJCtRNlpaUlop7MHH7tpm
dy12Z3bG7rAz87PveIXeV3nq6Z2a//95pxG+sDmjepszKtv2MmZO8kzsPHhKdB/G1cu42UJH+TRv
i3hOprnadkPocMW0Ow11dJylyRGwhnkMHUaQNkx0uaPyo2mW05Xf1K/eIqLyA317QStAHHSH/TpQ
SNe+qV30Ipx4oyu/KZvyoH7pyrJ3N2BJ176pnr2AKPMDP5FSaVTZL9hA5eQZREmjY5+Y9PwJCdTY
PWygdPwEQSlFx1hIjEgC1TNnbKB41AXfS9IaFhrmuRJCsoaKiWM2UDDshPdRhZb508q7wTWlm7iP
pVAy5mID+f07OBcVSO9/f0H8zcR1NImiEScbyO3ZxEkggUjSRFDRuYZfDXhCKgoGdthATvsaDu4k
+BWDezvRl9Bx/KAgv9fBBrJalrF/L8OvAjeywdWXeecOqsjrXmcDQuMCpo8esOWNYePyGRtXrA7v
C+ZORWS3rnACdXb824Z543NJED4AyS9eYYKUEvcAAAAASUVORK5CYII=')
	#endregion
	$buttonSystemLog.ImageAlign = 'MiddleLeft'
	$buttonSystemLog.Location = '19, 21'
	$buttonSystemLog.Name = 'buttonSystemLog'
	$buttonSystemLog.Size = '160, 23'
	$buttonSystemLog.TabIndex = 9
	$buttonSystemLog.Text = 'System Log'
	$buttonSystemLog.UseCompatibleTextRendering = $True
	$buttonSystemLog.UseVisualStyleBackColor = $False
	$buttonSystemLog.add_Click($buttonSystemLog_Click)
	#
	# buttonWindowsUpdate
	#
	$buttonWindowsUpdate.BackColor = 'AliceBlue'
	$buttonWindowsUpdate.Enabled = $False
	$buttonWindowsUpdate.FlatStyle = 'Popup'
	#region Binary Data
	$buttonWindowsUpdate.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAahJREFU
OE+NkE0oBGEch+fuJDdujk64UUS5cJKT5MBBVvnKgZRELnJQDj7aSJJIJCtRNlpaUlop7MHH7tpm
dy12Z3bG7rAz87PveIXeV3nq6Z2a//95pxG+sDmjepszKtv2MmZO8kzsPHhKdB/G1cu42UJH+TRv
i3hOprnadkPocMW0Ow11dJylyRGwhnkMHUaQNkx0uaPyo2mW05Xf1K/eIqLyA317QStAHHSH/TpQ
SNe+qV30Ipx4oyu/KZvyoH7pyrJ3N2BJ176pnr2AKPMDP5FSaVTZL9hA5eQZREmjY5+Y9PwJCdTY
PWygdPwEQSlFx1hIjEgC1TNnbKB41AXfS9IaFhrmuRJCsoaKiWM2UDDshPdRhZb508q7wTWlm7iP
pVAy5mID+f07OBcVSO9/f0H8zcR1NImiEScbyO3ZxEkggUjSRFDRuYZfDXhCKgoGdthATvsaDu4k
+BWDezvRl9Bx/KAgv9fBBrJalrF/L8OvAjeywdWXeecOqsjrXmcDQuMCpo8esOWNYePyGRtXrA7v
C+ZORWS3rnACdXb824Z543NJED4AyS9eYYKUEvcAAAAASUVORK5CYII=')
	#endregion
	$buttonWindowsUpdate.ImageAlign = 'MiddleLeft'
	$buttonWindowsUpdate.Location = '19, 97'
	$buttonWindowsUpdate.Name = 'buttonWindowsUpdate'
	$buttonWindowsUpdate.Size = '160, 23'
	$buttonWindowsUpdate.TabIndex = 8
	$buttonWindowsUpdate.Text = 'Windows Update'
	$buttonWindowsUpdate.UseCompatibleTextRendering = $True
	$buttonWindowsUpdate.UseVisualStyleBackColor = $False
	$buttonWindowsUpdate.add_Click($buttonWindowsUpdate_Click)
	#
	# buttonSCCMLogs
	#
	$buttonSCCMLogs.BackColor = 'AliceBlue'
	$buttonSCCMLogs.Enabled = $False
	$buttonSCCMLogs.FlatStyle = 'Popup'
	#region Binary Data
	$buttonSCCMLogs.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAahJREFU
OE+NkE0oBGEch+fuJDdujk64UUS5cJKT5MBBVvnKgZRELnJQDj7aSJJIJCtRNlpaUlop7MHH7tpm
dy12Z3bG7rAz87PveIXeV3nq6Z2a//95pxG+sDmjepszKtv2MmZO8kzsPHhKdB/G1cu42UJH+TRv
i3hOprnadkPocMW0Ow11dJylyRGwhnkMHUaQNkx0uaPyo2mW05Xf1K/eIqLyA317QStAHHSH/TpQ
SNe+qV30Ipx4oyu/KZvyoH7pyrJ3N2BJ176pnr2AKPMDP5FSaVTZL9hA5eQZREmjY5+Y9PwJCdTY
PWygdPwEQSlFx1hIjEgC1TNnbKB41AXfS9IaFhrmuRJCsoaKiWM2UDDshPdRhZb508q7wTWlm7iP
pVAy5mID+f07OBcVSO9/f0H8zcR1NImiEScbyO3ZxEkggUjSRFDRuYZfDXhCKgoGdthATvsaDu4k
+BWDezvRl9Bx/KAgv9fBBrJalrF/L8OvAjeywdWXeecOqsjrXmcDQuMCpo8esOWNYePyGRtXrA7v
C+ZORWS3rnACdXb824Z543NJED4AyS9eYYKUEvcAAAAASUVORK5CYII=')
	#endregion
	$buttonSCCMLogs.ImageAlign = 'MiddleLeft'
	$buttonSCCMLogs.Location = '19, 135'
	$buttonSCCMLogs.Name = 'buttonSCCMLogs'
	$buttonSCCMLogs.Size = '160, 23'
	$buttonSCCMLogs.TabIndex = 7
	$buttonSCCMLogs.Text = 'SCCM Logs'
	$buttonSCCMLogs.UseCompatibleTextRendering = $True
	$buttonSCCMLogs.UseVisualStyleBackColor = $False
	$buttonSCCMLogs.add_Click($buttonSCCMLogs_Click)
	#
	# groupbox7
	#
	$groupbox7.Controls.Add($buttonScheduledTasks)
	$groupbox7.Controls.Add($buttonUpdatesHotfixes)
	$groupbox7.Controls.Add($buttonServices)
	$groupbox7.Controls.Add($buttonProcesses)
	$groupbox7.Anchor = 'Top, Right'
	$groupbox7.BackColor = 'White'
	$groupbox7.Location = '665, 35'
	$groupbox7.Name = 'groupbox7'
	$groupbox7.Size = '200, 153'
	$groupbox7.TabIndex = 154
	$groupbox7.TabStop = $False
	$groupbox7.Text = 'General'
	$groupbox7.UseCompatibleTextRendering = $True
	#
	# buttonScheduledTasks
	#
	$buttonScheduledTasks.BackColor = 'AliceBlue'
	$buttonScheduledTasks.Enabled = $False
	$buttonScheduledTasks.FlatStyle = 'Popup'
	#region Binary Data
	$buttonScheduledTasks.Image = [System.Convert]::FromBase64String('
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
IAAAAABJRU5ErkJggg==')
	#endregion
	$buttonScheduledTasks.ImageAlign = 'MiddleLeft'
	$buttonScheduledTasks.Location = '21, 116'
	$buttonScheduledTasks.Name = 'buttonScheduledTasks'
	$buttonScheduledTasks.Size = '158, 23'
	$buttonScheduledTasks.TabIndex = 6
	$buttonScheduledTasks.Text = 'Scheduled Tasks'
	$buttonScheduledTasks.UseCompatibleTextRendering = $True
	$buttonScheduledTasks.UseVisualStyleBackColor = $False
	$buttonScheduledTasks.add_Click($buttonScheduledTasks_Click)
	#
	# buttonUpdatesHotfixes
	#
	$buttonUpdatesHotfixes.BackColor = 'AliceBlue'
	$buttonUpdatesHotfixes.Enabled = $False
	$buttonUpdatesHotfixes.FlatStyle = 'Popup'
	#region Binary Data
	$buttonUpdatesHotfixes.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAALDAAACwwBP0AiyAAAAAd0SU1FB9UHFg83K36S7SYAAAGxSURBVDhPtZI7aFNhHEfPoNQH2E1s
rRYXJbWI1ApdBDdFqIJoUBcHQVEHkeqmi1IcW0RRbFFw6GKLuqQ+K2opDhYfENNBqxaLjyahvprE
xPz8Kd92g2TQA4cL9zv/77uXe/lvaDULS81sKrYxqRXUhNvVoRZ25lvJ5eOcLuwmLZgVlqpD63k4
s5fi980Ml3qQYhwKS9WhOOnyWZSJefgq+rKOp+UmtmsNF0Pyd8obGNcx9G0/Knd7o43MfN5KvtDK
3ZBUJlPH/N/X/Fqe6bpPv2BPouw2NB237RS+1tPwJ67ERIx32SY6M+2Udd/Dl+xtVOhAOT9Nbh96
2cCukEdJLaYvfxAVD3twyA7ae7bfdvpVtqBUHQdCHiW5lIR8mi7b83bSXrF37BmUXIJeLGMq5FHG
ljOmI46H7Q07YR/bW6h0Dr1pRq9WkQ55lOeNpHQiDL0OGyTtuH1gu9DoIkZCHiUxj96fexyO2I82
bd/bT/aRv8IO5KYj5FESNTQO1fLhx3EPTFkF3/qfOIoG5zLaB3NCXplrUN8DXQO1JG+2MJ1YSbZ/
Nk964dQALAjZvwJ+AfSg+vXUHWIVAAAAAElFTkSuQmCC')
	#endregion
	$buttonUpdatesHotfixes.ImageAlign = 'MiddleLeft'
	$buttonUpdatesHotfixes.Location = '21, 84'
	$buttonUpdatesHotfixes.Name = 'buttonUpdatesHotfixes'
	$buttonUpdatesHotfixes.Size = '158, 23'
	$buttonUpdatesHotfixes.TabIndex = 5
	$buttonUpdatesHotfixes.Text = 'Updates/Hotfixes'
	$buttonUpdatesHotfixes.UseCompatibleTextRendering = $True
	$buttonUpdatesHotfixes.UseVisualStyleBackColor = $False
	$buttonUpdatesHotfixes.add_Click($buttonUpdatesHotfixes_Click)
	#
	# buttonServices
	#
	$buttonServices.BackColor = 'AliceBlue'
	$buttonServices.Enabled = $False
	$buttonServices.FlatStyle = 'Popup'
	#region Binary Data
	$buttonServices.Image = [System.Convert]::FromBase64String('
R0lGODlhEAAQAIU9AP///yg0P9HZ4VNeae7x9oOQnKSor1NgaUxWYXeDkN7f3/T3+N3l7bS+yNfg
6HR+ieLn66mwtquxt3N9h3iDjtHZ4+Dn7ZujrKissL7FzNLb5XB7h5Ccqf39/KCnri45RLrE0e/v
7ri8v9PY37/GzS87Rp2su3eDjmx5hEJNV2Ztd+Pn64iVoba8wd3j6MXN1oCNmdzh5GNsdigzPnJ9
idPV2LnCydrd4lBdZ0VPWZagqYOPmU1WYP///wAAAAAAACH/C05FVFNDQVBFMi4wAwEBAAAh+QQB
AAA9ACwAAAAAEAAQAAAI0gB7CBzIokABFgMTCjTYAwYAADB6MEy4IwOBBAksWMBIIIOOgThIEFiw
AECHDgBIEiBxQOABAiZGhIBQoQKEECNMEGjpUoECECc+fDgBwidPCjRQ1LDBIcdDHhxs1EBBg8KG
hyJeDHj4cMALEQ83PHDgAIOLrVwHuMBA9kGJGQgMtDCAdoBcAwhmlBCIQMCFGHTtxrggAMHAAAJW
CPBwQ4KEGx4SCwggMEAEAQ0wM2CQOXMEypUnCEghY7OMFAImgD5MWYUGDSp6BFitUPZs2gIDAgA7')
	#endregion
	$buttonServices.ImageAlign = 'MiddleLeft'
	$buttonServices.Location = '21, 52'
	$buttonServices.Name = 'buttonServices'
	$buttonServices.Size = '158, 23'
	$buttonServices.TabIndex = 4
	$buttonServices.Text = 'Services'
	$buttonServices.UseCompatibleTextRendering = $True
	$buttonServices.UseVisualStyleBackColor = $False
	$buttonServices.add_Click($buttonServices_Click)
	#
	# buttonProcesses
	#
	$buttonProcesses.BackColor = 'AliceBlue'
	$buttonProcesses.Enabled = $False
	$buttonProcesses.FlatStyle = 'Popup'
	#region Binary Data
	$buttonProcesses.Image = [System.Convert]::FromBase64String('
R0lGODlhEAAQAIU9AP///yg0P9HZ4VNeae7x9oOQnKSor1NgaUxWYXeDkN7f3/T3+N3l7bS+yNfg
6HR+ieLn66mwtquxt3N9h3iDjtHZ4+Dn7ZujrKissL7FzNLb5XB7h5Ccqf39/KCnri45RLrE0e/v
7ri8v9PY37/GzS87Rp2su3eDjmx5hEJNV2Ztd+Pn64iVoba8wd3j6MXN1oCNmdzh5GNsdigzPnJ9
idPV2LnCydrd4lBdZ0VPWZagqYOPmU1WYP///wAAAAAAACH/C05FVFNDQVBFMi4wAwEBAAAh+QQB
AAA9ACwAAAAAEAAQAAAI0gB7CBzIokABFgMTCjTYAwYAADB6MEy4IwOBBAksWMBIIIOOgThIEFiw
AECHDgBIEiBxQOABAiZGhIBQoQKEECNMEGjpUoECECc+fDgBwidPCjRQ1LDBIcdDHhxs1EBBg8KG
hyJeDHj4cMALEQ83PHDgAIOLrVwHuMBA9kGJGQgMtDCAdoBcAwhmlBCIQMCFGHTtxrggAMHAAAJW
CPBwQ4KEGx4SCwggMEAEAQ0wM2CQOXMEypUnCEghY7OMFAImgD5MWYUGDSp6BFitUPZs2gIDAgA7')
	#endregion
	$buttonProcesses.ImageAlign = 'MiddleLeft'
	$buttonProcesses.Location = '21, 20'
	$buttonProcesses.Name = 'buttonProcesses'
	$buttonProcesses.Size = '158, 23'
	$buttonProcesses.TabIndex = 3
	$buttonProcesses.Text = 'Processes'
	$buttonProcesses.UseCompatibleTextRendering = $True
	$buttonProcesses.UseVisualStyleBackColor = $False
	$buttonProcesses.add_Click($buttonProcesses_Click)
	#
	# labelSMBShares
	#
	$labelSMBShares.Anchor = 'Top, Right'
	$labelSMBShares.Font = 'Courier New, 8.25pt, style=Bold'
	$labelSMBShares.Location = '883, 482'
	$labelSMBShares.Name = 'labelSMBShares'
	$labelSMBShares.Size = '208, 16'
	$labelSMBShares.TabIndex = 153
	$labelSMBShares.Text = 'SMB Shares'
	$labelSMBShares.UseCompatibleTextRendering = $True
	#
	# datagridview17
	#
	$datagridview17.AllowUserToAddRows = $False
	$datagridview17.AllowUserToDeleteRows = $False
	$datagridview17.AllowUserToOrderColumns = $True
	$datagridview17.AllowUserToResizeRows = $False
	$System_Windows_Forms_DataGridViewCellStyle_1 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_1.BackColor = 'MintCream'
	$datagridview17.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview17.Anchor = 'Top, Bottom, Right'
	$datagridview17.AutoSizeColumnsMode = 'Fill'
	$datagridview17.BackgroundColor = 'GradientInactiveCaption'
	$datagridview17.BorderStyle = 'Fixed3D'
	$datagridview17.ColumnHeadersHeightSizeMode = 'AutoSize'
	$System_Windows_Forms_DataGridViewCellStyle_2 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_2.Alignment = 'MiddleLeft'
	$System_Windows_Forms_DataGridViewCellStyle_2.BackColor = 'Linen'
	$System_Windows_Forms_DataGridViewCellStyle_2.Font = 'Microsoft Sans Serif, 8.25pt'
	$System_Windows_Forms_DataGridViewCellStyle_2.ForeColor = 'ControlText'
	$System_Windows_Forms_DataGridViewCellStyle_2.SelectionBackColor = 'Highlight'
	$System_Windows_Forms_DataGridViewCellStyle_2.SelectionForeColor = 'HighlightText'
	$System_Windows_Forms_DataGridViewCellStyle_2.WrapMode = 'False'
	$datagridview17.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview17.Location = '883, 501'
	$datagridview17.Name = 'datagridview17'
	$datagridview17.ReadOnly = $True
	$datagridview17.RowHeadersVisible = $False
	$datagridview17.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview17.ScrollBars = 'Vertical'
	$datagridview17.SelectionMode = 'FullRowSelect'
	$datagridview17.ShowCellErrors = $False
	$datagridview17.ShowCellToolTips = $False
	$datagridview17.ShowEditingIcon = $False
	$datagridview17.ShowRowErrors = $False
	$datagridview17.Size = '576, 159'
	$datagridview17.TabIndex = 152
	$datagridview17.TabStop = $False
	#
	# labelPowerShellNETVersion
	#
	$labelPowerShellNETVersion.Anchor = 'Top, Right'
	$labelPowerShellNETVersion.Font = 'Courier New, 8.25pt, style=Bold'
	$labelPowerShellNETVersion.Location = '883, 302'
	$labelPowerShellNETVersion.Name = 'labelPowerShellNETVersion'
	$labelPowerShellNETVersion.Size = '208, 16'
	$labelPowerShellNETVersion.TabIndex = 151
	$labelPowerShellNETVersion.Text = 'PowerShell/.NET Versions'
	$labelPowerShellNETVersion.UseCompatibleTextRendering = $True
	#
	# datagridview15
	#
	$datagridview15.AllowUserToAddRows = $False
	$datagridview15.AllowUserToDeleteRows = $False
	$datagridview15.AllowUserToOrderColumns = $True
	$datagridview15.AllowUserToResizeRows = $False
	$datagridview15.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview15.Anchor = 'Top, Right'
	$datagridview15.AutoSizeColumnsMode = 'Fill'
	$datagridview15.BackgroundColor = 'GradientInactiveCaption'
	$datagridview15.BorderStyle = 'Fixed3D'
	$datagridview15.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview15.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview15.Location = '883, 321'
	$datagridview15.Name = 'datagridview15'
	$datagridview15.ReadOnly = $True
	$datagridview15.RowHeadersVisible = $False
	$datagridview15.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview15.ScrollBars = 'Vertical'
	$datagridview15.SelectionMode = 'FullRowSelect'
	$datagridview15.ShowCellErrors = $False
	$datagridview15.ShowCellToolTips = $False
	$datagridview15.ShowEditingIcon = $False
	$datagridview15.ShowRowErrors = $False
	$datagridview15.Size = '391, 149'
	$datagridview15.TabIndex = 150
	$datagridview15.TabStop = $False
	#
	# labelLocalAdminMembers
	#
	$labelLocalAdminMembers.Anchor = 'Top, Right'
	$labelLocalAdminMembers.Font = 'Courier New, 8.25pt, style=Bold'
	$labelLocalAdminMembers.Location = '1284, 302'
	$labelLocalAdminMembers.Name = 'labelLocalAdminMembers'
	$labelLocalAdminMembers.Size = '154, 16'
	$labelLocalAdminMembers.TabIndex = 149
	$labelLocalAdminMembers.Text = 'Local Admin Members'
	$labelLocalAdminMembers.UseCompatibleTextRendering = $True
	#
	# datagridview13
	#
	$datagridview13.AllowUserToAddRows = $False
	$datagridview13.AllowUserToDeleteRows = $False
	$datagridview13.AllowUserToOrderColumns = $True
	$datagridview13.AllowUserToResizeRows = $False
	$datagridview13.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview13.Anchor = 'Top, Right'
	$datagridview13.AutoSizeColumnsMode = 'Fill'
	$datagridview13.BackgroundColor = 'GradientInactiveCaption'
	$datagridview13.BorderStyle = 'Fixed3D'
	$datagridview13.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview13.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview13.Location = '1284, 321'
	$datagridview13.Name = 'datagridview13'
	$datagridview13.ReadOnly = $True
	$datagridview13.RowHeadersVisible = $False
	$datagridview13.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview13.ScrollBars = 'Vertical'
	$datagridview13.SelectionMode = 'FullRowSelect'
	$datagridview13.ShowCellErrors = $False
	$datagridview13.ShowCellToolTips = $False
	$datagridview13.ShowEditingIcon = $False
	$datagridview13.ShowRowErrors = $False
	$datagridview13.Size = '175, 149'
	$datagridview13.TabIndex = 148
	$datagridview13.TabStop = $False
	#
	# labelEnterComputerName
	#
	$labelEnterComputerName.AutoSize = $True
	$labelEnterComputerName.Font = 'Courier New, 8.25pt, style=Bold'
	$labelEnterComputerName.Location = '11, 90'
	$labelEnterComputerName.Margin = '0, 0, 0, 0'
	$labelEnterComputerName.Name = 'labelEnterComputerName'
	$labelEnterComputerName.Size = '133, 17'
	$labelEnterComputerName.TabIndex = 140
	$labelEnterComputerName.Text = 'Enter Computer Name'
	$labelEnterComputerName.UseCompatibleTextRendering = $True
	#
	# IR_Computers
	#
	$IR_Computers.AcceptsReturn = $True
	$IR_Computers.Anchor = 'Top, Bottom, Left'
	$IR_Computers.BackColor = '252, 253, 254'
	$IR_Computers.Location = '11, 109'
	$IR_Computers.Name = 'IR_Computers'
	$IR_Computers.ScrollBars = 'Vertical'
	$IR_Computers.Size = '252, 20'
	$IR_Computers.TabIndex = 139
	$IR_Computers.add_TextChanged($IR_Computers_TextChanged)
	#
	# labelCollectionStatus
	#
	$labelCollectionStatus.Anchor = 'Top, Right'
	$labelCollectionStatus.Font = 'Courier New, 8.25pt, style=Bold'
	$labelCollectionStatus.Location = '883, 23'
	$labelCollectionStatus.Name = 'labelCollectionStatus'
	$labelCollectionStatus.Size = '154, 16'
	$labelCollectionStatus.TabIndex = 138
	$labelCollectionStatus.Text = 'Collection Status'
	$labelCollectionStatus.UseCompatibleTextRendering = $True
	#
	# datagridview2
	#
	$datagridview2.AllowUserToAddRows = $False
	$datagridview2.AllowUserToDeleteRows = $False
	$datagridview2.AllowUserToOrderColumns = $True
	$datagridview2.AllowUserToResizeRows = $False
	$datagridview2.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview2.Anchor = 'Top, Right'
	$datagridview2.AutoSizeColumnsMode = 'Fill'
	$datagridview2.BackgroundColor = 'GradientInactiveCaption'
	$datagridview2.BorderStyle = 'Fixed3D'
	$datagridview2.ColumnHeadersHeightSizeMode = 'AutoSize'
	[void]$datagridview2.Columns.Add($Column1)
	[void]$datagridview2.Columns.Add($Column3)
	[void]$datagridview2.Columns.Add($Column2)
	$datagridview2.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview2.Location = '883, 42'
	$datagridview2.Name = 'datagridview2'
	$datagridview2.ReadOnly = $True
	$datagridview2.RowHeadersVisible = $False
	$datagridview2.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview2.ScrollBars = 'Vertical'
	$datagridview2.SelectionMode = 'FullRowSelect'
	$datagridview2.ShowCellErrors = $False
	$datagridview2.ShowCellToolTips = $False
	$datagridview2.ShowEditingIcon = $False
	$datagridview2.ShowRowErrors = $False
	$datagridview2.Size = '576, 251'
	$datagridview2.TabIndex = 137
	$datagridview2.TabStop = $False
	#
	# buttonHistoricalLogs
	#
	$buttonHistoricalLogs.Anchor = 'Top, Right'
	$buttonHistoricalLogs.BackColor = 'Tan'
	$buttonHistoricalLogs.FlatStyle = 'Popup'
	#region Binary Data
	$buttonHistoricalLogs.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFvSURBVDhPlZItT4JhFIb5STaj2cYcgeAo
mDBIkvQ2LARH4Q1ssrEZ/B8Gg8VgMbjhHN/fkNnxuW45D4zgh9sFh/Pc97UTzJhZpt1upwH7BTJk
I3T10Wq1bLPZ/AiZQEp+29kJms2mQoPBwPr9vuj1etbtdgVv4/HYyAUkCd87QaPRUGg4HEpyKOIN
ERKygTSwE9TrdYVGo5EkhyLeOp1OlJAP6BIJarVaPLP88ClchoS3Q+hEQbVa1XIymdjl/YdAhmRf
tH8RnShIkkTL6XRqF3fvAhkSF/keGVk6UVCpVLScz+d2nr4JZEhc5HtkZOlEQblc1nKxWNjZ7auY
zWZxRuYzMrJ0oqBUKmm5XC7t9OZFcI3PyHzmIrJ0oqBYLGq5Wq3sJHkWXOMzMp+5hiydKCgUClFw
fP0kuMZnZD5zDVk6UZDP57Vcr9d2dPUokPmMzGeuIUsnCnK5HD/08Bf423a+BdlsNg3YPwn/ypb5
Apo9JKab+NIRAAAAAElFTkSuQmCC')
	#endregion
	$buttonHistoricalLogs.ImageAlign = 'MiddleLeft'
	$buttonHistoricalLogs.Location = '1330, 13'
	$buttonHistoricalLogs.Name = 'buttonHistoricalLogs'
	$buttonHistoricalLogs.Size = '129, 23'
	$buttonHistoricalLogs.TabIndex = 136
	$buttonHistoricalLogs.Text = 'Historical Logs'
	$buttonHistoricalLogs.UseCompatibleTextRendering = $True
	$buttonHistoricalLogs.UseVisualStyleBackColor = $False
	$buttonHistoricalLogs.add_Click($buttonHistoricalLogs_Click)
	#
	# buttonOpenReportsFolder
	#
	$buttonOpenReportsFolder.Anchor = 'Top, Right'
	$buttonOpenReportsFolder.BackColor = 'Gold'
	$buttonOpenReportsFolder.FlatStyle = 'Popup'
	#region Binary Data
	$buttonOpenReportsFolder.Image = [System.Convert]::FromBase64String('
R0lGODlhEAAQAIcAAAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8AAAMzMAADMAMwAzMxYW
FhwcHCIiIikpKVVVVU1NTUJCQjk5Of98gP9QUNYAk8zs/+/Wxufn1q2pkDP/AGYAAJkAAMwAAAAz
ADMzAGYzAJkzAMwzAP8zAABmADNmAGZmAJlmAMxmAP9mAACZADOZAGaZAJmZAMyZAP+ZAADMADPM
AGbMAJnMAMzMAP/MAGb/AJn/AMz/AAD/MzMA/2YAM5kAM8wAM/8AMwAz/zMzM2YzM5kzM8wzM/8z
MwBmMzNmM2ZmM5lmM8xmM/9mMwCZMzOZM2aZM5mZM8yZM/+ZMwDMMzPMM2bMM5nMM8zMM//MMzP/
M2b/M5n/M8z/M///MwAAZjMAZmYAZpkAZswAZv8AZgAzZjMzZmYzZpkzZswzZv8zZgBmZjNmZmZm
ZplmZsxmZgCZZjOZZmaZZpmZZsyZZv+ZZgDMZjPMZpnMZszMZv/MZgD/ZjP/Zpn/Zsz/Zv8AzMwA
/wCZmZkzmZkAmcwAmQAAmTMzmWYAmcwzmf8AmQBmmTNmmWYzmZlmmcxmmf8zmTOZmWaZmZmZmcyZ
mf+ZmQDMmTPMmWbMZpnMmczMmf/MmQD/mTP/mWbMmZn/mcz/mf//mQAAzDMAmWYAzJkAzMwAzAAz
mTMzzGYzzJkzzMwzzP8zzABmzDNmzGZmmZlmzMxmzP9mmQCZzDOZzGaZzJmZzMyZzP+ZzADMzDPM
zGbMzJnMzMzMzP/MzAD/zDP/zGb/mZn/zMz/zP//zDMAzGYA/5kA/wAzzDMz/2Yz/5kz/8wz//8z
/wBm/zNm/2ZmzJlm/8xm//9mzACZ/zOZ/2aZ/5mZ/8yZ//+Z/wDM/zPM/2bM/5nM/8zM///M/zP/
/2b/zJn//8z///9mZmb/Zv//ZmZm//9m/2b//6UAIV9fX3d3d4aGhpaWlsvLy7KystfX193d3ePj
4+rq6vHx8fj4+P/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH/C05FVFNDQVBFMi4wAwEB
AAAh+QQAAAAAACwAAAAAEAAQAAAIeAD/CRxIsKBAWgYTHlSYECGthwXfSByIMEOGWQUpUXpD8Z9F
jHo4cPinkePCBAla/StXbmTJjihVshw5aZLJfw5pyWz5r+bNnDvp9JyEpuOsWer+6dEjVGLRhUeT
Lm365inOf1H/0dn6D43XjgwLthpLtmzZsAkDAgA7')
	#endregion
	$buttonOpenReportsFolder.ImageAlign = 'MiddleLeft'
	$buttonOpenReportsFolder.Location = '1172, 13'
	$buttonOpenReportsFolder.Name = 'buttonOpenReportsFolder'
	$buttonOpenReportsFolder.Size = '152, 23'
	$buttonOpenReportsFolder.TabIndex = 135
	$buttonOpenReportsFolder.Text = 'Open Reports Folder'
	$buttonOpenReportsFolder.UseCompatibleTextRendering = $True
	$buttonOpenReportsFolder.UseVisualStyleBackColor = $False
	$buttonOpenReportsFolder.add_Click($buttonOpenReportsFolder_Click)
	#
	# progressbar_audit
	#
	$progressbar_audit.Location = '11, 55'
	$progressbar_audit.Name = 'progressbar_audit'
	$progressbar_audit.Size = '254, 23'
	$progressbar_audit.TabIndex = 134
	#
	# richtextbox1
	#
	$richtextbox1.Anchor = 'Top, Bottom, Left'
	$richtextbox1.BackColor = 'ButtonHighlight'
	$richtextbox1.BorderStyle = 'None'
	$richtextbox1.Location = '11, 144'
	$richtextbox1.Name = 'richtextbox1'
	$richtextbox1.ReadOnly = $True
	$richtextbox1.ScrollBars = 'None'
	$richtextbox1.Size = '254, 259'
	$richtextbox1.TabIndex = 133
	$richtextbox1.TabStop = $False
	$richtextbox1.Text = 'SIRDA provides the ability to quickly respond to security incidents, in which data needs to be gathered, analysed, and preserved from any Windows workstation or server.

SIRDA contains dozens of data mining collectors and advanced data acquisition algorithms to gather data needed during a suspected cyber security incident. Taking advantage of PowerShell and Windows Remote Management, while using non-delegated Kerberos network logins therefore never exposing credentials during collections.

To ensure that data is collected following standard cyber incident response guidelines, the advanced data mining collectors gather data in a specifically designed order of "volatility", such as memory contents, network conections, then to less volatile contents such as disk files.'
	#
	# labelArchitecture
	#
	$labelArchitecture.Font = 'Courier New, 8.25pt, style=Bold'
	$labelArchitecture.ForeColor = 'Black'
	$labelArchitecture.Location = '11, 256'
	$labelArchitecture.Name = 'labelArchitecture'
	$labelArchitecture.Size = '98, 18'
	$labelArchitecture.TabIndex = 132
	$labelArchitecture.Text = 'Architecture:'
	$labelArchitecture.UseCompatibleTextRendering = $True
	#
	# textbox11
	#
	$textbox11.BackColor = 'ButtonHighlight'
	$textbox11.BorderStyle = 'None'
	$textbox11.Cursor = 'Arrow'
	$textbox11.ForeColor = 'Black'
	$textbox11.Location = '115, 258'
	$textbox11.Name = 'textbox11'
	$textbox11.ReadOnly = $True
	$textbox11.Size = '150, 13'
	$textbox11.TabIndex = 131
	$textbox11.TabStop = $False
	#
	# textbox10
	#
	$textbox10.BackColor = 'ButtonHighlight'
	$textbox10.BorderStyle = 'None'
	$textbox10.Cursor = 'Arrow'
	$textbox10.ForeColor = 'Black'
	$textbox10.Location = '115, 239'
	$textbox10.Name = 'textbox10'
	$textbox10.ReadOnly = $True
	$textbox10.Size = '150, 13'
	$textbox10.TabIndex = 130
	$textbox10.TabStop = $False
	#
	# labelWindowsOS
	#
	$labelWindowsOS.Font = 'Courier New, 8.25pt, style=Bold'
	$labelWindowsOS.ForeColor = 'Black'
	$labelWindowsOS.Location = '11, 238'
	$labelWindowsOS.Name = 'labelWindowsOS'
	$labelWindowsOS.Size = '94, 18'
	$labelWindowsOS.TabIndex = 129
	$labelWindowsOS.Text = 'Windows OS:'
	$labelWindowsOS.UseCompatibleTextRendering = $True
	#
	# textbox7
	#
	$textbox7.BackColor = 'ButtonHighlight'
	$textbox7.BorderStyle = 'None'
	$textbox7.Cursor = 'Arrow'
	$textbox7.ForeColor = 'Black'
	$textbox7.Location = '115, 220'
	$textbox7.Name = 'textbox7'
	$textbox7.ReadOnly = $True
	$textbox7.Size = '150, 13'
	$textbox7.TabIndex = 128
	$textbox7.TabStop = $False
	#
	# textbox6
	#
	$textbox6.BackColor = 'ButtonHighlight'
	$textbox6.BorderStyle = 'None'
	$textbox6.Cursor = 'Arrow'
	$textbox6.ForeColor = 'Black'
	$textbox6.Location = '115, 201'
	$textbox6.Name = 'textbox6'
	$textbox6.ReadOnly = $True
	$textbox6.Size = '150, 13'
	$textbox6.TabIndex = 127
	$textbox6.TabStop = $False
	#
	# textbox5
	#
	$textbox5.BackColor = 'ButtonHighlight'
	$textbox5.BorderStyle = 'None'
	$textbox5.Cursor = 'Arrow'
	$textbox5.ForeColor = 'Black'
	$textbox5.Location = '115, 182'
	$textbox5.Name = 'textbox5'
	$textbox5.ReadOnly = $True
	$textbox5.Size = '150, 13'
	$textbox5.TabIndex = 126
	$textbox5.TabStop = $False
	#
	# labelDHCPServer
	#
	$labelDHCPServer.Font = 'Courier New, 8.25pt, style=Bold'
	$labelDHCPServer.ForeColor = 'Black'
	$labelDHCPServer.Location = '11, 218'
	$labelDHCPServer.Name = 'labelDHCPServer'
	$labelDHCPServer.Size = '98, 18'
	$labelDHCPServer.TabIndex = 125
	$labelDHCPServer.Text = 'DHCP Server:'
	$labelDHCPServer.UseCompatibleTextRendering = $True
	#
	# labelSecDNS
	#
	$labelSecDNS.Font = 'Courier New, 8.25pt, style=Bold'
	$labelSecDNS.ForeColor = 'Black'
	$labelSecDNS.Location = '11, 198'
	$labelSecDNS.Name = 'labelSecDNS'
	$labelSecDNS.Size = '100, 18'
	$labelSecDNS.TabIndex = 124
	$labelSecDNS.Text = 'Sec DNS:'
	$labelSecDNS.UseCompatibleTextRendering = $True
	#
	# labelPrimaryDNS
	#
	$labelPrimaryDNS.Font = 'Courier New, 8.25pt, style=Bold'
	$labelPrimaryDNS.ForeColor = 'Black'
	$labelPrimaryDNS.Location = '11, 180'
	$labelPrimaryDNS.Name = 'labelPrimaryDNS'
	$labelPrimaryDNS.Size = '98, 18'
	$labelPrimaryDNS.TabIndex = 123
	$labelPrimaryDNS.Text = 'Primary DNS:'
	$labelPrimaryDNS.UseCompatibleTextRendering = $True
	#
	# textbox4
	#
	$textbox4.BackColor = 'ButtonHighlight'
	$textbox4.BorderStyle = 'None'
	$textbox4.Cursor = 'Arrow'
	$textbox4.ForeColor = 'Black'
	$textbox4.Location = '115, 163'
	$textbox4.Name = 'textbox4'
	$textbox4.ReadOnly = $True
	$textbox4.Size = '150, 13'
	$textbox4.TabIndex = 121
	$textbox4.TabStop = $False
	#
	# textbox3
	#
	$textbox3.BackColor = 'ButtonHighlight'
	$textbox3.BorderStyle = 'None'
	$textbox3.Cursor = 'Arrow'
	$textbox3.ForeColor = 'Black'
	$textbox3.Location = '115, 144'
	$textbox3.Name = 'textbox3'
	$textbox3.ReadOnly = $True
	$textbox3.Size = '150, 13'
	$textbox3.TabIndex = 122
	$textbox3.TabStop = $False
	#
	# labelMACAddress
	#
	$labelMACAddress.Font = 'Courier New, 8.25pt, style=Bold'
	$labelMACAddress.ForeColor = 'Black'
	$labelMACAddress.Location = '11, 162'
	$labelMACAddress.Name = 'labelMACAddress'
	$labelMACAddress.Size = '94, 20'
	$labelMACAddress.TabIndex = 120
	$labelMACAddress.Text = 'MAC Address:'
	$labelMACAddress.UseCompatibleTextRendering = $True
	#
	# labelIPAddress
	#
	$labelIPAddress.Font = 'Courier New, 8.25pt, style=Bold'
	$labelIPAddress.ForeColor = 'Black'
	$labelIPAddress.Location = '11, 143'
	$labelIPAddress.Name = 'labelIPAddress'
	$labelIPAddress.Size = '94, 17'
	$labelIPAddress.TabIndex = 119
	$labelIPAddress.Text = 'IP Address:'
	$labelIPAddress.UseCompatibleTextRendering = $True
	#
	# buttonExecuteIncidentRespo
	#
	$buttonExecuteIncidentRespo.BackColor = 'WhiteSmoke'
	$buttonExecuteIncidentRespo.Enabled = $False
	$buttonExecuteIncidentRespo.FlatAppearance.MouseDownBackColor = '128, 255, 128'
	$buttonExecuteIncidentRespo.FlatAppearance.MouseOverBackColor = '192, 255, 192'
	$buttonExecuteIncidentRespo.FlatStyle = 'Flat'
	#region Binary Data
	$buttonExecuteIncidentRespo.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAE5SURBVDhPY/j//z9FGKsgMv7867MCNnEY
xiqIjP0O+v1/9+OdIzY5EMYqiIwddun99z9m8//Rl0fHscljCKBjl/V6/zf+LwEbcuX9FaAQqjyc
oTNL7j9IMTqO2Ov4f/mvqv8L/qf/Dzlr9f/A6wNA5TgM2PK15/+MV1n/578rBuPlX+rAeNqn9P89
n8PBhkRctf6/6tkqoBY0A3SnyP+f+Dzxf8VdJzCue+Tyv/GZNxi3vQsEY5ghIO/MvDcDbAiKAa0P
A+EGVD9w+1/32BPFEJABnffD/nuv0cNuAMhWbJphBjRc9f/vuFzz//pn68GaUQzQ6pT9r94njoHN
5yqANdeecftvvVjz/+FXh+GaQRjOQMewFAgKXJjmK/iiERc2XKj432GpAfkJyWyhGWVJmRDGKkg8
/s8AAGL02BPRGOM3AAAAAElFTkSuQmCC')
	#endregion
	$buttonExecuteIncidentRespo.ImageAlign = 'MiddleLeft'
	$buttonExecuteIncidentRespo.Location = '11, 27'
	$buttonExecuteIncidentRespo.Name = 'buttonExecuteIncidentRespo'
	$buttonExecuteIncidentRespo.Size = '186, 22'
	$buttonExecuteIncidentRespo.TabIndex = 118
	$buttonExecuteIncidentRespo.Text = 'Execute Incident Response'
	$buttonExecuteIncidentRespo.UseCompatibleTextRendering = $True
	$buttonExecuteIncidentRespo.UseVisualStyleBackColor = $False
	$buttonExecuteIncidentRespo.add_Click($buttonExecuteIncidentRespo_Click)
	#
	# sirda_status
	#
	$sirda_status.Anchor = 'Top, Bottom, Left, Right'
	$sirda_status.BackColor = 'Gainsboro'
	$sirda_status.BorderStyle = 'FixedSingle'
	$sirda_status.Cursor = 'Arrow'
	$sirda_status.DetectUrls = $False
	$sirda_status.Location = '276, 42'
	$sirda_status.Margin = '10, 10, 10, 10'
	$sirda_status.Name = 'sirda_status'
	$sirda_status.ReadOnly = $True
	$sirda_status.ScrollBars = 'ForcedVertical'
	$sirda_status.Size = '372, 618'
	$sirda_status.TabIndex = 117
	$sirda_status.TabStop = $False
	$sirda_status.Text = ''
	$sirda_status.add_TextChanged($sirda_status_TextChanged)
	#
	# labelCurrentUser
	#
	$labelCurrentUser.Font = 'Courier New, 8.25pt, style=Bold'
	$labelCurrentUser.ForeColor = 'Black'
	$labelCurrentUser.Location = '11, 275'
	$labelCurrentUser.Name = 'labelCurrentUser'
	$labelCurrentUser.Size = '98, 18'
	$labelCurrentUser.TabIndex = 145
	$labelCurrentUser.Text = 'Current User:'
	$labelCurrentUser.UseCompatibleTextRendering = $True
	#
	# textbox1
	#
	$textbox1.BackColor = 'ButtonHighlight'
	$textbox1.BorderStyle = 'None'
	$textbox1.Cursor = 'Arrow'
	$textbox1.ForeColor = 'Black'
	$textbox1.Location = '115, 277'
	$textbox1.Name = 'textbox1'
	$textbox1.ReadOnly = $True
	$textbox1.Size = '150, 13'
	$textbox1.TabIndex = 144
	$textbox1.TabStop = $False
	#
	# labelLogonTime
	#
	$labelLogonTime.Font = 'Courier New, 8.25pt, style=Bold'
	$labelLogonTime.ForeColor = 'Black'
	$labelLogonTime.Location = '11, 293'
	$labelLogonTime.Name = 'labelLogonTime'
	$labelLogonTime.Size = '98, 18'
	$labelLogonTime.TabIndex = 147
	$labelLogonTime.Text = 'Logon Time:'
	$labelLogonTime.UseCompatibleTextRendering = $True
	#
	# textbox12
	#
	$textbox12.BackColor = 'ButtonHighlight'
	$textbox12.BorderStyle = 'None'
	$textbox12.Cursor = 'Arrow'
	$textbox12.ForeColor = 'Black'
	$textbox12.Location = '113, 296'
	$textbox12.Name = 'textbox12'
	$textbox12.ReadOnly = $True
	$textbox12.Size = '150, 13'
	$textbox12.TabIndex = 146
	$textbox12.TabStop = $False
	#
	# tabpage9
	#
	$tabpage9.Controls.Add($labelDisplaysNetworkInter)
	$tabpage9.Controls.Add($datagridview8)
	$tabpage9.Location = '4, 22'
	$tabpage9.Name = 'tabpage9'
	$tabpage9.Size = '1477, 667'
	$tabpage9.TabIndex = 8
	$tabpage9.Text = 'Network Interfaces'
	$tabpage9.UseVisualStyleBackColor = $True
	#
	# labelDisplaysNetworkInter
	#
	$labelDisplaysNetworkInter.AutoSize = $True
	$labelDisplaysNetworkInter.Location = '9, 12'
	$labelDisplaysNetworkInter.Name = 'labelDisplaysNetworkInter'
	$labelDisplaysNetworkInter.Size = '201, 17'
	$labelDisplaysNetworkInter.TabIndex = 153
	$labelDisplaysNetworkInter.Text = 'Displays Network Interface information.'
	$labelDisplaysNetworkInter.UseCompatibleTextRendering = $True
	#
	# datagridview8
	#
	$datagridview8.AllowUserToAddRows = $False
	$datagridview8.AllowUserToDeleteRows = $False
	$datagridview8.AllowUserToOrderColumns = $True
	$datagridview8.AllowUserToResizeRows = $False
	$datagridview8.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview8.Anchor = 'Top, Bottom, Left, Right'
	$datagridview8.AutoSizeColumnsMode = 'Fill'
	$datagridview8.BackgroundColor = 'GradientInactiveCaption'
	$datagridview8.BorderStyle = 'Fixed3D'
	$datagridview8.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview8.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview8.Location = '8, 33'
	$datagridview8.Name = 'datagridview8'
	$datagridview8.ReadOnly = $True
	$datagridview8.RowHeadersVisible = $False
	$datagridview8.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview8.ScrollBars = 'Vertical'
	$datagridview8.SelectionMode = 'FullRowSelect'
	$datagridview8.ShowCellErrors = $False
	$datagridview8.ShowCellToolTips = $False
	$datagridview8.ShowEditingIcon = $False
	$datagridview8.ShowRowErrors = $False
	$datagridview8.Size = '1451, 627'
	$datagridview8.TabIndex = 143
	$datagridview8.TabStop = $False
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($labelNetstatProvidesInfor)
	$tabpage2.Controls.Add($datagridview1)
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = 'tabpage2'
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '1477, 667'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = 'NetStat'
	$tabpage2.UseVisualStyleBackColor = $True
	#
	# labelNetstatProvidesInfor
	#
	$labelNetstatProvidesInfor.AutoSize = $True
	$labelNetstatProvidesInfor.Location = '8, 13'
	$labelNetstatProvidesInfor.Name = 'labelNetstatProvidesInfor'
	$labelNetstatProvidesInfor.Size = '536, 17'
	$labelNetstatProvidesInfor.TabIndex = 152
	$labelNetstatProvidesInfor.Text = 'Netstat provides information and statistics about protocols in use and current TCP/IP network connections.'
	$labelNetstatProvidesInfor.UseCompatibleTextRendering = $True
	#
	# datagridview1
	#
	$datagridview1.AllowUserToAddRows = $False
	$datagridview1.AllowUserToDeleteRows = $False
	$datagridview1.AllowUserToOrderColumns = $True
	$datagridview1.AllowUserToResizeRows = $False
	$datagridview1.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview1.Anchor = 'Top, Bottom, Left, Right'
	$datagridview1.AutoSizeColumnsMode = 'Fill'
	$datagridview1.BackgroundColor = 'GradientInactiveCaption'
	$datagridview1.BorderStyle = 'Fixed3D'
	$datagridview1.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview1.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview1.Location = '8, 33'
	$datagridview1.Name = 'datagridview1'
	$datagridview1.ReadOnly = $True
	$datagridview1.RowHeadersVisible = $False
	$datagridview1.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview1.ScrollBars = 'Vertical'
	$datagridview1.SelectionMode = 'FullRowSelect'
	$datagridview1.ShowCellErrors = $False
	$datagridview1.ShowCellToolTips = $False
	$datagridview1.ShowEditingIcon = $False
	$datagridview1.ShowRowErrors = $False
	$datagridview1.Size = '1451, 627'
	$datagridview1.TabIndex = 138
	$datagridview1.TabStop = $False
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($labelPrefetchFilesContain)
	$tabpage3.Controls.Add($datagridview3)
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = 'tabpage3'
	$tabpage3.Size = '1477, 667'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = 'PreFetch'
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# labelPrefetchFilesContain
	#
	$labelPrefetchFilesContain.AutoSize = $True
	$labelPrefetchFilesContain.Location = '8, 14'
	$labelPrefetchFilesContain.Name = 'labelPrefetchFilesContain'
	$labelPrefetchFilesContain.Size = '1087, 17'
	$labelPrefetchFilesContain.TabIndex = 152
	$labelPrefetchFilesContain.Text = 'Prefetch files contain the name of the executable, a Unicode list of DLLs used by that executable, a count of how many times the executable has been run, and a timestamp indicating the last time the program was run.'
	$labelPrefetchFilesContain.UseCompatibleTextRendering = $True
	#
	# datagridview3
	#
	$datagridview3.AllowUserToAddRows = $False
	$datagridview3.AllowUserToDeleteRows = $False
	$datagridview3.AllowUserToOrderColumns = $True
	$datagridview3.AllowUserToResizeRows = $False
	$datagridview3.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview3.Anchor = 'Top, Bottom, Left, Right'
	$datagridview3.AutoSizeColumnsMode = 'Fill'
	$datagridview3.BackgroundColor = 'GradientInactiveCaption'
	$datagridview3.BorderStyle = 'Fixed3D'
	$datagridview3.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview3.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview3.Location = '8, 33'
	$datagridview3.Name = 'datagridview3'
	$datagridview3.ReadOnly = $True
	$datagridview3.RowHeadersVisible = $False
	$datagridview3.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview3.ScrollBars = 'Vertical'
	$datagridview3.SelectionMode = 'FullRowSelect'
	$datagridview3.ShowCellErrors = $False
	$datagridview3.ShowCellToolTips = $False
	$datagridview3.ShowEditingIcon = $False
	$datagridview3.ShowRowErrors = $False
	$datagridview3.Size = '1451, 627'
	$datagridview3.TabIndex = 139
	$datagridview3.TabStop = $False
	#
	# tabpage4
	#
	$tabpage4.Controls.Add($labelAddressResolutionPro)
	$tabpage4.Controls.Add($datagridview4)
	$tabpage4.Location = '4, 22'
	$tabpage4.Name = 'tabpage4'
	$tabpage4.Size = '1477, 667'
	$tabpage4.TabIndex = 3
	$tabpage4.Text = 'ARP'
	$tabpage4.UseVisualStyleBackColor = $True
	#
	# labelAddressResolutionPro
	#
	$labelAddressResolutionPro.AutoSize = $True
	$labelAddressResolutionPro.Location = '11, 12'
	$labelAddressResolutionPro.Name = 'labelAddressResolutionPro'
	$labelAddressResolutionPro.Size = '867, 17'
	$labelAddressResolutionPro.TabIndex = 151
	$labelAddressResolutionPro.Text = 'Address Resolution Protocol (ARP) is a protocol for mapping an Internet Protocol address (IP address) to a physical machine address that is recognized in the local network.'
	$labelAddressResolutionPro.UseCompatibleTextRendering = $True
	#
	# datagridview4
	#
	$datagridview4.AllowUserToAddRows = $False
	$datagridview4.AllowUserToDeleteRows = $False
	$datagridview4.AllowUserToOrderColumns = $True
	$datagridview4.AllowUserToResizeRows = $False
	$datagridview4.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview4.Anchor = 'Top, Bottom, Left, Right'
	$datagridview4.AutoSizeColumnsMode = 'Fill'
	$datagridview4.BackgroundColor = 'GradientInactiveCaption'
	$datagridview4.BorderStyle = 'Fixed3D'
	$datagridview4.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview4.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview4.Location = '8, 33'
	$datagridview4.Name = 'datagridview4'
	$datagridview4.ReadOnly = $True
	$datagridview4.RowHeadersVisible = $False
	$datagridview4.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview4.ScrollBars = 'Vertical'
	$datagridview4.SelectionMode = 'FullRowSelect'
	$datagridview4.ShowCellErrors = $False
	$datagridview4.ShowCellToolTips = $False
	$datagridview4.ShowEditingIcon = $False
	$datagridview4.ShowRowErrors = $False
	$datagridview4.Size = '1451, 627'
	$datagridview4.TabIndex = 140
	$datagridview4.TabStop = $False
	#
	# tabpage5
	#
	$tabpage5.Controls.Add($labelDisplaysCurrentlyRun)
	$tabpage5.Controls.Add($datagridview5)
	$tabpage5.Location = '4, 22'
	$tabpage5.Name = 'tabpage5'
	$tabpage5.Size = '1477, 667'
	$tabpage5.TabIndex = 4
	$tabpage5.Text = 'Processes'
	$tabpage5.UseVisualStyleBackColor = $True
	#
	# labelDisplaysCurrentlyRun
	#
	$labelDisplaysCurrentlyRun.AutoSize = $True
	$labelDisplaysCurrentlyRun.Location = '8, 13'
	$labelDisplaysCurrentlyRun.Name = 'labelDisplaysCurrentlyRun'
	$labelDisplaysCurrentlyRun.Size = '610, 17'
	$labelDisplaysCurrentlyRun.TabIndex = 152
	$labelDisplaysCurrentlyRun.Text = 'Displays currently running processes. You can also remotely kill a process by using the "Process" button on the main tab.'
	$labelDisplaysCurrentlyRun.UseCompatibleTextRendering = $True
	#
	# datagridview5
	#
	$datagridview5.AllowUserToAddRows = $False
	$datagridview5.AllowUserToDeleteRows = $False
	$datagridview5.AllowUserToOrderColumns = $True
	$datagridview5.AllowUserToResizeRows = $False
	$datagridview5.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview5.Anchor = 'Top, Bottom, Left, Right'
	$datagridview5.AutoSizeColumnsMode = 'Fill'
	$datagridview5.BackgroundColor = 'GradientInactiveCaption'
	$datagridview5.BorderStyle = 'Fixed3D'
	$datagridview5.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview5.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview5.Location = '8, 33'
	$datagridview5.Name = 'datagridview5'
	$datagridview5.ReadOnly = $True
	$datagridview5.RowHeadersVisible = $False
	$datagridview5.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview5.ScrollBars = 'Vertical'
	$datagridview5.SelectionMode = 'FullRowSelect'
	$datagridview5.ShowCellErrors = $False
	$datagridview5.ShowCellToolTips = $False
	$datagridview5.ShowEditingIcon = $False
	$datagridview5.ShowRowErrors = $False
	$datagridview5.Size = '1463, 627'
	$datagridview5.TabIndex = 141
	$datagridview5.TabStop = $False
	#
	# tabpage8
	#
	$tabpage8.Controls.Add($labelDisplaysMoreAdvanced)
	$tabpage8.Controls.Add($datagridview7)
	$tabpage8.Location = '4, 22'
	$tabpage8.Name = 'tabpage8'
	$tabpage8.Size = '1477, 667'
	$tabpage8.TabIndex = 7
	$tabpage8.Text = 'Processes-Advanced'
	$tabpage8.UseVisualStyleBackColor = $True
	#
	# labelDisplaysMoreAdvanced
	#
	$labelDisplaysMoreAdvanced.AutoSize = $True
	$labelDisplaysMoreAdvanced.Location = '8, 12'
	$labelDisplaysMoreAdvanced.Name = 'labelDisplaysMoreAdvanced'
	$labelDisplaysMoreAdvanced.Size = '233, 17'
	$labelDisplaysMoreAdvanced.TabIndex = 153
	$labelDisplaysMoreAdvanced.Text = 'Displays more advanced process information.'
	$labelDisplaysMoreAdvanced.UseCompatibleTextRendering = $True
	#
	# datagridview7
	#
	$datagridview7.AllowUserToAddRows = $False
	$datagridview7.AllowUserToDeleteRows = $False
	$datagridview7.AllowUserToOrderColumns = $True
	$datagridview7.AllowUserToResizeRows = $False
	$datagridview7.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview7.Anchor = 'Top, Bottom, Left, Right'
	$datagridview7.AutoSizeColumnsMode = 'Fill'
	$datagridview7.BackgroundColor = 'GradientInactiveCaption'
	$datagridview7.BorderStyle = 'Fixed3D'
	$datagridview7.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview7.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview7.Location = '8, 33'
	$datagridview7.Name = 'datagridview7'
	$datagridview7.ReadOnly = $True
	$datagridview7.RowHeadersVisible = $False
	$datagridview7.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview7.ScrollBars = 'Vertical'
	$datagridview7.SelectionMode = 'FullRowSelect'
	$datagridview7.ShowCellErrors = $False
	$datagridview7.ShowCellToolTips = $False
	$datagridview7.ShowEditingIcon = $False
	$datagridview7.ShowRowErrors = $False
	$datagridview7.Size = '1451, 627'
	$datagridview7.TabIndex = 143
	$datagridview7.TabStop = $False
	#
	# tabpage7
	#
	$tabpage7.Controls.Add($labelDisplaysTheCurrentTa)
	$tabpage7.Controls.Add($datagridview6)
	$tabpage7.Location = '4, 22'
	$tabpage7.Name = 'tabpage7'
	$tabpage7.Size = '1477, 667'
	$tabpage7.TabIndex = 6
	$tabpage7.Text = 'TaskList'
	$tabpage7.UseVisualStyleBackColor = $True
	#
	# labelDisplaysTheCurrentTa
	#
	$labelDisplaysTheCurrentTa.AutoSize = $True
	$labelDisplaysTheCurrentTa.Location = '9, 15'
	$labelDisplaysTheCurrentTa.Name = 'labelDisplaysTheCurrentTa'
	$labelDisplaysTheCurrentTa.Size = '148, 17'
	$labelDisplaysTheCurrentTa.TabIndex = 151
	$labelDisplaysTheCurrentTa.Text = 'Displays the current task list.'
	$labelDisplaysTheCurrentTa.UseCompatibleTextRendering = $True
	#
	# datagridview6
	#
	$datagridview6.AllowUserToAddRows = $False
	$datagridview6.AllowUserToDeleteRows = $False
	$datagridview6.AllowUserToOrderColumns = $True
	$datagridview6.AllowUserToResizeRows = $False
	$datagridview6.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview6.Anchor = 'Top, Bottom, Left, Right'
	$datagridview6.AutoSizeColumnsMode = 'Fill'
	$datagridview6.BackgroundColor = 'GradientInactiveCaption'
	$datagridview6.BorderStyle = 'Fixed3D'
	$datagridview6.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview6.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview6.Location = '8, 33'
	$datagridview6.Name = 'datagridview6'
	$datagridview6.ReadOnly = $True
	$datagridview6.RowHeadersVisible = $False
	$datagridview6.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview6.ScrollBars = 'Vertical'
	$datagridview6.SelectionMode = 'FullRowSelect'
	$datagridview6.ShowCellErrors = $False
	$datagridview6.ShowCellToolTips = $False
	$datagridview6.ShowEditingIcon = $False
	$datagridview6.ShowRowErrors = $False
	$datagridview6.Size = '1451, 627'
	$datagridview6.TabIndex = 142
	$datagridview6.TabStop = $False
	#
	# tabpage10
	#
	$tabpage10.Controls.Add($labelDisplaysTheLast500Se)
	$tabpage10.Controls.Add($datagridview9)
	$tabpage10.Location = '4, 22'
	$tabpage10.Name = 'tabpage10'
	$tabpage10.Size = '1477, 667'
	$tabpage10.TabIndex = 9
	$tabpage10.Text = 'Security Events'
	$tabpage10.UseVisualStyleBackColor = $True
	#
	# labelDisplaysTheLast500Se
	#
	$labelDisplaysTheLast500Se.AutoSize = $True
	$labelDisplaysTheLast500Se.Location = '8, 14'
	$labelDisplaysTheLast500Se.Name = 'labelDisplaysTheLast500Se'
	$labelDisplaysTheLast500Se.Size = '193, 17'
	$labelDisplaysTheLast500Se.TabIndex = 151
	$labelDisplaysTheLast500Se.Text = 'Displays the last 500 Security Events.'
	$labelDisplaysTheLast500Se.UseCompatibleTextRendering = $True
	#
	# datagridview9
	#
	$datagridview9.AllowUserToAddRows = $False
	$datagridview9.AllowUserToDeleteRows = $False
	$datagridview9.AllowUserToOrderColumns = $True
	$datagridview9.AllowUserToResizeRows = $False
	$datagridview9.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview9.Anchor = 'Top, Bottom, Left, Right'
	$datagridview9.AutoSizeColumnsMode = 'Fill'
	$datagridview9.BackgroundColor = 'GradientInactiveCaption'
	$datagridview9.BorderStyle = 'Fixed3D'
	$datagridview9.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview9.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview9.Location = '8, 33'
	$datagridview9.Name = 'datagridview9'
	$datagridview9.ReadOnly = $True
	$datagridview9.RowHeadersVisible = $False
	$datagridview9.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview9.ScrollBars = 'Vertical'
	$datagridview9.SelectionMode = 'FullRowSelect'
	$datagridview9.ShowCellErrors = $False
	$datagridview9.ShowCellToolTips = $False
	$datagridview9.ShowEditingIcon = $False
	$datagridview9.ShowRowErrors = $False
	$datagridview9.Size = '1451, 627'
	$datagridview9.TabIndex = 144
	$datagridview9.TabStop = $False
	#
	# tabpage11
	#
	$tabpage11.Controls.Add($labelDisplaysTheLast500Sy)
	$tabpage11.Controls.Add($datagridview10)
	$tabpage11.Location = '4, 22'
	$tabpage11.Name = 'tabpage11'
	$tabpage11.Size = '1477, 667'
	$tabpage11.TabIndex = 10
	$tabpage11.Text = 'System Events'
	$tabpage11.UseVisualStyleBackColor = $True
	#
	# labelDisplaysTheLast500Sy
	#
	$labelDisplaysTheLast500Sy.AutoSize = $True
	$labelDisplaysTheLast500Sy.Location = '8, 14'
	$labelDisplaysTheLast500Sy.Name = 'labelDisplaysTheLast500Sy'
	$labelDisplaysTheLast500Sy.Size = '190, 17'
	$labelDisplaysTheLast500Sy.TabIndex = 151
	$labelDisplaysTheLast500Sy.Text = 'Displays the last 500 System Events.'
	$labelDisplaysTheLast500Sy.UseCompatibleTextRendering = $True
	#
	# datagridview10
	#
	$datagridview10.AllowUserToAddRows = $False
	$datagridview10.AllowUserToDeleteRows = $False
	$datagridview10.AllowUserToOrderColumns = $True
	$datagridview10.AllowUserToResizeRows = $False
	$datagridview10.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview10.Anchor = 'Top, Bottom, Left, Right'
	$datagridview10.AutoSizeColumnsMode = 'Fill'
	$datagridview10.BackgroundColor = 'GradientInactiveCaption'
	$datagridview10.BorderStyle = 'Fixed3D'
	$datagridview10.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview10.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview10.Location = '8, 33'
	$datagridview10.Name = 'datagridview10'
	$datagridview10.ReadOnly = $True
	$datagridview10.RowHeadersVisible = $False
	$datagridview10.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview10.ScrollBars = 'Vertical'
	$datagridview10.SelectionMode = 'FullRowSelect'
	$datagridview10.ShowCellErrors = $False
	$datagridview10.ShowCellToolTips = $False
	$datagridview10.ShowEditingIcon = $False
	$datagridview10.ShowRowErrors = $False
	$datagridview10.Size = '1451, 627'
	$datagridview10.TabIndex = 145
	$datagridview10.TabStop = $False
	#
	# tabpage12
	#
	$tabpage12.Controls.Add($labelServiceTriggersCanBe)
	$tabpage12.Controls.Add($datagridview11)
	$tabpage12.Location = '4, 22'
	$tabpage12.Name = 'tabpage12'
	$tabpage12.Size = '1477, 667'
	$tabpage12.TabIndex = 11
	$tabpage12.Text = 'Service Triggers'
	$tabpage12.UseVisualStyleBackColor = $True
	#
	# labelServiceTriggersCanBe
	#
	$labelServiceTriggersCanBe.AutoSize = $True
	$labelServiceTriggersCanBe.Location = '8, 13'
	$labelServiceTriggersCanBe.Name = 'labelServiceTriggersCanBe'
	$labelServiceTriggersCanBe.Size = '383, 17'
	$labelServiceTriggersCanBe.TabIndex = 151
	$labelServiceTriggersCanBe.Text = 'Service triggers can be used by hackers to make a persistence mechanism.'
	$labelServiceTriggersCanBe.UseCompatibleTextRendering = $True
	#
	# datagridview11
	#
	$datagridview11.AllowUserToAddRows = $False
	$datagridview11.AllowUserToDeleteRows = $False
	$datagridview11.AllowUserToOrderColumns = $True
	$datagridview11.AllowUserToResizeRows = $False
	$datagridview11.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview11.Anchor = 'Top, Bottom, Left, Right'
	$datagridview11.AutoSizeColumnsMode = 'Fill'
	$datagridview11.BackgroundColor = 'GradientInactiveCaption'
	$datagridview11.BorderStyle = 'Fixed3D'
	$datagridview11.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview11.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview11.Location = '8, 33'
	$datagridview11.Name = 'datagridview11'
	$datagridview11.ReadOnly = $True
	$datagridview11.RowHeadersVisible = $False
	$datagridview11.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview11.ScrollBars = 'Vertical'
	$datagridview11.SelectionMode = 'FullRowSelect'
	$datagridview11.ShowCellErrors = $False
	$datagridview11.ShowCellToolTips = $False
	$datagridview11.ShowEditingIcon = $False
	$datagridview11.ShowRowErrors = $False
	$datagridview11.Size = '1451, 627'
	$datagridview11.TabIndex = 146
	$datagridview11.TabStop = $False
	#
	# tabpage13
	#
	$tabpage13.Controls.Add($labelInformationAboutCurr)
	$tabpage13.Controls.Add($datagridview12)
	$tabpage13.Location = '4, 22'
	$tabpage13.Name = 'tabpage13'
	$tabpage13.Size = '1477, 667'
	$tabpage13.TabIndex = 12
	$tabpage13.Text = 'Scheduled Tasks'
	$tabpage13.UseVisualStyleBackColor = $True
	#
	# labelInformationAboutCurr
	#
	$labelInformationAboutCurr.AutoSize = $True
	$labelInformationAboutCurr.Location = '8, 13'
	$labelInformationAboutCurr.Name = 'labelInformationAboutCurr'
	$labelInformationAboutCurr.Size = '226, 17'
	$labelInformationAboutCurr.TabIndex = 151
	$labelInformationAboutCurr.Text = 'Information about currently scheduled tasks.'
	$labelInformationAboutCurr.UseCompatibleTextRendering = $True
	#
	# datagridview12
	#
	$datagridview12.AllowUserToAddRows = $False
	$datagridview12.AllowUserToDeleteRows = $False
	$datagridview12.AllowUserToOrderColumns = $True
	$datagridview12.AllowUserToResizeRows = $False
	$datagridview12.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview12.Anchor = 'Top, Bottom, Left, Right'
	$datagridview12.AutoSizeColumnsMode = 'Fill'
	$datagridview12.BackgroundColor = 'GradientInactiveCaption'
	$datagridview12.BorderStyle = 'Fixed3D'
	$datagridview12.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview12.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview12.Location = '8, 33'
	$datagridview12.Name = 'datagridview12'
	$datagridview12.ReadOnly = $True
	$datagridview12.RowHeadersVisible = $False
	$datagridview12.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview12.ScrollBars = 'Vertical'
	$datagridview12.SelectionMode = 'FullRowSelect'
	$datagridview12.ShowCellErrors = $False
	$datagridview12.ShowCellToolTips = $False
	$datagridview12.ShowEditingIcon = $False
	$datagridview12.ShowRowErrors = $False
	$datagridview12.Size = '1451, 627'
	$datagridview12.TabIndex = 147
	$datagridview12.TabStop = $False
	#
	# tabpage14
	#
	$tabpage14.Controls.Add($label1)
	$tabpage14.Controls.Add($datagridview14)
	$tabpage14.Location = '4, 22'
	$tabpage14.Name = 'tabpage14'
	$tabpage14.Size = '1477, 667'
	$tabpage14.TabIndex = 13
	$tabpage14.Text = 'Installed Software'
	$tabpage14.UseVisualStyleBackColor = $True
	#
	# label1
	#
	$label1.AutoSize = $True
	$label1.Location = '9, 13'
	$label1.Name = 'label1'
	$label1.Size = '186, 17'
	$label1.TabIndex = 151
	$label1.Text = 'Information about installed software.'
	$label1.UseCompatibleTextRendering = $True
	#
	# datagridview14
	#
	$datagridview14.AllowUserToAddRows = $False
	$datagridview14.AllowUserToDeleteRows = $False
	$datagridview14.AllowUserToOrderColumns = $True
	$datagridview14.AllowUserToResizeRows = $False
	$datagridview14.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview14.Anchor = 'Top, Bottom, Left, Right'
	$datagridview14.AutoSizeColumnsMode = 'Fill'
	$datagridview14.BackgroundColor = 'GradientInactiveCaption'
	$datagridview14.BorderStyle = 'Fixed3D'
	$datagridview14.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview14.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview14.Location = '8, 33'
	$datagridview14.Name = 'datagridview14'
	$datagridview14.ReadOnly = $True
	$datagridview14.RowHeadersVisible = $False
	$datagridview14.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview14.ScrollBars = 'Vertical'
	$datagridview14.SelectionMode = 'FullRowSelect'
	$datagridview14.ShowCellErrors = $False
	$datagridview14.ShowCellToolTips = $False
	$datagridview14.ShowEditingIcon = $False
	$datagridview14.ShowRowErrors = $False
	$datagridview14.Size = '1451, 627'
	$datagridview14.TabIndex = 148
	$datagridview14.TabStop = $False
	#
	# tabpage15
	#
	$tabpage15.Controls.Add($labelInformationAboutInst)
	$tabpage15.Controls.Add($datagridview16)
	$tabpage15.Location = '4, 22'
	$tabpage15.Name = 'tabpage15'
	$tabpage15.Size = '1477, 667'
	$tabpage15.TabIndex = 14
	$tabpage15.Text = 'HotFixes'
	$tabpage15.UseVisualStyleBackColor = $True
	#
	# labelInformationAboutInst
	#
	$labelInformationAboutInst.AutoSize = $True
	$labelInformationAboutInst.Location = '8, 13'
	$labelInformationAboutInst.Name = 'labelInformationAboutInst'
	$labelInformationAboutInst.Size = '188, 17'
	$labelInformationAboutInst.TabIndex = 150
	$labelInformationAboutInst.Text = 'Information about installed HotFixes.'
	$labelInformationAboutInst.UseCompatibleTextRendering = $True
	#
	# datagridview16
	#
	$datagridview16.AllowUserToAddRows = $False
	$datagridview16.AllowUserToDeleteRows = $False
	$datagridview16.AllowUserToOrderColumns = $True
	$datagridview16.AllowUserToResizeRows = $False
	$datagridview16.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$datagridview16.Anchor = 'Top, Bottom, Left, Right'
	$datagridview16.AutoSizeColumnsMode = 'Fill'
	$datagridview16.BackgroundColor = 'GradientInactiveCaption'
	$datagridview16.BorderStyle = 'Fixed3D'
	$datagridview16.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview16.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridview16.Location = '8, 33'
	$datagridview16.Name = 'datagridview16'
	$datagridview16.ReadOnly = $True
	$datagridview16.RowHeadersVisible = $False
	$datagridview16.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridview16.ScrollBars = 'Vertical'
	$datagridview16.SelectionMode = 'FullRowSelect'
	$datagridview16.ShowCellErrors = $False
	$datagridview16.ShowCellToolTips = $False
	$datagridview16.ShowEditingIcon = $False
	$datagridview16.ShowRowErrors = $False
	$datagridview16.Size = '1451, 627'
	$datagridview16.TabIndex = 149
	$datagridview16.TabStop = $False
	#
	# tabpage6
	#
	$tabpage6.Controls.Add($webbrowser1)
	$tabpage6.Location = '4, 22'
	$tabpage6.Name = 'tabpage6'
	$tabpage6.Size = '1477, 667'
	$tabpage6.TabIndex = 5
	$tabpage6.Text = 'Advanced Audit'
	$tabpage6.UseVisualStyleBackColor = $True
	#
	# webbrowser1
	#
	$webbrowser1.AllowNavigation = $False
	$webbrowser1.AllowWebBrowserDrop = $False
	$webbrowser1.Anchor = 'Top, Bottom, Left, Right'
	$webbrowser1.Location = '8, 3'
	$webbrowser1.MinimumSize = '20, 20'
	$webbrowser1.Name = 'webbrowser1'
	$webbrowser1.ScriptErrorsSuppressed = $True
	$webbrowser1.Size = '1463, 661'
	$webbrowser1.TabIndex = 0
	#
	# textbox2
	#
	$textbox2.Anchor = 'Top, Right'
	$textbox2.BackColor = '0, 20, 41'
	$textbox2.BorderStyle = 'None'
	$textbox2.Cursor = 'Arrow'
	$textbox2.Font = 'Microsoft Sans Serif, 7.5pt'
	$textbox2.ForeColor = 'White'
	$textbox2.Location = '1288, 38'
	$textbox2.Multiline = $True
	$textbox2.Name = 'textbox2'
	$textbox2.ReadOnly = $True
	$textbox2.Size = '175, 30'
	$textbox2.TabIndex = 105
	$textbox2.Text = 'Logoff all current users and disable Network Interface Adapters.'
	$textbox2.TextAlign = 'Right'
	#
	# buttonLockdownSecureSystem
	#
	$buttonLockdownSecureSystem.Anchor = 'Top, Right'
	$buttonLockdownSecureSystem.BackColor = 'Orange'
	$buttonLockdownSecureSystem.FlatStyle = 'Popup'
	#region Binary Data
	$buttonLockdownSecureSystem.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAchJREFU
OE+F081LlFEUx/HzFwiKO0EYTMJF/4GIRsgQ5kIQREwidNSduIy2tXXrItqEoKAIBgliRS+udKOI
DYgYg0aWog/qPJU4x+9vfB66jIIXPnDvufec5+XeaxWtGrW30JprranRbKPPrDRs5mN4jpd4gWcY
xSB6WXOHtcq5SqXVm33NMxnjFMc4wD528R1b+IZ1vIdyknSzJ2bHfwmqwBlOoCKH+IWf2EMBm/iM
R+Qk6WY5s0hP/pOqqvrfr4jpIR/RQU6SbjbA4IggEY+HhrxULHoxmy2PRX3FNKfxEh6GBZ4y0Kv+
xkEm4+eFgpfi2CMVUTJ9xTSnNQvIhgX4B5G+MfWjocH/JUVEfcXS+Xm0hwX6GehP7wT2czlPm/rh
3CwehAXY/0jbpK2UXV77gifHPFnUVyydn8L9sACHI9L2aI+329rKCUUS13htUV8xzWnNG7SGBXoY
rBFcwdbIiEf5vK+QqHEZfcU0p/FrtIQFujkUqwSX8QUfkn5IMc3JBJrDg3SXY8m59E/QMV3EO7zF
HGYwjUm8wjjqwqNMa7rHBeGylHRhOBfO1vpj8H+cT3Te0rvQyZpM5WUKWg1uusIhrUma2SUVZX88
8dj26AAAAABJRU5ErkJggg==')
	#endregion
	$buttonLockdownSecureSystem.ImageAlign = 'MiddleLeft'
	$buttonLockdownSecureSystem.Location = '1302, 9'
	$buttonLockdownSecureSystem.Name = 'buttonLockdownSecureSystem'
	$buttonLockdownSecureSystem.Size = '161, 23'
	$buttonLockdownSecureSystem.TabIndex = 104
	$buttonLockdownSecureSystem.Text = 'Lockdown/Secure System'
	$buttonLockdownSecureSystem.TextAlign = 'MiddleRight'
	$buttonLockdownSecureSystem.UseCompatibleTextRendering = $True
	$buttonLockdownSecureSystem.UseVisualStyleBackColor = $False
	$buttonLockdownSecureSystem.add_Click($buttonLockdownSecureSystem_Click)
	#
	# statusstrip1
	#
	$statusstrip1.Anchor = 'Bottom, Left, Right'
	$statusstrip1.AutoSize = $False
	$statusstrip1.Dock = 'None'
	[void]$statusstrip1.Items.Add($toolstripstatuslabel1)
	[void]$statusstrip1.Items.Add($toolstripstatuslabel2)
	$statusstrip1.Location = '0, 777'
	$statusstrip1.Name = 'statusstrip1'
	$statusstrip1.Size = '1475, 22'
	$statusstrip1.SizingGrip = $False
	$statusstrip1.TabIndex = 0
	$statusstrip1.Text = 'statusstrip1'
	#
	# picturebox1
	#
	$picturebox1.Anchor = 'Top, Left, Right'
	$picturebox1.BackColor = 'Transparent'
	#region Binary Data
	$picturebox1.BackgroundImage = [System.Convert]::FromBase64String('
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')
	#endregion
	#region Binary Data
	$picturebox1.Image = [System.Convert]::FromBase64String('
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
TkSuQmCC')
	#endregion
	$picturebox1.Location = '-4, -3'
	$picturebox1.Margin = '0, 0, 0, 0'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '1485, 79'
	$picturebox1.TabIndex = 1
	$picturebox1.TabStop = $False
	#
	# toolstripstatuslabel1
	#
	$toolstripstatuslabel1.BackColor = 'WhiteSmoke'
	$toolstripstatuslabel1.DisplayStyle = 'Text'
	$toolstripstatuslabel1.Name = 'toolstripstatuslabel1'
	$toolstripstatuslabel1.Size = '72, 17'
	$toolstripstatuslabel1.Text = 'Version 2.1.3'
	#
	# buttonBrowse3
	#
	$buttonBrowse3.Location = '889, 209'
	$buttonBrowse3.Name = 'buttonBrowse3'
	$buttonBrowse3.Size = '30, 23'
	$buttonBrowse3.TabIndex = 1
	$buttonBrowse3.Text = '...'
	$buttonBrowse3.UseCompatibleTextRendering = $True
	$buttonBrowse3.UseVisualStyleBackColor = $True
	#
	# textboxFile
	#
	$textboxFile.AutoCompleteMode = 'SuggestAppend'
	$textboxFile.AutoCompleteSource = 'FileSystem'
	$textboxFile.Location = '655, 211'
	$textboxFile.Name = 'textboxFile'
	$textboxFile.Size = '228, 20'
	$textboxFile.TabIndex = 0
	#
	# toolstripstatuslabel2
	#
	$toolstripstatuslabel2.BackColor = 'WhiteSmoke'
	$toolstripstatuslabel2.Name = 'toolstripstatuslabel2'
	$toolstripstatuslabel2.Size = '135, 17'
	$toolstripstatuslabel2.Text = 'Jeff Holder, CISSP (2019)'
	#
	# Column1
	#
	$Column1.HeaderText = 'Module'
	$Column1.Name = 'Column1'
	$Column1.ReadOnly = $True
	#
	# Column3
	#
	$Column3.HeaderText = 'Category'
	$Column3.Name = 'Column3'
	$Column3.ReadOnly = $True
	#
	# Column2
	#
	$Column2.HeaderText = 'Status'
	$Column2.Name = 'Column2'
	$Column2.ReadOnly = $True
	$statusstrip1.ResumeLayout()
	$tabpage6.ResumeLayout()
	$tabpage15.ResumeLayout()
	$tabpage14.ResumeLayout()
	$tabpage13.ResumeLayout()
	$tabpage12.ResumeLayout()
	$tabpage11.ResumeLayout()
	$tabpage10.ResumeLayout()
	$tabpage7.ResumeLayout()
	$tabpage8.ResumeLayout()
	$tabpage5.ResumeLayout()
	$tabpage4.ResumeLayout()
	$tabpage3.ResumeLayout()
	$tabpage2.ResumeLayout()
	$tabpage9.ResumeLayout()
	$groupbox7.ResumeLayout()
	$groupbox8.ResumeLayout()
	$groupbox6.ResumeLayout()
	$groupbox5.ResumeLayout()
	$tabpage1.ResumeLayout()
	$tabcontrol1.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{ 
		if($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
		
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: Processes.psf
function Show-Processes_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
WAgAAB+LCAAAAAAABAC9llmPozgQgN8j5T+05pVRc4VL6m6JcIQjBAiEhLwRjnAYO+EIx6/fTM/s
od2HlVartl9ctlxfVamq7Ld9GqNH2kxy1EUvz0VbIPj+jX4lv30sFy8vb3ZTXAsYAbUA6S6q0w+n
QXHatmn7emuzN/wf55+3VNTUH/yV9HU6yBR3JYqSLUviz7EW5R2gyAdViu4oCA4F04Ev74UhTwcP
iUQkdbuby0tkXT/MImYKlJQ6n5zRWcCWi/Owi4LBGO/weK8M0ed6nqNxkt919IWVMsXuOxyv9nqC
70RBQ4ZzxKa59KouFSzD0W93kjTBkcWyYEssFxWB9+4xsArAzkEZZ3AY5wZaquNumODmc4zEOrbe
P0KZCqRREljHO3S9cbTnvNmZWmpnto4kwMJe5ZeLFTnoRs49gD7k0yTPnjxCR1UQvzp7kRQwTFcj
68gSR7T1WJbGPJYDhhnGM6jMofWUW01la53up5h92uZrqFNwmQVYcQtkp5J1L2038aFb97lP3pOW
NPdTAsT71T/sTYyJ4+BYGcM89UF5z4qoAYWJX89Tftiay4U1FSdLVYMYOdmpwdDGPHlFdDZpvrai
w4SRo1BkUMpbV3dvCbo1W/9Ec6ja02OKW8atY839Ta9ugGi65YIaspmWqXHFkIydDOXmquIJd2f4
k5ErpZlceThy7qD127ws1r9nAsCsLFb1Efq+X0utXfvZwXWWC+UkDqEen8d+HJt7Mq1lu2VDTDLz
aAjHOKgRcYByE/oUJALPE4/bJG4kMknKQJn5DWacjHrk211EuU/bYtxQKo/optAYuVLuumHaWIB8
5qllj20cWlKkrtcY8vGkGliLg+EujiaYajGu9zmUfUWhmtWl0ngjWi4Sz20TE2rrZoNDGc1K58rC
dpuROj8ScF+PMhVN7eEBbTM9+xAIpRsS2nUE6nQf8PtpdnkHaeVoourpqdAfGxUUZ/tihY6spdoF
KXdtNV8URXbCODkLRWvhyUaV94MAEZjEpt/sBa4nhRwIfdrJZ+3CkkpL6vlyIUGK43BOBDLVBusr
jLgH5wceNw3JWNqdLITqKcoIGj/K1uoBcfYKLwSer2v6dhC7bUw9NM88OSpvePhycfXSLNnc8ogD
OPAFzMMNo8cIi+e7Ae5BT86PVTJtEAkI6bwqnI5VTjLX5eSD312rNVXsFftZ3u9v+Gf5fzYC8dkp
6gso0vZT/nNn+qjbGD1T9PL9JfjVdlavxI/5/UXqQdc36TtM+66JwPcXp3/qiM108lGVwvcLx0VM
zLCkQK9Sghfe8D+0/p3iTW2X1l/BeD0WMEFD+/rD+/ZLiD+a9teAmmgo4PW/sAg6YzIuI8mEISI6
+nfWqQZf4pOEmvRrglc0adyhZvLS5lE8H88vCeMv2K/n+v9H/iH+rO03/K8/iY/fAI1k8OpYCAAA#>
#endregion
param (
[string]$computer
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formRunningProcesses = New-Object 'System.Windows.Forms.Form'
	$labelEnterTheNameOfThePro = New-Object 'System.Windows.Forms.Label'
	$buttonRefresh = New-Object 'System.Windows.Forms.Button'
	$death = New-Object 'System.Windows.Forms.TextBox'
	$buttonKillProcessName = New-Object 'System.Windows.Forms.Button'
	$process_text = New-Object 'System.Windows.Forms.RichTextBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$FormEvent_Load={
		$Processes = invoke-command -ComputerName $computer -ScriptBlock { Get-Process } | Out-String 
		$process_text.Text = $Processes
	}
	
	$buttonKillProcessName_Click={
		$death = $death.Text
		$die = gwmi -comp $computer win32_process | ? name -like *$death.exe
		[void]$die.terminate()
		$process_text.Text = ""
		$Processes = invoke-command -ComputerName $computer -ScriptBlock { Get-Process } | Out-String
		$process_text.Text = $Processes
		
		
	}
	
	$buttonRefresh_Click = {
		$process_text.Text = ""
		$Processes = invoke-command -ComputerName $computer -ScriptBlock { Get-Process } | Out-String
		$process_text.Text = $Processes
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formRunningProcesses.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Processes_death = $death.Text
		$script:Processes_process_text = $process_text.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonRefresh.remove_Click($buttonRefresh_Click)
			$buttonKillProcessName.remove_Click($buttonKillProcessName_Click)
			$formRunningProcesses.remove_Load($FormEvent_Load)
			$formRunningProcesses.remove_Load($Form_StateCorrection_Load)
			$formRunningProcesses.remove_Closing($Form_StoreValues_Closing)
			$formRunningProcesses.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formRunningProcesses.SuspendLayout()
	#
	# formRunningProcesses
	#
	$formRunningProcesses.Controls.Add($labelEnterTheNameOfThePro)
	$formRunningProcesses.Controls.Add($buttonRefresh)
	$formRunningProcesses.Controls.Add($death)
	$formRunningProcesses.Controls.Add($buttonKillProcessName)
	$formRunningProcesses.Controls.Add($process_text)
	$formRunningProcesses.AutoScaleDimensions = '6, 13'
	$formRunningProcesses.AutoScaleMode = 'Font'
	$formRunningProcesses.ClientSize = '632, 589'
	$formRunningProcesses.FormBorderStyle = 'FixedDialog'
	$formRunningProcesses.MaximizeBox = $False
	$formRunningProcesses.MinimizeBox = $False
	$formRunningProcesses.Name = 'formRunningProcesses'
	$formRunningProcesses.StartPosition = 'CenterScreen'
	$formRunningProcesses.Text = 'Running Processes'
	$formRunningProcesses.add_Load($FormEvent_Load)
	#
	# labelEnterTheNameOfThePro
	#
	$labelEnterTheNameOfThePro.AutoSize = $True
	$labelEnterTheNameOfThePro.Location = '124, 9'
	$labelEnterTheNameOfThePro.Name = 'labelEnterTheNameOfThePro'
	$labelEnterTheNameOfThePro.RightToLeft = 'Yes'
	$labelEnterTheNameOfThePro.Size = '232, 17'
	$labelEnterTheNameOfThePro.TabIndex = 5
	$labelEnterTheNameOfThePro.Text = 'Enter the name of the process you want to kill'
	$labelEnterTheNameOfThePro.UseCompatibleTextRendering = $True
	#
	# buttonRefresh
	#
	$buttonRefresh.Location = '504, 25'
	$buttonRefresh.Name = 'buttonRefresh'
	$buttonRefresh.Size = '101, 23'
	$buttonRefresh.TabIndex = 4
	$buttonRefresh.Text = 'Refresh'
	$buttonRefresh.UseCompatibleTextRendering = $True
	$buttonRefresh.UseVisualStyleBackColor = $True
	$buttonRefresh.add_Click($buttonRefresh_Click)
	#
	# death
	#
	$death.Location = '130, 28'
	$death.Name = 'death'
	$death.Size = '213, 20'
	$death.TabIndex = 3
	#
	# buttonKillProcessName
	#
	$buttonKillProcessName.Location = '14, 28'
	$buttonKillProcessName.Name = 'buttonKillProcessName'
	$buttonKillProcessName.Size = '110, 22'
	$buttonKillProcessName.TabIndex = 2
	$buttonKillProcessName.Text = 'Kill Process Name'
	$buttonKillProcessName.UseCompatibleTextRendering = $True
	$buttonKillProcessName.UseVisualStyleBackColor = $True
	$buttonKillProcessName.add_Click($buttonKillProcessName_Click)
	#
	# process_text
	#
	$process_text.Font = 'Courier New, 8.25pt'
	$process_text.Location = '12, 66'
	$process_text.Name = 'process_text'
	$process_text.Size = '608, 510'
	$process_text.TabIndex = 1
	$process_text.Text = ''
	$formRunningProcesses.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formRunningProcesses.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formRunningProcesses.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formRunningProcesses.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formRunningProcesses.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formRunningProcesses.ShowDialog()

}
#endregion Source: Processes.psf

#Start the application
Main ($CommandLine)
